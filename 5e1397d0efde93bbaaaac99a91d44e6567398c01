{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9f2b604a_be5ac3cc",
        "filename": "crypto/bn_extra/convert.c",
        "patchSetId": 2
      },
      "lineNbr": 357,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-16T20:00:52Z",
      "side": 1,
      "message": "Weird that this is only showing up now.\n\nTrusty uses musl these days, right? (b/110161494) Perhaps, rather than having to guard every use of FILE BIOs, we should just make FILE BIOs work? In particular, it\u0027s weird that we simultaneously believe:\n\n* Trusty has FILE from stdio.h\n* Trusty has BIOs in general\n* crypto/bio/file.c only uses functions defined in C, not POSIX (I believe this is true)\n* Trusty somehow doesn\u0027t get to build crypto/bio/file.c\n\nIf you instead just remove the OPENSSL_TRUSTY guard in that file, how far is it from building?",
      "revId": "5e1397d0efde93bbaaaac99a91d44e6567398c01",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3369e97_fef69088",
        "filename": "crypto/bn_extra/convert.c",
        "patchSetId": 2
      },
      "lineNbr": 357,
      "author": {
        "id": 16171
      },
      "writtenOn": "2023-06-16T20:17:22Z",
      "side": 1,
      "message": "This is actually showing up now because we\u0027ve hijacked Trusty for our firmware build of `boringssl`: http://b/273639386. We don\u0027t have filesystem support enabled in our firmware C library (newlib).\n\nWhat\u0027s interesting is that this *was* compiling fine, but when I tried to add a [change for unrelated compilation flags](https://crrev.com/c/4610318), the build started to fail. I didn\u0027t look into the exact reason the compilation started to fail, since it does look like it\u0027s wrong as written.",
      "parentUuid": "9f2b604a_be5ac3cc",
      "revId": "5e1397d0efde93bbaaaac99a91d44e6567398c01",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6807bae_391f21aa",
        "filename": "crypto/bn_extra/convert.c",
        "patchSetId": 2
      },
      "lineNbr": 357,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-16T20:23:35Z",
      "side": 1,
      "message": "I see. Don\u0027t hijack another platform\u0027s `#define`. We won\u0027t support you if you do that. Trusty is go/trusty and only go/trusty. It is not a generic embedded target. (Embedded targets vary too much to be a single one, and we already have far too much tech debt to clean up from other embedded targets hacking around with the build.)\n\nIf you want to add support for a new embedded target, send the team list an email with details, and we can figure out:\na) Whether we can support you at all\nb) How best to handle that in code\n\nSupposing you pass (a), probably (b) will look like us recogizing your platform\u0027s #define and then generalizing the OPENSSL_TRUSTY ifdefs accordingly. Actually I\u0027m overdue for generalizing some of them for another embedded target anyway, so I may just go upload that...",
      "parentUuid": "f3369e97_fef69088",
      "revId": "5e1397d0efde93bbaaaac99a91d44e6567398c01",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38ed12d3_be72c2a1",
        "filename": "crypto/bn_extra/convert.c",
        "patchSetId": 2
      },
      "lineNbr": 357,
      "author": {
        "id": 16171
      },
      "writtenOn": "2023-06-16T21:28:19Z",
      "side": 1,
      "message": "Sent a note to you to the team list.\n\nI completely agree that Trusty should only be used for Trusty. That said, this does look like a real bug that could affect Trusty too, so it should probably be fixed (regardless of the other work).",
      "parentUuid": "e6807bae_391f21aa",
      "revId": "5e1397d0efde93bbaaaac99a91d44e6567398c01",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05f1dcd9_30432ec1",
        "filename": "crypto/bn_extra/convert.c",
        "patchSetId": 2
      },
      "lineNbr": 357,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-16T21:32:06Z",
      "side": 1,
      "message": "Yeah, I suspect Trusty is getting by because the static linker is dropping BN_print_fp. :-) Agreed that\u0027s not great and we should do something.\n\nBut probably the right fix for Trusty is https://boringssl-review.googlesource.com/c/boringssl/+/60889, because they have a perfectly functional \u003cstdio.h\u003e these days. (A way that borrowing others\u0027 defines is awkward.)\n\nAlso uploaded https://boringssl-review.googlesource.com/c/boringssl/+/60890 which starts generalizing a few things. Though it leaves the FILE question alone... that one\u0027s a little fun because we have to decide on a boundary for \u003cstdio.h\u003e (elsewhere we assume `FILE*` and `stderr` exist).",
      "parentUuid": "38ed12d3_be72c2a1",
      "revId": "5e1397d0efde93bbaaaac99a91d44e6567398c01",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "841b4b2c_357be4c8",
        "filename": "crypto/bn_extra/convert.c",
        "patchSetId": 2
      },
      "lineNbr": 357,
      "author": {
        "id": 16171
      },
      "writtenOn": "2023-06-16T21:33:13Z",
      "side": 1,
      "message": "üëç",
      "parentUuid": "05f1dcd9_30432ec1",
      "revId": "5e1397d0efde93bbaaaac99a91d44e6567398c01",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "5e1397d0efde93bbaaaac99a91d44e6567398c01",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5e1397d0efde93bbaaaac99a91d44e6567398c01",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}