{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8d1b1c8e_7ac83377",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14076
      },
      "writtenOn": "2022-03-02T09:03:05Z",
      "side": 1,
      "message": "Hi, I was trying to use the rust bindings (just for testing) and encountered this problem. PTAL?",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e2608ee_911991e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-03-04T19:41:24Z",
      "side": 1,
      "message": "drysdale: Would you be able to take a look at this, now that bwb is gone? I suspect neither AGL nor I really have the expertise to fully review this directory yet.",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "feeffc5f_314372c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 11500
      },
      "writtenOn": "2022-03-07T07:34:55Z",
      "side": 1,
      "message": "I can well believe there are build environment oddities given the way the Rust bindings get built, but a minimal test crate (see below) works for me with Cargo.  \n\nHowever, that might be because I\u0027ve got something pre-configured in my environment -- what does building the example below give for you?  Is your build environment a \"normal\" open-source Cargo setup?\n\n```\n% more Cargo.toml src/main.rs \n::::::::::::::\nCargo.toml\n::::::::::::::\n[package]\nname \u003d \"bssl-dep\"\nversion \u003d \"0.1.0\"\nedition \u003d \"2018\"\n[dependencies]\nbssl-sys \u003d \"*\"\nhex \u003d \"0.4\"\n[patch.crates-io]\nbssl-sys \u003d { path \u003d \"../src/boringssl/build/rust\"}\n::::::::::::::\nsrc/main.rs\n::::::::::::::\nfn main() {\n    // SHA-256 of a message.\n    bssl_sys::init();\n    let msg \u003d [0x00u8];\n    let mut tag \u003d [0; bssl_sys::SHA256_DIGEST_LENGTH as usize];\n    let result \u003d unsafe { bssl_sys::SHA256(msg.as_ptr(), msg.len(), tag.as_mut_ptr()) };\n    assert_eq!(result, tag.as_mut_ptr());\n    println!(\"SHA256({}) \u003d {}\", hex::encode(\u0026msg), hex::encode(tag));\n}\n\n% cargo run\n    Finished dev [unoptimized + debuginfo] target(s) in 0.01s\n     Running `target/debug/bssl-dep`\nSHA256(00) \u003d 6e340b9cffb37a989ca544e6bb780a2c78901d3fb33738768511a30617afa01d\n```",
      "parentUuid": "8d1b1c8e_7ac83377",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba2c885b_1f74042d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14076
      },
      "writtenOn": "2022-03-07T08:29:00Z",
      "side": 1,
      "message": "Overriding dependencies using the [patch] section might work but my understanding is that the [patch] section is to work around problems which happen when publishing crates [1]. I think most developers use `path` in the [dependencies] section for relative dependencies like:\n```\n[dependencies]\nbssl-sys \u003d { path \u003d \"../src/boringssl/build/rust\" }\n```\n\nI think using CARGO_MANIFEST_DIR is a common way to specify relative directories in `build.rs` for -sys crates. For example, windows-rs[2] and sdl2[3]. \n\n[1] https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html\n[2] https://github.com/microsoft/windows-rs/blob/master/crates/targets/x86_64_msvc/build.rs\n[3] https://github.com/Rust-SDL2/rust-sdl2/blob/master/sdl2-sys/build.rs",
      "parentUuid": "feeffc5f_314372c1",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f9ffa8ba_c44d6a0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14076
      },
      "writtenOn": "2022-03-07T08:29:00Z",
      "side": 1,
      "message": "Thank you for review!",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "401f842c_175931c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 11500
      },
      "writtenOn": "2022-03-07T15:12:58Z",
      "side": 1,
      "message": "Using `path` in `[dependencies]` instead of a `[patch.crates-io]` section also works fine for my local build, so I\u0027m still wondering if your environment is setup differently somehow -- e.g. is Windows involved (given that you mention Windows-specific crates)?\n\n(https://github.com/rust-lang/rust/issues/42869 might be relevant if that were the case)",
      "parentUuid": "ba2c885b_1f74042d",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4c6fa13_1cd90839",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14076
      },
      "writtenOn": "2022-03-08T04:10:43Z",
      "side": 1,
      "message": "I use Ubuntu to build the crate. I guess your setup (`../src/boringssl/build/rust`) happens to resolve relative paths into correct ones? Here is the commands I used and errors I got:\n\n```\n$ cargo new boringssl-submodule\n$ mkdir boringssl-submodule/third_party\n$ cd boringssl-submodule/third_party\n$ git submodule add https://boringssl.googlesource.com/boringssl\n$ mkdir boringssl/build\n$ cd boringssl/build\n$ cmake -GNinja -DRUST_BINDINGS\u003dx86_64-unknown-linux-gnu ..\n$ ninja\n$ cd ../../..\n$ vim Cargo.toml\n# (Add `bssl-sys \u003d { path \u003d \"third_party/boringssl/build/rust\" }` to dependencies)\n$ cargo build\n   Compiling bssl-sys v0.1.0 (/home/bashi/tmp/boringssl-submodule/third_party/boringssl/build/rust)\nerror: could not find native static library `crypto`, perhaps an -L flag is missing?\n\nerror: could not compile `bssl-sys` due to previous error\n```",
      "parentUuid": "401f842c_175931c4",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e3b7936_198e5ab5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 11500
      },
      "writtenOn": "2022-03-08T07:50:25Z",
      "side": 1,
      "message": "Thanks for the build details; on experimentation, it seems that Cargo\u0027s relative path behaviour changes depending on whether the `path` for the dependency is beneath the current directory or not -- which is a new discovery for me!\n\n(e.g. doing `mv third_party/ ../temp_third_party \u0026\u0026 sed -i.bak \u0027s@third_party@../temp_third_party@\u0027 Cargo.toml \u0026\u0026 cargo build` on your setup gives a working build)\n\nSorry for the back-and-forth -- now that I understand why I wasn\u0027t seeing the problem, the solution LGTM.",
      "parentUuid": "f4c6fa13_1cd90839",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e74fb49e_fef760ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14076
      },
      "writtenOn": "2022-03-08T08:19:38Z",
      "side": 1,
      "message": "No problem, thank you for careful review! Also thank you for adding the binding :)",
      "parentUuid": "8e3b7936_198e5ab5",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0fb3c73_067e2032",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 11500
      },
      "writtenOn": "2022-03-08T08:54:26Z",
      "side": 1,
      "message": "\u003e Also thank you for adding the binding :)\n\nThat wasn\u0027t me, that was bwb@ (who\u0027s since left Google)",
      "parentUuid": "e74fb49e_fef760ee",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "374034dc_0c447bc5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-03-08T21:41:21Z",
      "side": 1,
      "message": "rubber stamp lgtm :-)",
      "revId": "59c4a33acc9d0054fdbb0a2d4e5fdcaff09c4a78",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": []
}