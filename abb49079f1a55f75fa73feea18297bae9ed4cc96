{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e1760a5c_e17aa58f",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 584,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-16T23:06:13Z",
      "side": 1,
      "message": "If we were to do this is there any reason to make this special in here? as opposed to simply changing them all and calling this BORINGSSL_assert() or something like that?",
      "revId": "abb49079f1a55f75fa73feea18297bae9ed4cc96",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8086f277_4806284d",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 584,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T01:05:58Z",
      "side": 1,
      "message": "Ah yeah, declassifying public values is perfectly kosher. That would avoid us having to make that decision everywhere, though at the cost of making all our code (a lot of which is not asserting on private data), look different from standard C.\n\nNaming is a bit interesting... our other APIs that look like the C standard library, but with our variant on the semantics, are named like `OPENSSL_memcpy` or `OPENSSL_malloc`. But upstream has an `OPENSSL_assert` already... except they decided to make it not `assert`, but `CHECK`. It runs unconditionally!",
      "parentUuid": "e1760a5c_e17aa58f",
      "revId": "abb49079f1a55f75fa73feea18297bae9ed4cc96",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff0926c7_5c26c5a5",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 584,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-17T17:48:24Z",
      "side": 1,
      "message": "well, then it can\u0027t be OPENSSL_assert, it could be BORINGSSL_assert, although people might still then assume it\u0027s the same.  Boo on openssl for making me a thing with assert in the name that can\u0027t be compiled out. \n\nnevertheless that\u0027s still an outlier for something caller assert in C, so I think BORINGSSL_assert would be just fine\n\nAlternatively could be BORINGSSL_DCHECK",
      "parentUuid": "8086f277_4806284d",
      "revId": "abb49079f1a55f75fa73feea18297bae9ed4cc96",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0139c89e_6780513d",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 584,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-03-21T01:31:57Z",
      "side": 1,
      "message": "Out-of-band chat: neither of us seems to be able to come up with something that isn\u0027t annoying for one reason or another, so let\u0027s just land this as-is.",
      "parentUuid": "ff0926c7_5c26c5a5",
      "revId": "abb49079f1a55f75fa73feea18297bae9ed4cc96",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1fca80d1_2596c47f",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 584,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-03-21T01:33:48Z",
      "side": 1,
      "message": "yeah, the alternatives are all annoying. I agree to just land it.",
      "parentUuid": "0139c89e_6780513d",
      "revId": "abb49079f1a55f75fa73feea18297bae9ed4cc96",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}