{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "54f2cb37_55523249",
        "filename": "rust/bssl-crypto/src/hmac.rs",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-06-07T18:13:20Z",
      "side": 1,
      "message": "if it helps you could just remove this API for now, since we didn\u0027t end up actually using it. \n\nThe goal was to save some performance because we run a lot of hmac operations using the same key and have to build a new hmac instance each time, so we were hoping to save some performance by re-using the hmac instance by resetting its state rather than build a new one. Instead of this, we should probably add a `verify_slice_reset` or `finalize_reset` : https://docs.rs/digest/0.10.7/digest/trait.Mac.html#tymethod.verify_slice_reset\nhttps://docs.rs/digest/0.10.7/digest/trait.Mac.html#tymethod.finalize_reset",
      "range": {
        "startLine": 140,
        "startChar": 3,
        "endLine": 140,
        "endChar": 29
      },
      "revId": "8c5ba939e8293a66b65d428c53895d551c45b95d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "142244e3_55ffec6f",
        "filename": "rust/bssl-crypto/src/hmac.rs",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-07T18:17:48Z",
      "side": 1,
      "message": "Eh, I don\u0027t mind keeping it around for now. I see their API has `reset` too.\n\nWhat\u0027s the benefit of `finalize_reset`, etc., over just implementing `Clone` on these objects? That\u0027s more thread-safe anyway, since it means you don\u0027t have to mutate your template.\n\nBetter yet, have a separate key type, like ring does. That\u0027s slightly more efficient memory-wise too, though our C API doesn\u0027t currently admit that optimization. (It should.)\nhttps://briansmith.org/rustdoc/ring/hmac/",
      "parentUuid": "54f2cb37_55523249",
      "range": {
        "startLine": 140,
        "startChar": 3,
        "endLine": 140,
        "endChar": 29
      },
      "revId": "8c5ba939e8293a66b65d428c53895d551c45b95d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0f38329d_7993e2c2",
        "filename": "rust/bssl-crypto/src/hmac.rs",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-06-07T18:28:50Z",
      "side": 1,
      "message": "I would think `finalize_reset` saves some memory over clone since it doesn\u0027t require cloning into a new object, although it has the undesirable mutable state.\n\nI agree a separate key type seems like the best option, but that would again differ from the RustCrypto API surface. Not sure if that actually matters, but I remember in initial discussions we had that as a sort of goal",
      "parentUuid": "142244e3_55ffec6f",
      "range": {
        "startLine": 140,
        "startChar": 3,
        "endLine": 140,
        "endChar": 29
      },
      "revId": "8c5ba939e8293a66b65d428c53895d551c45b95d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7ad316a_7f60259d",
        "filename": "rust/bssl-crypto/src/hmac.rs",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-08T15:21:59Z",
      "side": 1,
      "message": "\u003e I would think `finalize_reset` saves some memory over clone since it doesn\u0027t require cloning into a new object, although it has the undesirable mutable state.\n\nWhile looking narrowly, `finalize_reset` makes fewer objects than `clone`, it\u0027s focusing on memory in the wrong place.\n\nTypically your pending operations will be short-lived and stack allocated, so the memory usage doesn\u0027t really matter. Also the amount of memory used for a hash context is trivial... if we\u0027re concerned about memory there, there are far bigger memory savings to be had by fixing up some inefficiencies caused by `HMAC_CTX` using suboptimal abstractions internally.\n\nWhere memory makes more sense is in the part you retain across operations. There, `finalize_reset` is structurally wrong because it maintains state for a pending operation, when all you wanted was a key. That\u0027s what ring\u0027s API solves.\n\nRegardless, this CL is just about fixing up some conventions in the original docs. Let\u0027s fix APIs separately. :-)",
      "parentUuid": "0f38329d_7993e2c2",
      "range": {
        "startLine": 140,
        "startChar": 3,
        "endLine": 140,
        "endChar": 29
      },
      "revId": "8c5ba939e8293a66b65d428c53895d551c45b95d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "8c5ba939e8293a66b65d428c53895d551c45b95d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "8c5ba939e8293a66b65d428c53895d551c45b95d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}