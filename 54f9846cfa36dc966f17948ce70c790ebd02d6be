{
  "comments": [
    {
      "key": {
        "uuid": "ad57bb67_9454299f",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 3
      },
      "lineNbr": 3542,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-01-31T00:27:08Z",
      "side": 1,
      "message": "May as well put this with the other functions. Strange to have this one be C and the others C++.",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02e5bc87_5c0eda24",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 3
      },
      "lineNbr": 3542,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-01-31T00:27:08Z",
      "side": 1,
      "message": "I called it \"mode\" in the original version because it was an enum that told the SSL whether it was the handshaker or the record layer. Though it looks like you\u0027ve made it implicit instead. (I don\u0027t hugely care either way. Maybe we don\u0027t need that state?)",
      "range": {
        "startLine": 3542,
        "startChar": 59,
        "endLine": 3542,
        "endChar": 62
      },
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a16ee06d_8c3ab4ff",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 3
      },
      "lineNbr": 3542,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-01-31T22:05:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad57bb67_9454299f",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "269e8b52_0552332c",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 3
      },
      "lineNbr": 3542,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-01-31T22:05:53Z",
      "side": 1,
      "message": "\"original version\" \u003c- I assume there was a doc that I didn\u0027t remember about? I just made these names up as I went.\n\nBut, yea, the handshaker / record split is implicit: if you apply a handoff, you\u0027re a handshaker. If you apply a handback, you\u0027re a record processor.\n\n(We can always rename stuff later. Need to get the roll started now.)",
      "parentUuid": "02e5bc87_5c0eda24",
      "range": {
        "startLine": 3542,
        "startChar": 59,
        "endLine": 3542,
        "endChar": 62
      },
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b56b356_9617b32a",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 3
      },
      "lineNbr": 4477,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-01-31T00:27:08Z",
      "side": 1,
      "message": "OPENSSL_EXPORT?\n\nIt is a little odd that these are C++ but with C naming. It wouldn\u0027t be transparent to the caller since they would need to write bssl::SSL_serialize_handoff.\n\n(I don\u0027t have strong opinions on whether we should be writing new APIs in C++ or C style. C++ means we can use bool and Span, which is nice. I dunno. I\u0027ve been making them C just out of habit.)",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4824cd7_a78b2479",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 3
      },
      "lineNbr": 4477,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-01-31T22:05:53Z",
      "side": 1,
      "message": "\u003e OPENSSL_EXPORT\n\nThanks. Done.\n\n\u003e It is a little odd that these are C++ but with C naming.\n\nYea. I\u0027m not sure. If this was C++, these should be members of the SSL class, but I don\u0027t think we\u0027re quite there yet and, plus, SSL* is hidden from callers.\n\nSo what would these be? SerializeHandoff at the top-level of bssl?\n\nProbably going to do the roll with these since it\u0027s not hard to change later.",
      "parentUuid": "1b56b356_9617b32a",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d56a3c09_4750711c",
        "filename": "ssl/handoff.cc",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-01-31T00:27:08Z",
      "side": 1,
      "message": "I was anticipating configuration bits hanging off of ssl (ssl-\u003eversion should get moved to s3, but everything else...), wouldn\u0027t need to get serialized. It\u0027s a little less stuff we need to keep stable, and if record layer and handshaker, say, disagree on max_send_fragment, then they\u0027ll just send different maximum records. Meh. My hope is that the intersection is relatively small and most configuration can just get deployed to one side or the other using the usual mechanisms. Those, one hopes, already have a version skew story.\n\nmode in particular includes bits like SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER and SSL_MODE_ENABLE_PARTIAL_WRITE which are more implementation details of how either side calls various APIs, so that\u0027s kind of weird to send back and forth.",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "260f5421_fee90d7b",
        "filename": "ssl/handoff.cc",
        "patchSetId": 3
      },
      "lineNbr": 160,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-01-31T22:05:53Z",
      "side": 1,
      "message": "I started off with sending these config things, but just asserting at the other side that values that it cared about matched the local config. That was a pain in bssl_shim (because both SSL\u0027s and SSL_CTX\u0027s needed to be configured the same) and I switched over to this.\n\nI agree that |mode| is a weird one and needs to be cleaned up but, otherwise, I think most configuration reasonably does apply at the handshaker and should be mirrored over. (The maximum record size, for example, is something that can be configured in a handshake if we ever support that.)",
      "parentUuid": "d56a3c09_4750711c",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4d23a49_8bd1cec7",
        "filename": "ssl/handoff.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-01-31T00:31:19Z",
      "side": 1,
      "message": "(There\u0027s a whole lot of error-handling missing here around getting back TLS versions we don\u0027t understand and whatnot, but I guess that falls under all the version skew bits to be resolved?)",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3efd232_25e8a469",
        "filename": "ssl/handoff.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-01-31T22:05:53Z",
      "side": 1,
      "message": "Yea, I think so.",
      "parentUuid": "d4d23a49_8bd1cec7",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22f4bcc9_bd318d0f",
        "filename": "ssl/handoff.cc",
        "patchSetId": 3
      },
      "lineNbr": 194,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-01-31T00:27:08Z",
      "side": 1,
      "message": "There\u0027s CBS_copy_bytes which might be easier to use for these fixed-width array things. You\u0027ll still need a CBS_len(\u0026read_seq) !\u003d 0 check though. (It was meant for fixed-width TLS fields.)",
      "range": {
        "startLine": 194,
        "startChar": 6,
        "endLine": 194,
        "endChar": 56
      },
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5612cdad_f8a54af4",
        "filename": "ssl/handoff.cc",
        "patchSetId": 3
      },
      "lineNbr": 194,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-01-31T22:05:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22f4bcc9_bd318d0f",
      "range": {
        "startLine": 194,
        "startChar": 6,
        "endLine": 194,
        "endChar": 56
      },
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03fbc771_a8bba5d7",
        "filename": "ssl/handoff.cc",
        "patchSetId": 3
      },
      "lineNbr": 194,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-01-31T22:17:08Z",
      "side": 1,
      "message": "(Actually, can\u0027t copy the sequence numbers inline here because they\u0027ll get overwritten when configuring the AEADs, so that has to be done last.)",
      "parentUuid": "5612cdad_f8a54af4",
      "range": {
        "startLine": 194,
        "startChar": 6,
        "endLine": 194,
        "endChar": 56
      },
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf7f4cdb_569fb0e7",
        "filename": "ssl/handoff.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-01-31T00:27:08Z",
      "side": 1,
      "message": "There\u0027s a CBS_strdup, or BUF_strndup. Probably also prudent to check CBS_contains_zero_byte on \u0026hostname. (Maybe CBS_strdup should do that check...)",
      "range": {
        "startLine": 255,
        "startChar": 8,
        "endLine": 257,
        "endChar": 41
      },
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef31e690_d367629a",
        "filename": "ssl/handoff.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-01-31T22:05:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf7f4cdb_569fb0e7",
      "range": {
        "startLine": 255,
        "startChar": 8,
        "endLine": 257,
        "endChar": 41
      },
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40ed6609_14c4abb1",
        "filename": "ssl/internal.h",
        "patchSetId": 3
      },
      "lineNbr": 2727,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-01-31T00:27:08Z",
      "side": 1,
      "message": "Mismerge?",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "442c48af_940cec6a",
        "filename": "ssl/internal.h",
        "patchSetId": 3
      },
      "lineNbr": 2727,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-01-31T22:05:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40ed6609_14c4abb1",
      "revId": "54f9846cfa36dc966f17948ce70c790ebd02d6be",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}