{
  "comments": [
    {
      "key": {
        "uuid": "37a21512_09b91a40",
        "filename": "ssl/d1_pkt.c",
        "patchSetId": 2
      },
      "lineNbr": 291,
      "author": {
        "id": 6630
      },
      "writtenOn": "2016-03-15T05:35:16Z",
      "side": 0,
      "message": "So just for the sake of my understanding... before this change, after receiving a shutdown, we\u0027d go ahead and try to read another packet, and *then* process the shutdown?",
      "range": {
        "startLine": 291,
        "startChar": 18,
        "endLine": 291,
        "endChar": 20
      },
      "revId": "49bcb574378dd787f30a027b62950beb03daf8a9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c67120f_9ba82feb",
        "filename": "ssl/d1_pkt.c",
        "patchSetId": 2
      },
      "lineNbr": 291,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-03-16T18:48:00Z",
      "side": 0,
      "message": "Wow, you\u0027re right. I hadn\u0027t even noticed that behavior. That\u0027s definitely nonsense. Though it kinda didn\u0027t matter because SSL_read checked externally. Except it kinda did because this function could be called during the handshake.\n\nExcept close_notify during a handshake is kinda nonsense. I probably should arrange for us to only honor those in read_app_data and convert to a fatal error in others. Or at least the initial handshake. Renego is weird.",
      "parentUuid": "37a21512_09b91a40",
      "range": {
        "startLine": 291,
        "startChar": 18,
        "endLine": 291,
        "endChar": 20
      },
      "revId": "49bcb574378dd787f30a027b62950beb03daf8a9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c59d244_abfb75d3",
        "filename": "ssl/d1_pkt.c",
        "patchSetId": 2
      },
      "lineNbr": 291,
      "author": {
        "id": 6630
      },
      "writtenOn": "2016-03-17T05:56:07Z",
      "side": 0,
      "message": "Actually, wait, why is close_notify during a handshake nonsense? Are you not supposed to send close_notify if you want to close the connection during the handshake? It doesn\u0027t seem different from any other alert that you might send during the handshake.",
      "parentUuid": "7c67120f_9ba82feb",
      "range": {
        "startLine": 291,
        "startChar": 18,
        "endLine": 291,
        "endChar": 20
      },
      "revId": "49bcb574378dd787f30a027b62950beb03daf8a9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c67120f_a71ab44a",
        "filename": "ssl/d1_pkt.c",
        "patchSetId": 2
      },
      "lineNbr": 291,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-03-17T15:49:03Z",
      "side": 0,
      "message": "I\u0027m not really sure what you\u0027re supposed to do if you want to close the connection during the handshake. I think OpenSSL just closes the connection without an alert.\n\nclose_notify in the sense of clean shutdown is kind of weird.\n\nTLS tries to (and completely fails) look kinda like TCP. I think the idea was that close_notify corresponded to a secured clean EOF while anything else was an error. This is relevant if you care about truncation.\n\nIf you manage to get an EOF during the initial handshake (morally equivalent to setting up a TCP session), I don\u0027t think it makes sense to surface it as a clean EOF. Because that\u0027s different from successfully setting up a secure connection and learning that, yes, the peer actually securely responded with 0 data.\n\nDoing it mid-handshake (on perhaps a renego) is also kind of weird if you want bidirectional shutdown. The sent and received close_notifies may be differently encrypted. I think you actually can make it work, but OpenSSL recently decided to give up on it and we followed them.\n\n(This is all totally moot because no one enforces close_notify and bidirectional shutdown is silly. That\u0027s for if you want to reuse the underlying transport for something else---kinda like the inverse of STARTTLS---and no one does that. Actually, Chrome never sends close_notify at all. It\u0027d make disconnect async.)",
      "parentUuid": "7c59d244_abfb75d3",
      "range": {
        "startLine": 291,
        "startChar": 18,
        "endLine": 291,
        "endChar": 20
      },
      "revId": "49bcb574378dd787f30a027b62950beb03daf8a9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37a21512_4e768817",
        "filename": "ssl/ssl_lib.c",
        "patchSetId": 2
      },
      "lineNbr": 611,
      "author": {
        "id": 6630
      },
      "writtenOn": "2016-03-15T05:35:16Z",
      "side": 0,
      "message": "I don\u0027t understand why this was here before. Wouldn\u0027t it have been redundant with the check in read_bytes()?",
      "range": {
        "startLine": 611,
        "startChar": 22,
        "endLine": 611,
        "endChar": 43
      },
      "revId": "49bcb574378dd787f30a027b62950beb03daf8a9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c67120f_7b03dba8",
        "filename": "ssl/ssl_lib.c",
        "patchSetId": 2
      },
      "lineNbr": 611,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-03-16T18:48:00Z",
      "side": 0,
      "message": "\"I don\u0027t understand why this was here before\" is a pretty good summary of this whole part of the code. :-) I\u0027m not sure either. It\u0027s in there since the earliest recorded version of OpenSSL/SSLeay, so I can\u0027t divine it from git. Probably EAY wasn\u0027t thinking about it very hard or maybe it made sense to check here in SSL 2.0 but SSL 3.0 needed it internally too.",
      "parentUuid": "37a21512_4e768817",
      "range": {
        "startLine": 611,
        "startChar": 22,
        "endLine": 611,
        "endChar": 43
      },
      "revId": "49bcb574378dd787f30a027b62950beb03daf8a9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}