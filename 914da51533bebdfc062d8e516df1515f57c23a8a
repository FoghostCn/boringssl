{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "fb974fed_067e5bd2",
        "filename": "crypto/chacha/asm/chacha-armv4.pl",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5525
      },
      "writtenOn": "2023-12-19T20:12:52Z",
      "side": 1,
      "message": "Not sure if you intend to keep this or not. I prefer for things to be consistent one way or another.",
      "range": {
        "startLine": 212,
        "startChar": 1,
        "endLine": 212,
        "endChar": 14
      },
      "revId": "914da51533bebdfc062d8e516df1515f57c23a8a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c3cace7_e6bf92e9",
        "filename": "crypto/chacha/asm/chacha-armv4.pl",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-12-19T21:25:50Z",
      "side": 1,
      "message": "Fair enough. I probably would have just kept it in all the files to avoid thinking about it. Also normally I think it rude for a function to not accept the empty input. Memory safety and all that.\n\nBut I suppose assembly already has to have different expectations, and removing it + moving it to C allows the compiler to realize the check is unreachable and delete it. Very important optimization. ðŸ˜Š\n\nRemoved. Interesting this check wasn\u0027t done a few instructions earlier, where it wouldn\u0027t need to undo the STMDB.",
      "parentUuid": "fb974fed_067e5bd2",
      "range": {
        "startLine": 212,
        "startChar": 1,
        "endLine": 212,
        "endChar": 14
      },
      "revId": "914da51533bebdfc062d8e516df1515f57c23a8a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a0c6450_6dbebf11",
        "filename": "crypto/chacha/asm/chacha-armv4.pl",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5525
      },
      "writtenOn": "2023-12-19T22:04:30Z",
      "side": 1,
      "message": "Note that we\u0027re not testing *ANY* of the other assembly implementations with the empty input because they are all guarded on a minimum length check. So it would be weird to feel good about this one implementation having the check when it would be missing from all the others.\n\nRE: Optimization of course it probably won\u0027t matter. But I guess 32-bit ARM without NEON is where it has the potential to matter the most. ðŸ˜Š",
      "parentUuid": "0c3cace7_e6bf92e9",
      "range": {
        "startLine": 212,
        "startChar": 1,
        "endLine": 212,
        "endChar": 14
      },
      "revId": "914da51533bebdfc062d8e516df1515f57c23a8a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ad18682_61052e25",
        "filename": "crypto/chacha/asm/chacha-armv4.pl",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-12-19T22:10:08Z",
      "side": 1,
      "message": "I mean, we previously were testing it, via ABI tests, before you removed it. :-P\n\nIn fact, I think the assembly functions handle it *because* we tested it and reported the issue to Andy. That\u0027s because prior to https://boringssl-review.googlesource.com/c/boringssl/+/60387, we actually did call the assembly with a zero length.\n\nAnyway, I\u0027m fine with removing it.",
      "parentUuid": "3a0c6450_6dbebf11",
      "range": {
        "startLine": 212,
        "startChar": 1,
        "endLine": 212,
        "endChar": 14
      },
      "revId": "914da51533bebdfc062d8e516df1515f57c23a8a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5524aaa_1b9927a2",
        "filename": "crypto/chacha/asm/chacha-armv4.pl",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5525
      },
      "writtenOn": "2023-12-19T22:47:59Z",
      "side": 1,
      "message": "First, to clarify what I meant: We were never testing that ChaCha20_ctr32_neon, ChaCha20_ctr32_ssse3, etc. can handle the empty input or inputs shorter than what their paired `_capable()` function allows. There\u0027s nothing special about the _nohw variant in this regard. All of ChaCha20_ctr32* are very much \"Don\u0027t touch this\" by anything outside of chacha.c/chacha_test.cc. If we want to test ChaCha20_ctr32_nohw with a zero-length input then why not also test ChaCha20_ctr32_ssse3 with a zero-length input?\n\n\u003e I mean, we previously were testing it, via ABI tests, before you removed it. :-P\n\nThis is a good point. Let\u0027s make it precise, though: We were never testing ChaCha20_ctr32_nohw. We were testing ChaCha20_ctr32. We rewrote ChaCha20_ctr32 in C (win!) and we promoted ChaCha20_ctr32_nohw to a \"real\" function.\n\nNow we are not testing ChaCha20_ctr32 directly now (for the architectures for which we\u0027ve done this conversion), and we can\u0027t because it\u0027s now static. If you\u0027d like, I am happy to submit a change that makes ChaCha20_ctr32 non-static and then we can test it like we were before--actually even better, because we can test it more thoroughly for correctness. (Making it non-static might hurt the compiler\u0027s decision to inline ChaCha20_ctr32 and pull the capability checks out of the loop, but that probably doesn\u0027t matter now. Maybe it would matter if/when we replace ChaCha20_ctr32_nohw (and others, I hope) with a call to the C implementation, once the C compiler can auto-vectorize and optimize a little better than it could several years ago (which may be now).",
      "parentUuid": "6ad18682_61052e25",
      "range": {
        "startLine": 212,
        "startChar": 1,
        "endLine": 212,
        "endChar": 14
      },
      "revId": "914da51533bebdfc062d8e516df1515f57c23a8a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}