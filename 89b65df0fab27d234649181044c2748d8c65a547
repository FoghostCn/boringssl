{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2d7d553a_221e7137",
        "filename": "include/openssl/cipher.h",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-26T21:15:17Z",
      "side": 1,
      "message": "That it does this is totally absurd (looks like you can\u0027t even set it to NULL), but I guess that\u0027s the behavior. :-/\n\nI\u0027m thinking EVP_EncryptUpdate_ex should just not do this at all and we have a separate EVP_UpdateAAD for this case.",
      "range": {
        "startLine": 179,
        "startChar": 61,
        "endLine": 180,
        "endChar": 14
      },
      "revId": "89b65df0fab27d234649181044c2748d8c65a547",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d109ba48_e6ed8529",
        "filename": "include/openssl/cipher.h",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 14196
      },
      "writtenOn": "2022-05-26T22:05:52Z",
      "side": 1,
      "message": "Should this really say\n\ne.g. |EVP_aes_128_gcm|, to specify AAD, |out| should be set to NULL. The function will then add |in_len| bytes from |in| to the AAD, and will set |*out_len| to |in_len| ...\n\n(and similarly below)",
      "parentUuid": "2d7d553a_221e7137",
      "range": {
        "startLine": 179,
        "startChar": 61,
        "endLine": 180,
        "endChar": 14
      },
      "revId": "89b65df0fab27d234649181044c2748d8c65a547",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "43461002_22162348",
        "filename": "include/openssl/cipher.h",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-06-02T20:55:19Z",
      "side": 1,
      "message": "I guess that\u0027s whether this is written as \"this function does A, unless B then it does C\" or \"to do C, call this function with B\". I figured the former fit slightly better just to resolve the contradiction with the first paragraph, which doesn\u0027t allow for a NULL `out`. Though it is true that the former style leaves the \"how do I achieve C\" question answered more indirectly.",
      "parentUuid": "d109ba48_e6ed8529",
      "range": {
        "startLine": 179,
        "startChar": 61,
        "endLine": 180,
        "endChar": 14
      },
      "revId": "89b65df0fab27d234649181044c2748d8c65a547",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "89b65df0fab27d234649181044c2748d8c65a547",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "89b65df0fab27d234649181044c2748d8c65a547",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}