{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "16551428_5d39131b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-07-25T15:44:45Z",
      "side": 1,
      "message": "Circling back to this one...",
      "revId": "f6a499987ff613799adf6b42c20bc41ec7c5120a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0af12510_7f1bfd42",
        "filename": "crypto/cpu_aarch64.c",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-07-25T15:44:45Z",
      "side": 1,
      "message": "Nit: Perhaps `cpu_aarch64_sysreg.c` or something like that? Plain `cpu_aarch64.c` reads like it\u0027s common to all the files.",
      "revId": "f6a499987ff613799adf6b42c20bc41ec7c5120a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4955c10c_55a1fb29",
        "filename": "crypto/cpu_aarch64.c",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-07-25T15:44:45Z",
      "side": 1,
      "message": "Let\u0027s gate this on `ANDROID_BAREMETAL`.\n\nFor bonus points, we can also fold `cpu_aarch64_freebsd.c` into this one. We\u0027re using FreeBSD\u0027s headers for it, but it\u0027s ultimately just reading the registers. (They trap the instruction in userspace and then emulate it. Remarkably sensible of them! :-) )",
      "range": {
        "startLine": 17,
        "startChar": 40,
        "endLine": 17,
        "endChar": 53
      },
      "revId": "f6a499987ff613799adf6b42c20bc41ec7c5120a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c29a0f6_cf947d47",
        "filename": "crypto/cpu_aarch64.c",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-07-25T15:44:45Z",
      "side": 1,
      "message": "Nit: Mind running clang-format over this file? I think clang-format will try to align all the backslashes.",
      "revId": "f6a499987ff613799adf6b42c20bc41ec7c5120a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cb84039_0b99e220",
        "filename": "crypto/cpu_aarch64.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-07-25T15:44:45Z",
      "side": 1,
      "message": "BoringSSL prefers to include curly braces. (See `STYLE.md`.) Ditto throughout.",
      "revId": "f6a499987ff613799adf6b42c20bc41ec7c5120a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5762302_713b26a0",
        "filename": "crypto/cpu_aarch64.c",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-07-25T15:44:45Z",
      "side": 1,
      "message": "Nit: The only other files which try to detect NEON (Linux and Fuchsia) will skip the rest of the logic if NEON is missing, since they depend on the NEON registers anyway. Probably should match to be consistent.\n\n(TBH, I suspect we won\u0027t build anyway for Armv8-R or Armv8-M, so we can probably just assume NEON support. I suspect the Linux and Fuchsia bits are vestigial. But I suppose this file, if any, is the most likely to eventually see -R or -M, so no harm in trying to detect it if the prefer. *shrug*)",
      "revId": "f6a499987ff613799adf6b42c20bc41ec7c5120a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}