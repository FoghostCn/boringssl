{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ba479564_354eebbb",
        "filename": "rust/bssl-crypto/src/aead.rs",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-18T16:48:43Z",
      "side": 1,
      "message": "Hmm, actually, where is the call to `EVP_AEAD_CTX_free`?\n\nDoes LSan work with Rust? For our C code, we have a testing strategy to catch memory leaks. We should have something similar for parity.",
      "revId": "89ab6ca86e02f5b63c35d1b957e0e354d26b0dd5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99444280_f50d630d",
        "filename": "rust/bssl-crypto/src/aead.rs",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-08-18T16:58:29Z",
      "side": 1,
      "message": "hmmm good catch. I know the google3 rust toolchain team is working on support for LSan, Asan, etc, not sure if there are any external tools we can use in the meantime, will look into it",
      "parentUuid": "ba479564_354eebbb",
      "revId": "89ab6ca86e02f5b63c35d1b957e0e354d26b0dd5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3da4c25_1bc6af92",
        "filename": "rust/bssl-crypto/src/aead.rs",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-18T19:38:36Z",
      "side": 1,
      "message": "I tried the obvious option of just building against an ASan-build BoringSSL, but that breaks because most of the ASan runtime is missing. I tried using nightly with `RUSTFLAGS\u003d-Zsanitizer\u003dleak` but that fails even earlier because\n\n```\n  LeakSanitizer: CHECK failed: lsan_interceptors.cpp:82 \"((!lsan_init_is_running)) !\u003d (0)\" (0x0, 0x0) (tid\u003d33218)\n```",
      "parentUuid": "99444280_f50d630d",
      "revId": "89ab6ca86e02f5b63c35d1b957e0e354d26b0dd5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b2acef8_c2782e97",
        "filename": "rust/bssl-crypto/src/aead.rs",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-08-18T20:19:00Z",
      "side": 1,
      "message": "I was able to get it working by running `RUSTFLAGS\u003d\"-Z sanitizer\u003daddress\" cargo test -Zbuild-std  --target\u003dx86_64-unknown-linux-gnu` on linux, and it detected the leaks:\n\n```\nDirect leak of 592 byte(s) in 1 object(s) allocated from:\n    #0 0x560082147dbe in malloc /rustc/llvm/src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:69:3\n    #1 0x5600825106c3 in OPENSSL_malloc /usr/local/google/home/nwadih/git/boringssl/crypto/mem.c:254:15\n    #2 0x56008252f94c in EVP_AEAD_CTX_new /usr/local/google/home/nwadih/git/boringssl/crypto/fipsmodule/cipher/aead.c:42:23\n    #3 0x56008218dcc7 in bssl_crypto::aead::AeadImpl$LT$_$C$_$GT$::new::h69d30a4e6aeaa22e /usr/local/google/home/nwadih/git/boringssl/rust/bssl-crypto/src/aead.rs:109:13\n    #4 0x56008219553d in bssl_crypto::aead::new_aes_256_gcm_siv::h351dcce09068adb0 /usr/local/google/home/nwadih/git/boringssl/rust/bssl-crypto/src/aead.rs:53:15\n    #5 0x5600821b9806 in bssl_crypto::aead::test::aes_256_gcm_siv_tests::_$u7b$$u7b$closure$u7d$$u7d$::hd568eeeb49b073f4 /usr/local/google/home/nwadih/git/boringssl/rust/bssl-crypto/src/aead.rs:242:32\n```",
      "parentUuid": "d3da4c25_1bc6af92",
      "revId": "89ab6ca86e02f5b63c35d1b957e0e354d26b0dd5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3736a18e_ef259bcd",
        "filename": "rust/bssl-crypto/src/aead.rs",
        "patchSetId": 9
      },
      "lineNbr": 157,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-08-18T20:28:58Z",
      "side": 1,
      "message": "okay added a `Drop` impl which will make sure the resouces are freed once the struct goes out of scope, and verified no leaks are detected now. We\u0027ll have to look into adding leak detection into CI once its set up",
      "parentUuid": "2b2acef8_c2782e97",
      "revId": "89ab6ca86e02f5b63c35d1b957e0e354d26b0dd5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}