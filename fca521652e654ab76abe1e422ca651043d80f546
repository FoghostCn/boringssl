{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6ffa1255_2e5fcc0f",
        "filename": "include/openssl/mem.h",
        "patchSetId": 6
      },
      "lineNbr": 253,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-05-19T16:20:18Z",
      "side": 1,
      "message": "BoringSSL already automatically cleanses anything allocated by `OPENSSL_malloc`. Is that sufficient for you?\n\nIf not, is there any reason this can\u0027t be in your library code?",
      "revId": "fca521652e654ab76abe1e422ca651043d80f546",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44c6b06a_a8a6bfca",
        "filename": "include/openssl/mem.h",
        "patchSetId": 6
      },
      "lineNbr": 253,
      "author": {
        "id": 16241
      },
      "writtenOn": "2023-05-20T03:44:00Z",
      "side": 1,
      "message": "This is used for the objects that are allocated on the stack, so the use case is a little different between to OPENSSL_malloc.",
      "parentUuid": "6ffa1255_2e5fcc0f",
      "revId": "fca521652e654ab76abe1e422ca651043d80f546",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e5b97e9_5036b97f",
        "filename": "include/openssl/mem.h",
        "patchSetId": 6
      },
      "lineNbr": 253,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-05-22T17:07:54Z",
      "side": 1,
      "message": "Ah. We generally do not cleanse things on the stack. That really cannot be done without compiler support. Registers (which may contain secrets) get spilled to the stack constantly.\n\nIf you all still want to cleanse things on the stack despite this, it sounds like this should be in your project, and not BoringSSL.",
      "parentUuid": "44c6b06a_a8a6bfca",
      "revId": "fca521652e654ab76abe1e422ca651043d80f546",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b1fbce2_b9d25880",
        "filename": "include/openssl/mem.h",
        "patchSetId": 6
      },
      "lineNbr": 253,
      "author": {
        "id": 16246
      },
      "writtenOn": "2023-05-22T22:30:34Z",
      "side": 1,
      "message": "The case we\u0027re trying to handle is something like the following:\n\n```\nstd::array\u003cuint8_t, KEY_LEN\u003e \u003e enc_key;\n// AES operation\n```\n\nIs the canonical way to do this in BoringSSL to use `OPENSSL_malloc`?\n\n```\nuint8_t* enc_key \u003d OPENSSL_malloc(KEY_LEN);\n```\n\nOr a `std::allocator` implementation that could be used with `std::vector`, etc? We have [something like this in ChromeOS](https://source.chromium.org/chromiumos/chromiumos/codesearch/+/main:src/platform2/libbrillo/brillo/secure_blob.h;l\u003d22-26;drc\u003d3a446f27a00fba076a5a42d383ae6134c333ee57).",
      "parentUuid": "2e5b97e9_5036b97f",
      "revId": "fca521652e654ab76abe1e422ca651043d80f546",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4df95c9b_86c3c813",
        "filename": "include/openssl/mem.h",
        "patchSetId": 6
      },
      "lineNbr": 253,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-05-23T15:36:35Z",
      "side": 1,
      "message": "In BoringSSL, we just write `uint8_t enc_key[KEY_LEN]` and don\u0027t think about it too hard. :-) (We\u0027re C, so `std::array\u003cuint8_t, KEY_LEN\u003e` in C++ if you prefer.)\n\nThe problem is cleansing things on the stack in C/C++ is hopeless without compiler support. Secrets end up in registers, and those registers are going to get spilled on the stack. And then putting `OPENSSL_cleanse` in places is both more things to keep track of and also inhibits compiler optimizations to keep things out of memory in the first place, or reduce stack space. So our position is not to bother.\n\nIf your project has a different position, that\u0027s fine (though I would caution it is as pointless for you all as it is for us), but then that should go in your project.",
      "parentUuid": "8b1fbce2_b9d25880",
      "revId": "fca521652e654ab76abe1e422ca651043d80f546",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7189820c_cc7265aa",
        "filename": "include/openssl/mem.h",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-05-19T16:20:18Z",
      "side": 1,
      "message": "Why isn\u0027t this just a `static_assert`. That seems less complicated than messing around with SFINAE.",
      "revId": "fca521652e654ab76abe1e422ca651043d80f546",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "970a7e98_f9a037b2",
        "filename": "include/openssl/mem.h",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 16241
      },
      "writtenOn": "2023-05-20T03:44:00Z",
      "side": 1,
      "message": "hmm, I was thinking that we might want to add specifications for the other types, e.g. std::vector.",
      "parentUuid": "7189820c_cc7265aa",
      "revId": "fca521652e654ab76abe1e422ca651043d80f546",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a803aea_21d6db20",
        "filename": "include/openssl/mem.h",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-05-22T17:07:54Z",
      "side": 1,
      "message": "Let\u0027s move this to your library then. If this is something that supports specializations, then we\u0027d be saying that specializing this is part of our public API, and that\u0027s going even further than this CL.",
      "parentUuid": "970a7e98_f9a037b2",
      "revId": "fca521652e654ab76abe1e422ca651043d80f546",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}