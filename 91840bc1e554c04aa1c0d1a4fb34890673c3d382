{
  "comments": [
    {
      "key": {
        "uuid": "e569250a_c5da0ec5",
        "filename": "ssl/test/mock_quic_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-03-23T18:37:33Z",
      "side": 1,
      "message": "Probably better to return -1. I don\u0027t think SSL_do_handshake can return 0 here, but if it does, that way we don\u0027t look like we\u0027re returning EOF.",
      "range": {
        "startLine": 186,
        "startChar": 15,
        "endLine": 186,
        "endChar": 18
      },
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5236f1ac_1154115e",
        "filename": "ssl/test/mock_quic_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T02:32:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e569250a_c5da0ec5",
      "range": {
        "startLine": 186,
        "startChar": 15,
        "endLine": 186,
        "endChar": 18
      },
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da9effe7_200774d3",
        "filename": "ssl/test/mock_quic_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-03-23T18:37:33Z",
      "side": 1,
      "message": "const",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cde5fc7e_04673935",
        "filename": "ssl/test/mock_quic_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T02:32:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da9effe7_200774d3",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8299387_eb8a0a9c",
        "filename": "ssl/test/mock_quic_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 237,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-03-23T18:37:33Z",
      "side": 1,
      "message": "Nit: 80 chars",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2424aa83_dcb771d2",
        "filename": "ssl/test/mock_quic_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 237,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T02:32:14Z",
      "side": 1,
      "message": "Done. (Forgot to run git clang-format.)",
      "parentUuid": "d8299387_eb8a0a9c",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c872fd67_3da62fb2",
        "filename": "ssl/test/runner/handshake_server.go",
        "patchSetId": 3
      },
      "lineNbr": 1024,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-03-23T18:37:33Z",
      "side": 1,
      "message": "Hrm. How come we don\u0027t need something similar on the client?",
      "range": {
        "startLine": 1024,
        "startChar": 9,
        "endLine": 1024,
        "endChar": 26
      },
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54e554fa_0764c133",
        "filename": "ssl/test/runner/handshake_server.go",
        "patchSetId": 3
      },
      "lineNbr": 1024,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T02:32:14Z",
      "side": 1,
      "message": "It appears we don\u0027t have any tests yet that have bogo sending EOED in QUIC. (I.e. the only coverage of early data in QUIC in runner so far is when the client is under test.)",
      "parentUuid": "c872fd67_3da62fb2",
      "range": {
        "startLine": 1024,
        "startChar": 9,
        "endLine": 1024,
        "endChar": 26
      },
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60a40c9b_0591aaf3",
        "filename": "ssl/test/runner/mock_quic_transport.go",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-03-23T18:37:33Z",
      "side": 1,
      "message": "(Comment as to what\u0027s going on?)\n\nI\u0027m guessing this is about skipping early data. Would it work to only do it when configured? We could replace the c.skipEarlyData \u003d {true,false} lines with some method call which could mirror the setting on the MockQUICTransport.",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac949dc9_fe51f028",
        "filename": "ssl/test/runner/mock_quic_transport.go",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T02:32:14Z",
      "side": 1,
      "message": "Your guess is correct - it\u0027s to skip early data. This is so EarlyData-Reject0RTT-Client-Reverify, EarlyData-RejectTicket-Client-Reverify, and EarlyData-Reject0RTT-Client-ReverifyFails pass.",
      "parentUuid": "60a40c9b_0591aaf3",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5280499d_14cd4050",
        "filename": "ssl/test/runner/mock_quic_transport.go",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T22:47:05Z",
      "side": 1,
      "message": "I\u0027ve changed how skipping early data is signaled to the tls Conn object (which allows it to signal to the MockQUICTransport).",
      "parentUuid": "ac949dc9_fe51f028",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "998a07db_21476268",
        "filename": "ssl/test/runner/mock_quic_transport.go",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-03-23T18:37:33Z",
      "side": 1,
      "message": "Not sure if Go does tail call optimization. Wrap it in a loop?",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "212576ed_4bd8bcf7",
        "filename": "ssl/test/runner/mock_quic_transport.go",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T22:47:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "998a07db_21476268",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b5031c3_64e8aaf9",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 3
      },
      "lineNbr": 5390,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-03-23T18:37:33Z",
      "side": 1,
      "message": "Hrm, this is a bit of a mess of QUIC exceptions. :-(\n\nSo, this originally came about because:\n\n- Renego is TLS-only (We don\u0027t implement it in DTLS)\n- False Start is TLS-only (We don\u0027t implement it in DTLS)\n- V2ClientHello is TLS-only (Doesn\u0027t exist in DTLS)\n- NPN and Channel ID are TLS-only (We don\u0027t implement them in DTLS. We could, but the DTLS final flight retransmission logic assumes the only post-CCS handshake message is Finished.)\n- Shutdown isn\u0027t meaningful in QUIC\n\nOf these, the only thing that applies to QUIC is Channel ID. Maybe it would make more sense to extract the Channel ID tests into their own block, so we don\u0027t need to pepper QUIC exceptions everywhere.",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db51b509_c625af01",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 3
      },
      "lineNbr": 5390,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T02:32:14Z",
      "side": 1,
      "message": "Apologies for the mess that this diff appears to be. Unfortunately git/gerrit didn\u0027t detect that most of the changes are just adding a level of indentation instead of moving large blocks of code around.\n\nIs the mess you\u0027re referring to just the checks in the block starting on line 5389, or something larger?",
      "parentUuid": "7b5031c3_64e8aaf9",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c96414e_33621141",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 3
      },
      "lineNbr": 5390,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T22:47:05Z",
      "side": 1,
      "message": "I moved the block of Channel ID tests below here to allow combining two \"if config.protocol !\u003d quic\" blocks together.\n\nFrom looking at the start of addStateMachineCoverageTests, it looks like a lot of this function is set up organizing the tests by features and then by versions (e.g. check basic TLS features, then check client auth, etc.), so each \"by version\" section has its own \"if config.protocol !\u003d quic\" check for the tests that are TLS 1.2 only. If you\u0027d like, I could refactor this so there\u0027s only one \"if config.protocol !\u003d quic\" check, but I don\u0027t know what that would do to the organization of the file.",
      "parentUuid": "db51b509_c625af01",
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec5f59c4_50494333",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 3
      },
      "lineNbr": 5557,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-03-23T18:37:33Z",
      "side": 1,
      "message": "I think this can, instead, iterate over allVersions(config.protocol)",
      "range": {
        "startLine": 5557,
        "startChar": 11,
        "endLine": 5557,
        "endChar": 27
      },
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2a42aa5_9ae79b95",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 3
      },
      "lineNbr": 5557,
      "author": {
        "id": 5440
      },
      "writtenOn": "2020-03-25T02:32:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec5f59c4_50494333",
      "range": {
        "startLine": 5557,
        "startChar": 11,
        "endLine": 5557,
        "endChar": 27
      },
      "revId": "91840bc1e554c04aa1c0d1a4fb34890673c3d382",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}