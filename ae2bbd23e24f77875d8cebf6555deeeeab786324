{
  "comments": [
    {
      "key": {
        "uuid": "8c95e8f4_a5e73818",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-07-15T14:42:34Z",
      "side": 1,
      "message": "I\u0027m not quite following what the issue is. What\u0027s the relationship between submodules, gRPC, and symlinks? I don\u0027t think git submodules use symlinks, and I thought gRPC was using the master-with-bazel branch these days, which pregenerates everything for you so you don\u0027t need to use this script. If you need the file lists in a different format, we can add it to the script and branch.",
      "revId": "ae2bbd23e24f77875d8cebf6555deeeeab786324",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f5419db_e51f1d1a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 10441
      },
      "writtenOn": "2020-07-16T17:27:54Z",
      "side": 1,
      "message": "I\u0027m not sure either ðŸ˜Š For additional context here is my PR to gRPC: https://github.com/grpc/grpc/pull/23483\n\nFor the python build of GRPC.  The GRPC setup.py relies on files listed on \"src/python/grpcio/grpc_core_dependencies.py\" which is generated from a template on \"templates/src/python/grpcio/grpc_core_dependencies.py.template\" which in turn is updated when running \"tools/buildgen/generate_projects.sh\".  Without this change the only files that get found those contained in \"NON_PERL_FILES\" [1].\n\nI was developing on a GCE instance for this, I don\u0027t know if that has something to do with this, but you can compare the results with and without this change relative the PR I posted above with the following steps to see if you have a different outcome:\n```\ngit clone https://github.com/emkornfield/grpc.git\ncd grpc\ngit checkout fg\ngit submodule init\ngit submodule update\nvirtualenv ~/p22\nsource ~/p22/bin/activate\npip install mako\npip install pyyaml\n./tools/buildgen/generate_projects.sh\n```\n\n[1] https://boringssl.googlesource.com/boringssl/+/83b74c6a7a1ad33792be3adf10820ae287de8c40/util/generate_build_files.py#809",
      "parentUuid": "8c95e8f4_a5e73818",
      "revId": "ae2bbd23e24f77875d8cebf6555deeeeab786324",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5d2ebf0_214c5d1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-07-16T18:29:26Z",
      "side": 1,
      "message": "I see. Looks like gRPC is importing our generate_build_files.py script and doing something weird with it, including injecting some custom printer?\nhttps://github.com/grpc/grpc/blob/master/src/boringssl/gen_build_yaml.py#L130\n\nAnd the symlink itself doesn\u0027t come from us but also from gRPC\u0027s hack.\nhttps://github.com/grpc/grpc/blob/master/src/boringssl/gen_build_yaml.py#L126\n\nSo this CL is a hack to workaround a gRPC hack needed to get another gRPC hack to work. At three levels deep, I think we should reconsider this design. :-) How about, instead, we just dump the file lists to JSON or some other convenient format, have master-with-bazel generate it, and then gRPC can do whatever it likes with that?",
      "parentUuid": "0f5419db_e51f1d1a",
      "revId": "ae2bbd23e24f77875d8cebf6555deeeeab786324",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b0c7f70_ff4c5675",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-07-16T18:54:39Z",
      "side": 1,
      "message": "Would this work?\nhttps://boringssl-review.googlesource.com/c/boringssl/+/42204\n\nThis would drop a sources.json into BoringSSL\u0027s master-with-bazel branch. You can then change gen_build_yaml.py to read that rather than import our generate_build_files.py. It\u0027ll probably be faster too, since you will no longer be regenerating all the asm and then deleting it.\n\nHere\u0027s a sample output you can drop in and test with.\nhttps://paste.googleplex.com/5470649696911360",
      "parentUuid": "b5d2ebf0_214c5d1e",
      "revId": "ae2bbd23e24f77875d8cebf6555deeeeab786324",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f89bb73_e9e9bbfe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 10441
      },
      "writtenOn": "2020-07-16T19:11:51Z",
      "side": 1,
      "message": "This seems likely to help. But would take some more work to integrate/cleanup. \n\nMaybe we can decouple the build system hack, and generating the necessary ASM files for the linked PR?  \n\nI can follow-up with a PR to remove this hack once I had time to cleanup the gRPC part?",
      "parentUuid": "5b0c7f70_ff4c5675",
      "revId": "ae2bbd23e24f77875d8cebf6555deeeeab786324",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "482add56_77dfe779",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-07-16T19:13:45Z",
      "side": 1,
      "message": "We\u0027ve reached the hack-depth limit here, I\u0027m afraid.",
      "parentUuid": "2f89bb73_e9e9bbfe",
      "revId": "ae2bbd23e24f77875d8cebf6555deeeeab786324",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    }
  ]
}