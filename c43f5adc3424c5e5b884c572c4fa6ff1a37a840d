{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "777061dd_34414d35",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9581
      },
      "writtenOn": "2021-03-15T21:01:32Z",
      "side": 1,
      "message": "Just whipped this up. Not sure what you\u0027ll think about the comment style :) ",
      "revId": "c43f5adc3424c5e5b884c572c4fa6ff1a37a840d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e33fe99_7b902cfb",
        "filename": "crypto/hpke/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 9581
      },
      "writtenOn": "2021-03-16T14:33:00Z",
      "side": 1,
      "message": "I guess this doesn\u0027t really capture the requirement.\n\nThe length should be \u003e\u003d X25519_PUBLIC_VALUE_LEN or else the function will fail. Is there a concise way to express that for each of the new length parameters?",
      "range": {
        "startLine": 102,
        "startChar": 27,
        "endLine": 102,
        "endChar": 34
      },
      "revId": "c43f5adc3424c5e5b884c572c4fa6ff1a37a840d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89df4394_c73e000e",
        "filename": "crypto/hpke/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-16T15:37:31Z",
      "side": 1,
      "message": "The requirement isn\u0027t right anyway. :-P All of these should be exact equalities. X25519 public values are 32 bytes long. A 33-byte input is just as incorrect as a 31-byte input.",
      "parentUuid": "9e33fe99_7b902cfb",
      "range": {
        "startLine": 102,
        "startChar": 27,
        "endLine": 102,
        "endChar": 34
      },
      "revId": "c43f5adc3424c5e5b884c572c4fa6ff1a37a840d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28e4cb98_02703e91",
        "filename": "crypto/hpke/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 9581
      },
      "writtenOn": "2021-03-17T16:32:59Z",
      "side": 1,
      "message": "Alright, I\u0027ve switched to strict equality.\n\nThe documentation still doesn\u0027t say quite what I want. The functions actually check the lengths for you. It\u0027s not that the length must equal X, it\u0027s that the length should be X or else the function will fail. Do function comments ever express this nuance?",
      "parentUuid": "89df4394_c73e000e",
      "range": {
        "startLine": 102,
        "startChar": 27,
        "endLine": 102,
        "endChar": 34
      },
      "revId": "c43f5adc3424c5e5b884c572c4fa6ff1a37a840d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95cb150c_ff58af82",
        "filename": "crypto/hpke/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-17T19:50:48Z",
      "side": 1,
      "message": "Ah I see. I think, for all but out_enc_len, it\u0027s fine to just omit it:\n\nFor peer_public_value_len and enc_len, this API is saying it\u0027s not the caller\u0027s responsibility to ensure it\u0027s the right size. You may well get one of the wrong size over the wire. Rather, we\u0027re saying this function is responsible for dealing with it, so it\u0027s not your problem. I.e. no need to say anything.\n\nFor private_key_len, the caller is already supposed to pick the X25519 key they want, which is a stronger requirement than the length anyway. (Though it happens the only deserialization error in X25519 is the length.)\n\nSome for ephemeral_private_len and ephemeral_public_len, where the caller is already supposed to make them a corresponding keypair. (We should probably say that.)\n\nThat leaves out_enc / out_enc_len, which is a buffer the caller allocates. The caller needs to know the size so they know how much space to provide, so we should talk about it. We can say this function will fail if out_enc_len is not blah blah bytes.\n\nIn other APIs, we actually pass in three parameters:\n\n  uint8_t *out_enc,\n  size_t *out_enc_len,\n  size_t max_enc_len,\n\nCombined with EVP_BLAH_MAX_BLAH constants.\n\nThis is particularly useful for variable-length outputs (doesn\u0027t apply here) or when the same API captures multiple algorithms. The latter doesn\u0027t apply here, but I\u0027m thinking I might introduce an EVP_HPKE_KEM_KEY abstraction as part of exporting the API, so we can bundle the public and private bits.",
      "parentUuid": "28e4cb98_02703e91",
      "range": {
        "startLine": 102,
        "startChar": 27,
        "endLine": 102,
        "endChar": 34
      },
      "revId": "c43f5adc3424c5e5b884c572c4fa6ff1a37a840d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}