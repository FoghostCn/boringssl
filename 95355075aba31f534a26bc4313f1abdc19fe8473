{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "107515c0_3a5d8f25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7200
      },
      "writtenOn": "2022-04-04T22:38:24Z",
      "side": 1,
      "message": "If we\u0027re adding install targets, could we also set up export and generating BoringSSLConfig.cmake (and BoringSSLTargets.cmake) file? This is standard practice for modern CMake projects.\n\nSee https://cliutils.gitlab.io/modern-cmake/chapters/install/installing.html and https://cliutils.gitlab.io/modern-cmake/chapters/install/exporting.html for examples.",
      "revId": "95355075aba31f534a26bc4313f1abdc19fe8473",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f92d7b8_d8a75450",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14301
      },
      "writtenOn": "2022-04-04T23:30:32Z",
      "side": 1,
      "message": "Ah, good point; this would provide the OpenSSL targets directly rather than relying on FindOpenSSL to autodetect them correctly.",
      "parentUuid": "107515c0_3a5d8f25",
      "revId": "95355075aba31f534a26bc4313f1abdc19fe8473",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c15744a_9f84cd76",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14301
      },
      "writtenOn": "2022-04-04T23:30:32Z",
      "side": 1,
      "message": "I\u0027ll also need to actually try compiling something against the installed directory; I realized later today that this doesn\u0027t include any of the headers.",
      "revId": "95355075aba31f534a26bc4313f1abdc19fe8473",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12210f33_1d9eb320",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7200
      },
      "writtenOn": "2022-04-04T23:45:09Z",
      "side": 1,
      "message": "I was going to ask about that.\n\nTypically, you\u0027d set those on the target with:\n```\nset_target_properties(${target} PROPERTIES PUBLIC_HEADER ${headers})\n```\n\nIn the `install` rule you would then set:\n```\ninstall(\n  ...\n  PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}\n)\n```",
      "parentUuid": "5c15744a_9f84cd76",
      "revId": "95355075aba31f534a26bc4313f1abdc19fe8473",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b55a767b_2307f6e8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-04-05T17:55:06Z",
      "side": 1,
      "message": "This seems like it\u0027s not quite ready for review based on the comments, so please set attention bits when you believe that it is.\n\nThe CMake build is primarily the development build. Consumers usually take the source lists generated by util/generate_build_files.py. However, we\u0027re here to be useful so it\u0027s certainly possible that we could take something like this. But consideration should be paid to making it difficult to mishandle: BoringSSL doesn\u0027t have a stable ABI (or API really) so installing shared libraries into /usr/lib etc doesn\u0027t make sense and that shouldn\u0027t be super easy to do.",
      "revId": "95355075aba31f534a26bc4313f1abdc19fe8473",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1962a35_6f9ea32a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14301
      },
      "writtenOn": "2022-04-07T23:05:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "12210f33_1d9eb320",
      "revId": "95355075aba31f534a26bc4313f1abdc19fe8473",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd905ab7_cb32bead",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14301
      },
      "writtenOn": "2022-04-07T23:05:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f92d7b8_d8a75450",
      "revId": "95355075aba31f534a26bc4313f1abdc19fe8473",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51bcb31e_ddc50d3f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14301
      },
      "writtenOn": "2022-04-07T23:05:53Z",
      "side": 1,
      "message": "I went ahead and made the default install directory under the source checkout; this should make it harder to accidentally install. If some script came along with a CMAKE_INSTALL_PREFIX setting, it would still install to that directory though.\n\nIf we want to be paranoid, we could explicitly reject install prefixes beginning with C:\\Program Files or various UNIX paths, but it would be a bit brittle.",
      "parentUuid": "b55a767b_2307f6e8",
      "revId": "95355075aba31f534a26bc4313f1abdc19fe8473",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}