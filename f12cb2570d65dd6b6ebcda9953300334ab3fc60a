{
  "comments": [
    {
      "key": {
        "uuid": "2204fb53_aa083472",
        "filename": "tool/server.cc",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 5415
      },
      "writtenOn": "2017-09-15T20:51:50Z",
      "side": 1,
      "message": "Nit: Our style would be to name this HandleWWW (like Go).",
      "range": {
        "startLine": 175,
        "startChar": 12,
        "endLine": 175,
        "endChar": 21
      },
      "revId": "f12cb2570d65dd6b6ebcda9953300334ab3fc60a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c711758_5a8789d4",
        "filename": "tool/server.cc",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 5415
      },
      "writtenOn": "2017-09-15T20:51:50Z",
      "side": 1,
      "message": "I think this would cause bssl server to burn CPU while waiting for some data from the peer. (Any particular reason it needs to echo it?)",
      "revId": "f12cb2570d65dd6b6ebcda9953300334ab3fc60a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b49b4484_438bea5f",
        "filename": "tool/server.cc",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 7690
      },
      "writtenOn": "2017-09-15T21:24:35Z",
      "side": 1,
      "message": "I was basing this off the code in transport_common.cc and assumed it was needed in case an EINTR occurred.\n\nWhen would this value be returned? Note that the socket is deliberately not set in non-blocking mode as it always reads first, then writes the response (unlike the TransferData function).",
      "parentUuid": "7c711758_5a8789d4",
      "revId": "f12cb2570d65dd6b6ebcda9953300334ab3fc60a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59bd08ca_d379c6d5",
        "filename": "tool/server.cc",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 5415
      },
      "writtenOn": "2017-09-15T21:40:15Z",
      "side": 1,
      "message": "SSL_ERROR_WANT_READ means the socket is set in non-blocking mode and you should retry when the socket is ready for reading again. :-P (Note the code in transport_common.cc does a continue to a select() thingy.)\n\nThe OpenSSL API is kind of horrific, but I made a vague attempt at documenting sometime ago here:\nhttps://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#SSL_read\nhttps://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#SSL_get_error\nhttps://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#SSL_ERROR_WANT_READ",
      "parentUuid": "b49b4484_438bea5f",
      "revId": "f12cb2570d65dd6b6ebcda9953300334ab3fc60a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02f294ba_42f19448",
        "filename": "tool/server.cc",
        "patchSetId": 3
      },
      "lineNbr": 191,
      "author": {
        "id": 7690
      },
      "writtenOn": "2017-09-15T22:00:06Z",
      "side": 1,
      "message": "Just to be sure, \"when the transport is ready for reading\" means that the value is only applicable to non-blocking mode? Does it mean that SSL_read internally handles EINTR?\n\nCouldn\u0027t find that in the docs and a \"quick\" look pointed to \"tls_read_buffer_extend_to\" and there I see a BIO_read without BIO_should_retry to check for EINTR. Should I keeo this retry logic or remove it? (It is kind of an edge case anyway.)",
      "parentUuid": "59bd08ca_d379c6d5",
      "revId": "f12cb2570d65dd6b6ebcda9953300334ab3fc60a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    }
  ]
}