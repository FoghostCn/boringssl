{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f416f11f_20bf9d6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 15276
      },
      "writtenOn": "2023-03-21T22:08:58Z",
      "side": 1,
      "message": "It looks that current owner is a \"Deleted User\". How this can be fixed?\n\nWhat is required to make progress with this patchset?",
      "revId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19a5119b_35e64972",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-01T01:17:13Z",
      "side": 1,
      "message": "This AES-GCM implementation is nearly 5,000 lines of perl, which takes 4.3 seconds to generate 111,191 (non-blank) lines of assembly, which assembles to a 880,096 object file. That is far, far too large for us to accept. For comparison, our other AES-GCM assembly implementations are well under 2,000 lines of assembly. An 880K object file is 5x larger than even our largest P-256 tables.\n\nTo move forward on AVX-512 AES-GCM optimizations in BoringSSL, we would need a completely different implementation as the starting point.",
      "parentUuid": "f416f11f_20bf9d6f",
      "revId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "492d9dce_54ace394",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5525
      },
      "writtenOn": "2024-01-23T22:40:45Z",
      "side": 1,
      "message": "I wondered if the huge source file size may have resulted in a disproportionate amount of debug info in the .o file that might make things look worse than they actually are, so I built this branch and looked at the output:\n\n```\n$ ls -l aes-gcm-avx512.S.o\n879376\n```\nThis matches what David said\n\n\n```\n$ strip aes-gcm-avx512.S.o \u0026\u0026 ls -l aes-gcm-avx512.S.o\n699336\n```\n\nSo, no, it is still huge. I rebuilt and inspected it using nm:\n\n$  nm --print-size --size-sort --radix\u003dd aes-gcm-avx512.S.o\n0000000000000800                154 T gcm_gmult_avx512\n0000000000000000                770 T gcm_init_avx512\n0000000000000960              9,211 T gcm_ghash_avx512\n0000000000010176              9,730 T gcm_setiv_avx512\n0000000000358464            338,498 T aes_gcm_decrypt_avx512\n0000000000019936            338,502 T aes_gcm_encrypt_avx512\n\nI also did a diff between the AWS-LC copy of this and there\u0027s nothing that seems different enough that it would change this.\n\nFor comparison, the existing code:\n```\n$ ls -l aesni-gcm-x86_64.S.o\n6792\n$ nm --print-size --size-sort --radix\u003dd build-linux-x86_64/crypto\n/fipsmodule/CMakeFiles/fipsmodule.dir/aesni-gcm-x86_64.S.o\n0000000000001408              305 T aesni_gcm_decrypt\n0000000000001728              380 t _aesni_ctr32_6x\n0000000000002112            1,084 T aesni_gcm_encrypt\n0000000000000000            1,404 t _aesni_ctr32_ghash_6x\n```\n\nHTH.",
      "parentUuid": "19a5119b_35e64972",
      "revId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c02674d1_b00386dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 15276
      },
      "writtenOn": "2024-01-24T15:42:29Z",
      "side": 1,
      "message": "Thanks for the feedback and looking into size of the debug info.\nYes, you are right - this implementation prioritizes performance vs code size.\nI\u0027ll have a look into some code size reduction options and get back here before making any re-work.",
      "parentUuid": "492d9dce_54ace394",
      "revId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c37133bc_568365bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-24T15:46:02Z",
      "side": 1,
      "message": "This one is too large by factor of around 100x. At that scale, we\u0027re not looking at code size reduction, but starting over. As noted above, to move forward on AVX-512 AES-GCM optimizations in BoringSSL, we would need a completely different implementation as the starting point.\n\nI\u0027ll go ahead and close out this CL as we won\u0027t be accepting this one in any form.",
      "parentUuid": "c02674d1_b00386dd",
      "revId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59f33bee_7aa8a8dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5525
      },
      "writtenOn": "2024-01-24T18:18:09Z",
      "side": 1,
      "message": "I just wanted to expand on the 100x comment to be helpful to Tomasz. My understanding is that the submitted implementation contains separate implementations of AES-128, -192, and -256. This would account for a 3x code size increase compared to existing code that implements them all in a single loop. Furthermore, the submitted implementation completely unrolls each implementation. So this accounts for 10+12+14 \u003d ~36x size increase. Notice how 3*36 is approximately 100x. So it does seem like 100x is the natural result of a fully-unrolled implementation, so it seems like full unrolling can\u0027t work.",
      "revId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b151f3c3_3422b05f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-24T18:27:55Z",
      "side": 1,
      "message": "I don\u0027t think that math is right, by many counts. If you\u0027re doing 10+12+14, that\u0027s already accounting for AES-128, AES-192, and AES-256. We shouldn\u0027t be doing another multiplication by 3. That means we still have at least a 3x not accounted for.\n\nMoreover, that math also only works if the reference file does *not* expand out the AES rounds., and that\u0027s also not true. It does indeed unroll the AES rounds. Although it is smarter about it and does:\n\n1. 10 rounds\n2. If \u003e AES-128, do another 2 rounds\n3. If \u003e AES-192, do another 2 rounds\n\nThat means 10+12+14 is not the right factor. Whatever unreasonable things this file is doing, it\u0027s not as simple as \"don\u0027t unroll AES rounds\".\n\nBut, again, please discard this file entirely and start over if you want to encourage AVX-512 adoption.",
      "parentUuid": "59f33bee_7aa8a8dc",
      "revId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0aa5c16_c8c21e55",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 15276
      },
      "writtenOn": "2024-02-27T11:45:20Z",
      "side": 1,
      "message": "OK, we\u0027ll look into a new design",
      "parentUuid": "b151f3c3_3422b05f",
      "revId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "32fe277f40bbed3b3ada3a1976f9e8b71157b3f4",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}