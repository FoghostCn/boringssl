{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e4b8a39e_3cb0bd62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-12-29T22:19:50Z",
      "side": 1,
      "message": "Doing an end-of-year cleanup. We\u0027ve not heard about this issue from anywhere else, and the change breaks GCC. But it appears to work as a Clang-only change. I\u0027m trying to get the reproduction to run, but I think it\u0027ll need Xcode installed, which will take a while to download.",
      "revId": "f2411384f42478afc7ee5501448357d6b7595e62",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a75304de_01a5fb2d",
        "filename": "include/openssl/base.h",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-17T15:32:07Z",
      "side": 1,
      "message": "That looks like it\u0027s accidentally relying on the symbol being always inlined.\n\nThis is saying, in Clang + C, we use plain C99 non-`static` `inline`. But C99 `inline` has very different semantics from C++ `inline`.\n\nIn C++ `inline`, if you need the non-inlined version of the function, you just emit it and the linker dedups. In C `inline`, if you need the non-inlined version of the function, you just reference the symbol. Instead, exactly one C file must include:\n\n```\nextern inline int foo(int a);\n```\n\nIf you omit that, things will probably work, because the function is usually inlined, but if it ever isn\u0027t, you\u0027ll have a missing symbol.\n\nI\u0027m not sure how `attribute(weak)` interacts, but I would guess it means that the non-inlined version is a weak symbol... so if it\u0027s missing the linker won\u0027t even notice, and then we\u0027ll crash at runtime because we\u0027re calling a weak symbol without checking it.",
      "revId": "f2411384f42478afc7ee5501448357d6b7595e62",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "f2411384f42478afc7ee5501448357d6b7595e62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f2411384f42478afc7ee5501448357d6b7595e62",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}