{
  "comments": [
    {
      "key": {
        "uuid": "12c608da_8bb871d7",
        "filename": "crypto/bn/gcd.c",
        "patchSetId": 8
      },
      "lineNbr": 620,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-05-11T22:32:22Z",
      "side": 1,
      "message": "With everything getting shuffled around, it\u0027s not obvious switching to BN_set_flags does everything quite the same.",
      "revId": "c363cecfc6659fc48642c06ea1271cdeaeb8e7c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7254a4e4_330b921e",
        "filename": "crypto/bn/gcd.c",
        "patchSetId": 8
      },
      "lineNbr": 620,
      "author": {
        "id": 5525
      },
      "writtenOn": "2016-05-11T23:17:22Z",
      "side": 1,
      "message": "Indeed, with the change, there will be some temporary values that have the `BN_FLG_CONSTTIME` flag set that didn\u0027t have it set previously. But, none of the functions called by this function look at `BN_FLG_CONSTTIME` except `BN_div` and `BN_nnmod`, and those calls are the ones that force us to muck with `BN_FLG_CONSTTIME` in the first place.\n\nNote, in particular, that the only non-local (`BN_CTX`-owned) value that is modified in this function is `out`, and that this function never sets any flags on `out`.\n\nI can revert the changes to this function if you still aren\u0027t convinced. The main goal of changing this is to remove `BN_with_flags` from the security analysis of RSA/ECDSA/ECDH, which is something of value (only) when combined with many similar changes to reduce the amount of relevant code.\n\nLMK.",
      "parentUuid": "12c608da_8bb871d7",
      "revId": "c363cecfc6659fc48642c06ea1271cdeaeb8e7c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "923678c6_0943c935",
        "filename": "crypto/bn/gcd.c",
        "patchSetId": 8
      },
      "lineNbr": 620,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-05-12T15:26:19Z",
      "side": 1,
      "message": "By removing BN_with_flags from the security analysis, do you mean that we\u0027ll call into constant-time code without conditioning on BN_FLG_CONSTTIME or just that BN_with_flags is weird since it\u0027s stack-allocated and BN_set_flags is less weird.\n\nThe former sounds like a good idea. I\u0027m not sure how this change helps us get there though. I would think that we\u0027d want the consttime-ness of each operation to be clear locally. The style where BN_with_flags is used just before calling a function is certainly not easy to reason about, but I think it\u0027s clearer than BN_set_flags when BIGNUMs are juggled around everywhere.\n\nAt line 587, B is flagged in some cases, but not others. Then, in each iteration of the loop (which maybe never runs?), whatever\u0027s currently A gets flagged. Then things get shuffled so\n\n   A, B, M, Y, X \u003d B, M, Y, X, A\n\nwhich means reasoning about where the flagged BIGNUMs are is kind of a mess. I would certainly buy that the shuffling ends up not mattering, but that\u0027s additional non-local information needed to understand what\u0027s going on.\n\nI think the trace ends up as:\n\n   A  B  M  Y  X\n  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n   n  ?  n  n  n   (? means depends on the condition above)\n  ---------------\n   y  ?  n  n  n\n   ?  n  n  n  y\n  ---------------\n   y  n  n  n  y\n   n  n  n  y  y\n  ---------------\n   y  n  n  y  y\n   y  n  n  y  y\n  ---------------\n   n  n  y  y  y\n   y  n  y  y  y\n  ---------------\n   n  y  y  y  y\n   y  y  y  y  y\n\n\nWhat if we just set all the temporaries to CONSTTIME on construction? (I guess now we have to worry about whether the CONSTTIME bit ever goes as a result of some operation. Though I imagine we\u0027re already assuming that? Dunno.)",
      "parentUuid": "7254a4e4_330b921e",
      "revId": "c363cecfc6659fc48642c06ea1271cdeaeb8e7c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7254a4e4_2a979357",
        "filename": "crypto/bn/gcd.c",
        "patchSetId": 8
      },
      "lineNbr": 620,
      "author": {
        "id": 5525
      },
      "writtenOn": "2016-05-12T19:45:29Z",
      "side": 1,
      "message": "David, I think perhaps this is overthinking things quite a bit.\n\nFirst, all of these values are temporary values. We never set `BN_FLG_CONSTTIME` on `out`, in particular. We\u0027re free to do whatever we want with the flag on our local variables knowing that there won\u0027t be non-local effects.\n\nSecond, of all the functions that this function calls, which care about the `BN_FLG_CONSTTIME` flag? Only `BN_nnmod` and `BN_div`. (This is clear to me, but I\u0027d forgive you if it isn\u0027t clear enough to be convincing.) Even if this weren\u0027t the case, the only possible side effect of this change (as far as I could tell) would be to get *more* constant-time behavior, which actually would only help.\n\nWe always set `BN_FLG_CONSTTIME` on the inputs of `BN_nnmod` and `BN_div` just as the function previously did, so those calls are always going to get the constant time behavior. Indeed, everything gets swapped around as your table shows, which is why we set `BN_FLG_CONSTTIME` every time we call those functions, so we don\u0027t have to worry about all that swapping.\n\nAgain, my motivation here is to allow us to eventually forget about `BN_with_flags`, which is very unusual in that it constructs a non-owning `BIGNUM` that aliases another `BIGNUM`.\n\nWe could indeed set the `BN_FLG_CONSTTIME` flag on every local (from `BN_CTX_get`) BIGNUM before the loop starts. But, that has a \"I don\u0027t know what I\u0027m doing so I\u0027ll just do this\" feeling to it that I don\u0027t like, so I\u0027d rather not.\n\nI feel I\u0027ve made a mistake in taking a lot of your time to think about this. I suggest that we don\u0027t think about this *too* much more. If you\u0027re not convinced that this is a good idea, let\u0027s just revert the change to this function. I have a completely different implementation of this function sitting around anyway, so in the (very) long term this would all be moot (if we allow ourselves to be somewhat optimistic).\n\nLMK.",
      "parentUuid": "923678c6_0943c935",
      "revId": "c363cecfc6659fc48642c06ea1271cdeaeb8e7c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12c608da_4b92f904",
        "filename": "crypto/rsa/rsa_impl.c",
        "patchSetId": 8
      },
      "lineNbr": 725,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-05-11T22:32:22Z",
      "side": 1,
      "message": "[I think I agree this is a no-op.]",
      "range": {
        "startLine": 725,
        "startChar": 15,
        "endLine": 725,
        "endChar": 17
      },
      "revId": "c363cecfc6659fc48642c06ea1271cdeaeb8e7c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12c608da_abbd6d78",
        "filename": "crypto/rsa/rsa_impl.c",
        "patchSetId": 8
      },
      "lineNbr": 1020,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-05-11T22:32:22Z",
      "side": 1,
      "message": "[I think I agree this is a no-op.]",
      "range": {
        "startLine": 1020,
        "startChar": 2,
        "endLine": 1020,
        "endChar": 14
      },
      "revId": "c363cecfc6659fc48642c06ea1271cdeaeb8e7c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}