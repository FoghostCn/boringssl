{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f3054540_60bc037a",
        "filename": "crypto/internal.h",
        "patchSetId": 14
      },
      "lineNbr": 532,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-01T19:21:47Z",
      "side": 1,
      "message": "Do we need a barrier on `mask` here too? We had one in `copy_from_prebuf`, which was OR instead of XOR, but it\u0027s ultimately the same thing.",
      "range": {
        "startLine": 532,
        "startChar": 14,
        "endLine": 532,
        "endChar": 18
      },
      "revId": "3b9f9cb55b245e63fff1f03762ef1eac0b623dff",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec6731d7_4121562f",
        "filename": "crypto/internal.h",
        "patchSetId": 14
      },
      "lineNbr": 532,
      "author": {
        "id": 8749
      },
      "writtenOn": "2023-06-02T14:03:53Z",
      "side": 1,
      "message": "Adding a value barrier generates assembly that is less convincing in terms of future constant-time compilation and results in a 2-3% slowdown. The generated assembly for current source looks convincing, passes ctgrind, and a version with added `if (babs \u003d\u003d 1+i)` fails ctgrind. I suggest we merge this change (and keep investigating value-barrier compilation).",
      "parentUuid": "f3054540_60bc037a",
      "range": {
        "startLine": 532,
        "startChar": 14,
        "endLine": 532,
        "endChar": 18
      },
      "revId": "3b9f9cb55b245e63fff1f03762ef1eac0b623dff",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}