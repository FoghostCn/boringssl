{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bde222ca_7a52b51f",
        "filename": "include/openssl/pki/pki_version.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-12-13T19:04:02Z",
      "side": 1,
      "message": "Dunno how you feel about having two for semantic style versioning.",
      "revId": "3d6b1a169a146d3fadf6935b00fc3856ede49062",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75cda3d1_efe71c1a",
        "filename": "include/openssl/pki/pki_version.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-12-13T19:05:00Z",
      "side": 1,
      "message": "could also just be a float.",
      "parentUuid": "bde222ca_7a52b51f",
      "revId": "3d6b1a169a146d3fadf6935b00fc3856ede49062",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bac079fb_76889123",
        "filename": "include/openssl/pki/pki_version.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-12-13T19:18:52Z",
      "side": 1,
      "message": "What would a caller do with this information that a single number wouldn\u0027t solve? We\u0027re not really used in contexts where the semver split makes much sense.\n\nSemver lets a project say \"I\u0027m only compatible with 1.x and not 2.x\", but we never actually want to do anything with that signal. Most folks use that information to parallel install a dependency or forcibly break the build, but we don\u0027t actually want either.\n\nSupposing we just do a single number, is there a reason we can\u0027t just use the existing `BORINGSSL_API_VERSION` macro?",
      "parentUuid": "75cda3d1_efe71c1a",
      "revId": "3d6b1a169a146d3fadf6935b00fc3856ede49062",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a409dbba_e4ee272a",
        "filename": "include/openssl/pki/pki_version.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-12-13T19:37:54Z",
      "side": 1,
      "message": "Yeah, if it\u0027s just a single number we can just increment for everything and not care. - in which case, yes, it could be BORINGSSL_API_VERSION. As long as we don\u0027t really care much about an increased frequency of cranking that..",
      "parentUuid": "bac079fb_76889123",
      "revId": "3d6b1a169a146d3fadf6935b00fc3856ede49062",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9652ae9a_48530d0c",
        "filename": "include/openssl/pki/pki_version.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-12-13T19:43:14Z",
      "side": 1,
      "message": "Should be fine? I don\u0027t think there\u0027s any real harm to cranking BORINGSSL_API_VERSION. We expect callers to use it like:\n\n```\n#if BORINGSSL_API_VERSION \u003e\u003d SOME_CUTOFF\n  DoNewThing();\n#else\n  DoOldThing();\n#endif\n```\n\nWe don\u0027t really care if the number is 1 past `SOME_CUTOFF` or 1000 past it.\n\nMinimizing cranking it makes sense in a semver model where it\u0027s something like:\n\n```\n#if BORINGSSL_MAJOR_VERSION \u003d\u003d 1\n  DoV1Thing();\n#elif BORINGSSL_MAJOR_VERSION \u003d\u003d 2\n  DoV2Thing();\n#elif BORINGSSL_MAJOR_VERSION \u003d\u003d 3\n  DoV3ThingActuallyTheSameAsV2BecauseV3DidNotImpactUs();\n#else\n#error \"Unsupported version, please update the caller or parallel install or whatever\"\n#endif\n```\n\nBut our model is to default assume that later versions are compatible unless build or tests fail.",
      "parentUuid": "a409dbba_e4ee272a",
      "revId": "3d6b1a169a146d3fadf6935b00fc3856ede49062",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "3d6b1a169a146d3fadf6935b00fc3856ede49062",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "3d6b1a169a146d3fadf6935b00fc3856ede49062",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}