{
  "comments": [
    {
      "key": {
        "uuid": "fa582b71_fd60632b",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "We can leave this for a follow-up, but want to start documenting this function while you\u0027re here? Unlike the other one, I can actually understand what it\u0027s doing...\n\n  /* If the input doesn\u0027t fill up a line, buffer it. */\n\n(The other function looks scary and probably should just get rewritten later...)",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_14789c64",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa582b71_fd60632b",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_1d4f17b6",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "/* Complete the partial line and encode it. */",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_548224da",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa582b71_1d4f17b6",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_7d445396",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "/* Encode any complete lines in the input. */",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_9463ecb6",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa582b71_7d445396",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_5d498fac",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "/* If there\u0027s any left over, save it for later. */",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_145ffce3",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa582b71_5d498fac",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_dd347f1d",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 167,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "/* Encode the final partial line, if any. */",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_545984fa",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 167,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa582b71_dd347f1d",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_7de8d33e",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "[Aside: ...does this function not strip out trailing padding here? Yeesh. I guess no one noticed because OpenSSL also tends not to enforce that you don\u0027t have trailing data after an ASN.1 element.]",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_74ff600e",
        "filename": "crypto/base64/base64.c",
        "patchSetId": 1
      },
      "lineNbr": 410,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Well, also, now that EVP_DecodeBlock returns size_t instead of int, the i \u003c 0 check needs to become i \u003d\u003d -1. Done.",
      "parentUuid": "fa582b71_7de8d33e",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_1d5f17e4",
        "filename": "crypto/pem/pem_lib.c",
        "patchSetId": 1
      },
      "lineNbr": 550,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "Nit: indent with a tab. (There\u0027s an emacs .el file you can pull from OpenSSL upstream for the stuff that hasn\u0027t been clang-formatted.)",
      "range": {
        "startLine": 550,
        "startChar": 0,
        "endLine": 550,
        "endChar": 2
      },
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_741640b6",
        "filename": "crypto/pem/pem_lib.c",
        "patchSetId": 1
      },
      "lineNbr": 550,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa582b71_1d5f17e4",
      "range": {
        "startLine": 550,
        "startChar": 0,
        "endLine": 550,
        "endChar": 2
      },
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_fd47c314",
        "filename": "crypto/pem/pem_lib.c",
        "patchSetId": 1
      },
      "lineNbr": 581,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "This cast doesn\u0027t make much sense now. (Buh. And, of course, len is a long, so it\u0027s neither of these.)",
      "range": {
        "startLine": 581,
        "startChar": 4,
        "endLine": 581,
        "endChar": 9
      },
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_37cddac5",
        "filename": "crypto/pem/pem_lib.c",
        "patchSetId": 1
      },
      "lineNbr": 581,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa582b71_fd47c314",
      "range": {
        "startLine": 581,
        "startChar": 4,
        "endLine": 581,
        "endChar": 9
      },
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_7d5453c4",
        "filename": "crypto/pem/pem_lib.c",
        "patchSetId": 1
      },
      "lineNbr": 632,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 632,
        "startChar": 0,
        "endLine": 632,
        "endChar": 2
      },
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_b7070a40",
        "filename": "crypto/pem/pem_lib.c",
        "patchSetId": 1
      },
      "lineNbr": 632,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa582b71_7d5453c4",
      "range": {
        "startLine": 632,
        "startChar": 0,
        "endLine": 632,
        "endChar": 2
      },
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_fd0ce3dc",
        "filename": "include/openssl/base.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "Are stdbool\u0027s bool and C++\u0027s bool always the same size? C++\u0027s is definitely not the same size as the ints that C code tends to yet.\n\n(I\u0027ll defer to Adam on whether he wants us to jump into this brave new stdbool world.)",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_97792eb8",
        "filename": "include/openssl/base.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "sizeof(bool) --\u003e 1 for both C and C++ on my machine.",
      "parentUuid": "fa582b71_fd0ce3dc",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_dd6d9fa3",
        "filename": "include/openssl/base64.h",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "This function is still going to have to return a signed type because it signals error with -1. (Hence why it checks against INT_MAX.)\n\nssize_t also doesn\u0027t work because yay Windows. This guy is deprecated in favor of the saner one anyway, so may as well leave it as int. Better to move everything off it.",
      "range": {
        "startLine": 158,
        "startChar": 15,
        "endLine": 158,
        "endChar": 21
      },
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_f7223299",
        "filename": "include/openssl/base64.h",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Checking the return value against -1 specifically still works. (I\u0027ll make sure the callers check properly.)",
      "parentUuid": "fa582b71_dd6d9fa3",
      "range": {
        "startLine": 158,
        "startChar": 15,
        "endLine": 158,
        "endChar": 21
      },
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a117f99_c3d776ca",
        "filename": "include/openssl/base64.h",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-13T01:48:25Z",
      "side": 1,
      "message": "It seems weird to have size_t sometimes be a size and sometimes being [0, SIZE_MAX-1] \u003d\u003e size, SIZE_MAX \u003d\u003e error. Okay, EVP_DecodeBlock can\u0027t actually return SIZE_MAX legitimately, but it still seems weird.\n\nI feel like it\u0027s tidier to say that EVP_DecodeBlock will fail if the output would not have fit in an int. This function is crazy anyway (caller deals with padding), so it ought to just be deprecated.\n\n(Note: it already does this INT_MAX check; I made sure to do that when I added EVP_DecodeBase64. If we\u0027re going with the SIZE_MAX version, you probably want to remove it at least. :-P)\n\nAlso we won\u0027t catch with a compile failure for existing code that saves in an int and checks \u003c 0. (At a glance, some code internally does. It\u0027s still not used much, but more so than the EVP_ENCODE_CTX ones.)",
      "parentUuid": "7af19ba1_f7223299",
      "range": {
        "startLine": 158,
        "startChar": 15,
        "endLine": 158,
        "endChar": 21
      },
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa582b71_fd4d0308",
        "filename": "include/openssl/base64.h",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-11-12T22:56:07Z",
      "side": 1,
      "message": "Nit: I think the original comments came from OpenSSL. Comments in BoringSSL are usually Go-style, so\n\n  num is the number of bytes saved in a partial encode/decode.",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7af19ba1_b7b42ac7",
        "filename": "include/openssl/base64.h",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 5380
      },
      "writtenOn": "2014-11-13T00:49:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa582b71_fd4d0308",
      "revId": "d67d6833578fff1b3398f0ac639a020f96c6f79c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}