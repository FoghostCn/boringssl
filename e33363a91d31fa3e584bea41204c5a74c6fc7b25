{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "542ce694_0c3eee28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14196
      },
      "writtenOn": "2022-04-29T15:48:34Z",
      "side": 1,
      "message": "So fooling around in the other side in Libre, the Cache here appears to not help performance at all with repeated parsings of certificates. \n\nThis can be followed on with a CBB/CBS conversion of asn1_check_tlen.",
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a89faec5_72124162",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-04-29T16:01:39Z",
      "side": 1,
      "message": "\u003e This can be followed on with a CBB/CBS conversion of asn1_check_tlen.\n\nhttps://boringssl.googlesource.com/boringssl/+/657c69b3c5fd530d83ee63007ff5537db985aafa%5E%21/ :-)\n\nThough if we can move that up a level, even better! It\u0027d be great to get this whole function to look like CBS.",
      "parentUuid": "542ce694_0c3eee28",
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39a77d08_faf0432b",
        "filename": "crypto/asn1/tasn_dec.c",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-04-29T16:01:39Z",
      "side": 1,
      "message": "Hrm, we can\u0027t just pass in NULL? Seems the old asn1_check_tlen even tolerated NULL.\n\n(We may even just make it a totally opaque type with no definition. I don\u0027t see any references in external code at all.)",
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd1007a0_e0940a99",
        "filename": "crypto/asn1/tasn_dec.c",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 14196
      },
      "writtenOn": "2022-04-29T16:10:54Z",
      "side": 1,
      "message": "We really wanted to do that, the problem is that this ASN1_TLC is part of the OpenSSL 3 API, and documented as being handed to the extern funcs which aren\u0027t strictly guaranteed to be null safe. it is documented as \"you get a pointer to it\". \n\nSo there\u0027s a few options here - pass a pointer to a zeroed static like I\u0027m doing, \nput one on the stack and zero it or mark it invalid. (set ctx-\u003evalid \u003d 0)\n\nOr just call the extern_func with NULL and hope the extern func folks deal with it correctly (because prayer and clean living works well with this API?)\n\nYou got a preference?",
      "parentUuid": "39a77d08_faf0432b",
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3112b1b_fcf5bfa9",
        "filename": "crypto/asn1/tasn_dec.c",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-04-29T16:30:39Z",
      "side": 1,
      "message": "Eh, extern funcs are rare (I count zero in code search), so I\u0027d just go with the NULL and see how it goes.\n\nAlso the only way I can think of for folks to care about NULL ASN1_TLC is if they reach into the struct instead of passing it back to us. But if they reach into the struct, this CL is already potentially breaking because they might expect cached values in the struct.\n\n(To that end, deleting the struct definition and leaving it opaque would make such folks fail to compile and get noticed sooner...)",
      "parentUuid": "cd1007a0_e0940a99",
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c7b7ae2_d167e467",
        "filename": "crypto/asn1/tasn_dec.c",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 14196
      },
      "writtenOn": "2022-04-29T16:49:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c3112b1b_fcf5bfa9",
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "887b7f29_c5a871ed",
        "filename": "crypto/asn1/tasn_dec.c",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 14196
      },
      "writtenOn": "2022-04-29T16:50:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c7b7ae2_d167e467",
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf8e2d3b_46ffd58e",
        "filename": "crypto/asn1/tasn_dec.c",
        "patchSetId": 1
      },
      "lineNbr": 686,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-04-29T16:01:39Z",
      "side": 1,
      "message": "!\u003d\n\n(Hrm, I wonder if we should have a test for this somewhere. Like trying to parse a cert where the outermost SEQUENCE is missing the constructed bit.)",
      "range": {
        "startLine": 686,
        "startChar": 18,
        "endLine": 686,
        "endChar": 20
      },
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9faa6fd0_277b6511",
        "filename": "crypto/asn1/tasn_dec.c",
        "patchSetId": 1
      },
      "lineNbr": 686,
      "author": {
        "id": 14196
      },
      "writtenOn": "2022-04-29T16:22:53Z",
      "side": 1,
      "message": "oops. yep you\u0027re right.",
      "parentUuid": "cf8e2d3b_46ffd58e",
      "range": {
        "startLine": 686,
        "startChar": 18,
        "endLine": 686,
        "endChar": 20
      },
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "198142c9_d7a255c4",
        "filename": "crypto/asn1/tasn_dec.c",
        "patchSetId": 1
      },
      "lineNbr": 686,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-04-29T18:05:43Z",
      "side": 1,
      "message": "\u003e Like trying to parse a cert where the outermost SEQUENCE is missing the constructed bit.\n\nAh, sorry, that wasn\u0027t quite right. It\u0027d have to be with d2i_ASN1_TYPE (ANY). This codepath is used when a SEQUENCE is parsed as a \"primitive\". That\u0027s not normally how it works, but ASN1_TYPE works by jamming SEQUENCE and SET into this codepath.",
      "parentUuid": "9faa6fd0_277b6511",
      "range": {
        "startLine": 686,
        "startChar": 18,
        "endLine": 686,
        "endChar": 20
      },
      "revId": "e33363a91d31fa3e584bea41204c5a74c6fc7b25",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}