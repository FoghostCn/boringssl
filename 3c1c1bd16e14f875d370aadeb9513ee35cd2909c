{
  "comments": [
    {
      "key": {
        "uuid": "bd1efa57_579b6e8a",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5885
      },
      "writtenOn": "2016-07-01T01:01:44Z",
      "side": 1,
      "message": "I\u0027m not sure if you want to add support for all those architectures, but if not, then we might want to stop loading them for now.",
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_c8d77758",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-07-06T18:47:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd1efa57_579b6e8a",
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_17be16dd",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5885
      },
      "writtenOn": "2016-07-01T01:01:44Z",
      "side": 1,
      "message": "Maybe let\u0027s call it \"linux_x86_64\", since we\u0027re referring to OS+CPU throughout rest of the BUILD file?",
      "range": {
        "startLine": 38,
        "startChar": 12,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_08e24f35",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-07-06T18:47:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd1efa57_17be16dd",
      "range": {
        "startLine": 38,
        "startChar": 12,
        "endLine": 38,
        "endChar": 14
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_da91e55d",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5885
      },
      "writtenOn": "2016-07-01T01:01:44Z",
      "side": 1,
      "message": "Maybe also add \"freebsd\" here? It works fine with ASM for Linux... However, the issue is that Bazel doesn\u0027t differentiate between 32 \u0026 64 bit versions, both are \"freebsd\" :(",
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_08b96f27",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-07-06T18:47:01Z",
      "side": 1,
      "message": "Happy to do whatever you think best, but then 32-bit FreeBSD would be broken, right?\n\nBazel is so bad at platform identification I\u0027m wondering whether we should wrap all assembly files in preprocessor directives so that we can just throw them all at the compiler and have it sort out which ones apply.",
      "parentUuid": "bd1efa57_da91e55d",
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_7afad17c",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5885
      },
      "writtenOn": "2016-07-01T01:01:44Z",
      "side": 1,
      "message": "Can we add compiler warnings here?\n\nRight now, I\u0027m compiling BoringSSL with:\n\n    boringssl_copts \u003d [\n        \"-fno-common\",\n        \"-fvisibility\u003dhidden\",\n        \"-Wa,--noexecstack\",\n        \"-Wall\",\n        \"-Werror\",\n        \"-Wextra\",\n        \"-Wformat\u003d2\",\n        \"-Wlong-long\",\n        \"-Wpointer-arith\",\n        \"-Wshadow\",\n        \"-Wwrite-strings\",\n        \"-Wno-unused-parameter\",\n        \"-D_XOPEN_SOURCE\u003d700\",\n    ]\n\n    boringssl_copts_c11 \u003d boringssl_copts + [\n        \"-Wmissing-prototypes\",\n        \"-Wold-style-definition\",\n        \"-Wstrict-prototypes\",\n        \"-std\u003dc11\",\n    ]\n\n    boringssl_copts_cxx \u003d boringssl_copts + [\n        \"-Wmissing-declarations\",\n        \"-std\u003dc++11\",\n    ]\n\nbut feel free to remove some.\n\nPlease note that \"-Wlong-long\" breaks :tool because of \"unsigned long long\" in tool/rand.cc.",
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_68e74b1b",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-07-06T18:47:01Z",
      "side": 1,
      "message": "I\u0027d copied many of them in. (Although -Wextra implies -Wunused-parameter, for which we aren\u0027t clean.)",
      "parentUuid": "bd1efa57_7afad17c",
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_3ae7b91c",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5645
      },
      "writtenOn": "2016-07-01T01:29:46Z",
      "side": 1,
      "message": "You don\u0027t use any other copts.  Maybe just roll this into boringssl_copts?",
      "range": {
        "startLine": 72,
        "startChar": 50,
        "endLine": 72,
        "endChar": 52
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_e8fa7bac",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-07-06T18:47:01Z",
      "side": 1,
      "message": "(File now has C++ opts too.)",
      "parentUuid": "bd1efa57_3ae7b91c",
      "range": {
        "startLine": 72,
        "startChar": 50,
        "endLine": 72,
        "endChar": 52
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_9a1c8d0d",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 5645
      },
      "writtenOn": "2016-07-01T01:29:46Z",
      "side": 1,
      "message": "Are you sure you want this?  It\u0027s polluting.\nhttp://www.bazel.io/docs/be/c-cpp.html#cc_library.includes\n\n(and below)",
      "range": {
        "startLine": 79,
        "startChar": 28,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_ddb8bfd7",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 5885
      },
      "writtenOn": "2016-07-01T01:54:51Z",
      "side": 1,
      "message": "How else are 3rd-party apps that depend on BoringSSL and include the headers using:\n\n    #include \u003copenssl/ssl.h\u003e\n\nsupposed to find it?",
      "parentUuid": "bd1efa57_9a1c8d0d",
      "range": {
        "startLine": 79,
        "startChar": 28,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_48bcef7c",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 5645
      },
      "writtenOn": "2016-07-01T07:10:56Z",
      "side": 1,
      "message": "The reason I\u0027m pointing it out is only that once done, it is very difficult to undo.  I don\u0027t know who is the expected beneficiary of this change; it may very well be reasonable.\n\nBut since you ask, the alternative is to rewrite the headers of third_party apps to be relative to a single common include directory, so that all of the pathnames are unambiguous, rather than (potentially) finding the first openssl/ssl.h in one of many -I arguments.  :-)",
      "parentUuid": "bd1efa57_ddb8bfd7",
      "range": {
        "startLine": 79,
        "startChar": 28,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_1c18d96d",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 5885
      },
      "writtenOn": "2016-07-01T23:32:29Z",
      "side": 1,
      "message": "1. Bazel expands \"includes\" to the external repository path, so\n\n    includes \u003d [\"src/include\"]\n\nis expanded into\n\n    -isystem external/boringssl/src/include -isystem bazel-out/local-fastbuild/genfiles/external/boringssl/src/include\n\n\n2. Using -I would require 2-step process for adding dependency on BoringSSL:\n\n(a) add BoringSSL target to \"deps\"\n\n_and_\n\n(b) add correct include path to \"copts\"\n\nalso, if third-party app forgets to add (b), then system-wide headers (read: most likely OpenSSL headers) are going to be pulled instead of BoringSSL\u0027s.\n\n\nHopefully 1 \u0026 2 are good enough reasons to allow use of \"includes\" :)",
      "parentUuid": "bd1efa57_48bcef7c",
      "range": {
        "startLine": 79,
        "startChar": 28,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_7cbe35de",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 5645
      },
      "writtenOn": "2016-07-02T00:46:40Z",
      "side": 1,
      "message": "I\u0027m not objecting to this; I\u0027m only asking if this library may someday support a cleaner set of #include practices than you\u0027re describing.  (I\u0027m still unclear what environments are targeted by this change.)\n\nFor example, do we want two targets, e.g. :crypto means \"for use by well-behaved packages that write out #include \u003cfull/path/to/openssl/ssl.h\u003e\", whereas :crypto_system means \"for use by third-party software that expects #include \u003copenssl/ssl.h\u003e to do something reasonable\"?",
      "parentUuid": "5db89ed4_1c18d96d",
      "range": {
        "startLine": 79,
        "startChar": 28,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_3f866f2c",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 5885
      },
      "writtenOn": "2016-07-02T01:04:56Z",
      "side": 1,
      "message": "Oh, right... This is intended to be used as Bazel external repository [1], so there is no \"full/path/to/openssl\".\n\nAlso, a lot of projects currently using Bazel, use it as one of many build systems, so I don\u0027t see them migrating to this Google-unique (AFAIK) design.\n\n[1] http://www.bazel.io/docs/external.html",
      "parentUuid": "5db89ed4_7cbe35de",
      "range": {
        "startLine": 79,
        "startChar": 28,
        "endLine": 79,
        "endChar": 31
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_7add314e",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 5645
      },
      "writtenOn": "2016-07-01T01:29:46Z",
      "side": 1,
      "message": "Why do you need crypto_internal_headers?",
      "range": {
        "startLine": 89,
        "startChar": 71,
        "endLine": 89,
        "endChar": 72
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_08f88fb2",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-07-06T18:47:01Z",
      "side": 1,
      "message": "Good point, removed.",
      "parentUuid": "bd1efa57_7add314e",
      "range": {
        "startLine": 89,
        "startChar": 71,
        "endLine": 89,
        "endChar": 72
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_1a251db1",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 5885
      },
      "writtenOn": "2016-07-01T01:01:44Z",
      "side": 1,
      "message": "Missing \"copts\".",
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_28c47373",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-07-06T18:47:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd1efa57_1a251db1",
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd1efa57_faf021cf",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 5645
      },
      "writtenOn": "2016-07-01T01:29:46Z",
      "side": 1,
      "message": "This seems like something that could be cleaned up.",
      "range": {
        "startLine": 101,
        "startChar": 36,
        "endLine": 101,
        "endChar": 38
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5db89ed4_93e214d8",
        "filename": "util/BUILD",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-07-06T18:47:01Z",
      "side": 1,
      "message": "It is. I think we could do with putting the scoped types in their respective header files with a CPP guard to make it C++-only. But I don\u0027t want to put that ahead of this change.",
      "parentUuid": "bd1efa57_faf021cf",
      "range": {
        "startLine": 101,
        "startChar": 36,
        "endLine": 101,
        "endChar": 38
      },
      "revId": "3c1c1bd16e14f875d370aadeb9513ee35cd2909c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}