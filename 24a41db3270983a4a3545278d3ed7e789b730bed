{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6f55f4ff_d993d804",
        "filename": "include/openssl/span.h",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-05-10T18:15:42Z",
      "side": 1,
      "message": "There\u0027s already an implicit `Span(T[N])` constructor, so I think this can just be `return Span\u003cconst T\u003e(array)` or perhaps even `return array`. Alternatively, I think you can delete this and just omit `MakeConstSpan` at the call site.",
      "revId": "24a41db3270983a4a3545278d3ed7e789b730bed",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea41c72a_e44780ff",
        "filename": "include/openssl/span.h",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 5005
      },
      "writtenOn": "2023-05-11T19:40:41Z",
      "side": 1,
      "message": "Can\u0027t omit `MakeConstSpan` at the call site:\n\n```\n/Users/agl/boringssl/ssl/ssl_privkey.cc:538:10: error: no matching function for call to \u0027GetAllNames\u0027\n  return GetAllNames(out, max_out, kPredefinedNames,\n         ^~~~~~~~~~~\n/Users/agl/boringssl/ssl/internal.h:460:15: note: candidate template ignored: could not match \u0027Span\u003cconst T\u003e\u0027 against \u0027const SignatureAlgorithmName *\u0027\ninline size_t GetAllNames(const char **out, size_t max_out,\n```\n\n`return array` here does work, however.\n\nThat ok? Or do you feel that omitting `MakeConstSpan` should really work and I should poke at `Span` to try and make it work? (I\u0027m not sure why it doesn\u0027t given the implicit constructor.)",
      "parentUuid": "6f55f4ff_d993d804",
      "revId": "24a41db3270983a4a3545278d3ed7e789b730bed",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47933379_5e9bfc06",
        "filename": "include/openssl/span.h",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-05-11T22:26:45Z",
      "side": 1,
      "message": "Ohhhhh. It\u0027s because it\u0027s a template and template argument deduction isn\u0027t smart enough. Bah!\n\nIf we had a function `GetAllNames(..., Span\u003cconst SSL_CIPHER\u003e ...)`, and we called it with `const SSL_CIPHER[24]`, the language would try to do an implicit conversion and everything is fine.\n\nBut we have a template `GetAllNames\u003cT, _\u003e(... Span\u003cconst T\u003e ...)`. The language needs to first deduce the type of `T` before it has an actual type to try to coerce. There aren\u0027t any other parameters of the template that allow the language to deduce `T`. C++ templates are too unconstrained to resolve implicit constructors and template argument deduction concurrently.\n\nC++17 allows \"user-defined deduction guides\", but I\u0027m actually not sure if they\u0027re consulted in this context either. They might not be. It\u0027s all a mess.\n\nIt would have worked if you wrote `GetAllNames\u003cSSL_CIPHER, const char*\u003e` but at that point `MakeConstSpan` is probably easier.",
      "parentUuid": "ea41c72a_e44780ff",
      "revId": "24a41db3270983a4a3545278d3ed7e789b730bed",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ed4a4c1_90718b5b",
        "filename": "include/openssl/span.h",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-05-11T22:28:50Z",
      "side": 1,
      "message": "This is the same reason why Chromium has that annoying `base::as_bytes(base::make_span(some_string))` pattern. Though now that Chromium is C++17, I think it can use CTAD + deduction guides to get `base::as_bytes(base::span(some_string))`. I don\u0027t think we can remove the `base::span` though.",
      "parentUuid": "47933379_5e9bfc06",
      "revId": "24a41db3270983a4a3545278d3ed7e789b730bed",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}