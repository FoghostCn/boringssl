{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4cabd89b_c95acaab",
        "filename": "crypto/fipsmodule/self_check/self_check.c",
        "patchSetId": 3
      },
      "lineNbr": 781,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-01-20T19:33:51Z",
      "side": 1,
      "message": "Huh. I guess this works, but it is arguably violating the API contract a little. DH expects to take ownership of the BIGNUM. We\u0027re relying on BIGNUM being funny and, rather than BN_init/BN_cleanup vs BN_new/BN_free, having a single BN_free that dispatches cleanup vs free based on some bit in the BIGNUM.",
      "revId": "7ad7438a7eaf4201ce448fc74560f105f4039418",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24f3e270_9e67295f",
        "filename": "crypto/fipsmodule/self_check/self_check.c",
        "patchSetId": 3
      },
      "lineNbr": 781,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-20T19:45:44Z",
      "side": 1,
      "message": "Is your concern around the fact that the BIGNUM itself is on the stack, or that it\u0027s pointing to static data? (Or both?)\n\nIn my mind static-data BIGNUMs are a valid form of BIGNUM that should work fine everywhere, although now I look at bn_wexpand I see that it errors out in their case rather than handling them. But I\u0027d be inclined to fix that and try and say that static-data is fine unless you know reasons why that property is unviable.\n\nIn terms of passing statck-allocated BIGNUMs, I guess that\u0027s a little weird. That could be revised.",
      "parentUuid": "4cabd89b_c95acaab",
      "revId": "7ad7438a7eaf4201ce448fc74560f105f4039418",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4e715af_4e98fa6d",
        "filename": "crypto/fipsmodule/self_check/self_check.c",
        "patchSetId": 3
      },
      "lineNbr": 781,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-01-20T20:04:55Z",
      "side": 1,
      "message": "I was mostly thinking the stack-allocated BIGNUMs (init vs cleanup) and how it\u0027s weird that BN_free inside DH_free silently behaves in the other mode, where all our other types have a clearer split between FOO_cleanup and FOO_free. Then again, it does work and the assumption that the DH doesn\u0027t stash the BIGNUM somewhere longer-lived is quite solid.\n\nI think I agree the static-data BIGNUMs are less sketchy. It does rely on an unwritten assumption that DH doesn\u0027t try to mutate the BIGNUM, but that seems reasonable enough? Our threading rules plus the existence of get0 getters effectively forbid mutating the BIGNUM. (Though elsewhere in the SSL stack, we have played a little more loose with how X509-related set0 functions relate to the object\u0027s internal representation.)\n\nRe bn_wexpand, static-data would also break if you try to write to the BIGNUM without bn_wexpand. For instance, BN_div_word knows it never makes the magnitude bigger, so it scribbles into the BIGNUM directly. Though those are much more rare.\n\nI dunno, I don\u0027t feel very strongly about any of these. If you think it\u0027s fine, I\u0027m also okay with leaving either or both of these assumptions in.",
      "parentUuid": "24f3e270_9e67295f",
      "revId": "7ad7438a7eaf4201ce448fc74560f105f4039418",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "54a0d5e7_a95da855",
        "filename": "crypto/fipsmodule/self_check/self_check.c",
        "patchSetId": 3
      },
      "lineNbr": 787,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-01-20T19:33:51Z",
      "side": 1,
      "message": "This doesn\u0027t run DH_free in the error path. Not that it\u0027s expected to ever happen, but we seem to be handling the leaks in other error paths. We also don\u0027t handle freeing ffdhe2048_q if BN_set_word(\u0026ffdhe2048_g) fails, though that gets complicated with DH_set0_pqg taking ownership.",
      "revId": "7ad7438a7eaf4201ce448fc74560f105f4039418",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6c47507_d40d1146",
        "filename": "crypto/fipsmodule/self_check/self_check.c",
        "patchSetId": 3
      },
      "lineNbr": 789,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-01-20T19:33:51Z",
      "side": 1,
      "message": "Seems this is as much a no-op as the static BIGNUMs. ffdhe2048_q and ffdhe2048_g are the ones that need freeing, but DH_set0_* takes ownership of them.",
      "revId": "7ad7438a7eaf4201ce448fc74560f105f4039418",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}