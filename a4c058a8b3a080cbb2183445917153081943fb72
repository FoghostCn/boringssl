{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "002c66c0_ec4cf8b4",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-10-13T16:56:54Z",
      "side": 1,
      "message": "Given this bit, we might need to thread this through a couple more places to make it reliably visible. (Or maybe the above cases are good enough and we don\u0027t care?)\n\n(Unrelatedly, it is kind of silly how, if we BORINGSSL_NO_STATIC_INITIALIZER because there\u0027s nothing to initialize, we emit a pthread_once. Probably some work to be done in this area...)",
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a282736a_c3b0b619",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5070
      },
      "writtenOn": "2021-10-14T19:59:29Z",
      "side": 1,
      "message": "Are you suggesting that this function might be discarded by the linker? I was trying to avoid that. If there\u0027s a static initialiser then the linker will include it and, if not, someone else is on the hook for calling CRYPTO_library_init, which will include it. So I think it\u0027ll always be present, no?",
      "parentUuid": "002c66c0_ec4cf8b4",
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3090b5e0_2b3d4d04",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-10-14T20:12:51Z",
      "side": 1,
      "message": "If the condition in line 24 is false, then we know we don\u0027t have any assembly to run or CPUID-like data to gather. In that case, we don\u0027t actually emit the static initializer (no point). Since the caller didn\u0027t request BORINGSSL_NO_STATIC_INITIALIZER, they aren\u0027t on the hook for CRYPTO_library_init either.\n\n(BORINGSSL_NO_STATIC_INITIALIZER is also a huge pain for Chromium unit tests. A while ago I had vague ambitions to pthread_once it instead. But I never got around to doing that. :-) )",
      "parentUuid": "a282736a_c3b0b619",
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30e8f20b_3a8fdd3a",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-10-14T21:42:28Z",
      "side": 1,
      "message": "Ugh, sorry, should have actually read the code around this comment rather than just replying.\n\nNO_ASM is a bit of a worry. That seems like the sort of thing that people would set to make the build easier. PTAL at the next hack that came to mind.",
      "parentUuid": "3090b5e0_2b3d4d04",
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a004ebd1_80339c24",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-10-15T19:10:02Z",
      "side": 1,
      "message": "Hrm. Not sure that works either. If this .o file isn\u0027t referenced, it doesn\u0027t get pulled in.\n\n$ cat f.c\n#include \u003cstdint.h\u003e\n\nvoid f(void) {}\n\nconst uint8_t kBoringSSLBinaryTag[5]\n    __attribute__((section(\".rodata\")));\n\nconst uint8_t kBoringSSLBinaryTag[5] \u003d {\u0027h\u0027, \u0027e\u0027, \u0027l\u0027, \u0027l\u0027, \u0027o\u0027};\n\n$ cat main.c\nextern void f(void);\n\nint main() {\n#ifdef USE_F\n  f();\n#endif\n  return 0;\n}\n\n$ gcc -O3 -c f.c\n$ ar rcs f.a f.o\n$ gcc -O3 main.c f.a -o without-f\n$ gcc -O3 -DUSE_F main.c f.a -o with-f\n$ grep hello with-f without-f\ngrep: with-f: binary file matches\n\nInterestingly, if I told it to link f.c or f.o on the command-line, it *was* always pulled in. But a static library got trimmed.\n\nMaybe we just add links from a few key functions like SSL_CTX_new and x509_cb (x_x509.c) and call it good enough?",
      "parentUuid": "30e8f20b_3a8fdd3a",
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33915d59_84873f95",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5070
      },
      "writtenOn": "2021-10-19T23:22:36Z",
      "side": 1,
      "message": "\u003e Hrm. Not sure that works either. If this .o file isn\u0027t referenced, it doesn\u0027t get pulled in.\n\nUgh yes. Also, if you build everything with -fdata-sections then there is no primary .rodata section and my __attribute__ trick doesn\u0027t work either.\n\nHow about this: just reference it from OPENSSL_malloc. If you\u0027re using so little of BoringSSL that there\u0027s no allocation then you escape it, but so it goes.",
      "parentUuid": "a004ebd1_80339c24",
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35ed0a30_e57d4056",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-10-13T16:56:54Z",
      "side": 1,
      "message": "Probably worth specifying little-endian here. Good chance the folks consuming won\u0027t just read it with memcpy.",
      "range": {
        "startLine": 155,
        "startChar": 56,
        "endLine": 155,
        "endChar": 64
      },
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e6f9ac95_f0d38a61",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 5070
      },
      "writtenOn": "2021-10-14T19:59:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35ed0a30_e57d4056",
      "range": {
        "startLine": 155,
        "startChar": 56,
        "endLine": 155,
        "endChar": 64
      },
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d947d32_4a154c45",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-10-13T16:56:54Z",
      "side": 1,
      "message": "Nit: period",
      "range": {
        "startLine": 156,
        "startChar": 26,
        "endLine": 156,
        "endChar": 27
      },
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48a9901b_ef177e6c",
        "filename": "crypto/crypto.c",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 5070
      },
      "writtenOn": "2021-10-14T19:59:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d947d32_4a154c45",
      "range": {
        "startLine": 156,
        "startChar": 26,
        "endLine": 156,
        "endChar": 27
      },
      "revId": "a4c058a8b3a080cbb2183445917153081943fb72",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}