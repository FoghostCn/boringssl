{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "019f5fdb_1f20e569",
        "filename": "crypto/pkcs8/pkcs8_x509.c",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-04-01T18:22:42Z",
      "side": 1,
      "message": "This is incorrect, pass is permitted to be NULL, check the documentation of this function in openssl/pkcs8.h\n\nArguably yes if you pass in a different negative integer length this will\ndo bad things (however this is endemic through the OpenSSL API due to it\u0027s use of int instead of size_t for lengths in public API) I would not return an error in this case and allow things to continue,  I would call abort().",
      "revId": "fbe52bdfc8b019d39c8619b8bda132b0251467c0",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "631f8a39_aaa6e95f",
        "filename": "crypto/pkcs8/pkcs8_x509.c",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-04-03T01:36:20Z",
      "side": 1,
      "message": "I suspect I got this from here:\nhttps://github.com/openssl/openssl/blob/OpenSSL_1_1_1t/crypto/evp/evp_pbe.c#L104-L107\n\nSo OpenSSL\u0027s behavior is:\n- If `pass` is NULL, ignore the length\n- Otherwise, if `passlen` is -1, do the `strlen` thing.\n\nThe first mode is weird because it means (NULL, 128) will silently be treated as the empty slice, but functions don\u0027t typically do this. The `pass !\u003d NULL` check is kinda silly because, either way, we\u0027ll crash. So perhaps we should do just do:\n\n```\nif (pass_len_in \u003d\u003d -1) {\n  pass_len \u003d strlen(pass);\n} else {\n  pass_len \u003d (size_t)pass_len_in;\n}\n```\n\nAnd then it\u0027s just UB to pass in (NULL, -1) or (invalid ptr, -1) or (invalid ptr, 42).",
      "parentUuid": "019f5fdb_1f20e569",
      "revId": "fbe52bdfc8b019d39c8619b8bda132b0251467c0",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}