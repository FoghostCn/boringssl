{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bed13321_0ad11dd7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "My schedule this week\u0027s been rather a mess, but did an initial pass over the important files. (I haven\u0027t looked at most of the calls peppered into the library yet.)",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42934496_f5b3c569",
        "filename": "crypto/fipsmodule/service_indicator/internal.h",
        "patchSetId": 9
      },
      "lineNbr": 36,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "I\u0027m still confused by this... doesn\u0027t that imply that, rather than locking, we should have separate indicators for each algorithm? (So basically our existing counters.)\n\nOtherwise it seems hard to determine what counts as an \"unapproved primitive\" that would need to lock the state. For instance, Ed25519 is not an approved primitive, or even in the FIPS module, but internally calls SHA-512. Or maybe some random function happens to call SHA-512.",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07cc7986_00ad7044",
        "filename": "crypto/fipsmodule/service_indicator/internal.h",
        "patchSetId": 9
      },
      "lineNbr": 36,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "\u003e Otherwise it seems hard to determine what counts as an \"unapproved primitive\" that would need to lock the state.\n\nThe intent of the caller is the function that is called across the module boundary. So if the boundary-crossing call was \"SHA512\" then it\u0027s approved. But if it was \"ED25519_sign\" then the fact that SHA-512 was called within it doesn\u0027t count.\n\n(More practically, the point is not to be useful, the point is to meet the requirements. It mightn\u0027t make sense.)",
      "parentUuid": "42934496_f5b3c569",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53efea21_1b3db299",
        "filename": "crypto/fipsmodule/service_indicator/internal.h",
        "patchSetId": 9
      },
      "lineNbr": 36,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-20T20:04:02Z",
      "side": 1,
      "message": "I guess this means we need to be careful about every function inside the module that happens to call into another function that believes it\u0027s approved? I dunno, the requirements are pretty ridiculous, but it\u0027d be nice to have something we can vaguely understand the rules for. :-) (Well, also having a \"lock\" operation means a lot more `goto err` blocks, which is mildly annoying. But if that\u0027s the way to do it, okay.)\n\nHow does this apply to a function like EC_KEY_check_fips? It\u0027s not itself a cryptographic primitive, but it triggers ECDSA signatures under the hood. Or is the rule something like: \"Of the functions in the module that might be a primitive, there must be a way to tell if it was used in an approved manner. If this is not applicable for the function, it can do whatever it likes to the counter because there\u0027s nothing to query.\"",
      "parentUuid": "07cc7986_00ad7044",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72fbb840_60194597",
        "filename": "crypto/fipsmodule/service_indicator/internal.h",
        "patchSetId": 9
      },
      "lineNbr": 36,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-22T23:07:48Z",
      "side": 1,
      "message": "FIPS 140-3 IG 2.4.C are the rules, but fundamentally I think this is new and the rules will only be evident in time as NIST figures them out. That at least says that \"services that may perform non-security actions\" and \"services that use non-approved algorithms but do not claim security as specified in IG 2.4.A\" are excluded.\n\n`EC_KEY_check_fips` I think falls into \"services that use approved (including allowed) security functions or processes in an approved manner\". Also, it\u0027s clearly, by the name, a FIPS-related security function, no?\n\nI\u0027m not sure that we, sadly, can be very sure of the rules. It\u0027s ultimately at NIST\u0027s discretion and we have to guess a lot.",
      "parentUuid": "53efea21_1b3db299",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd35ac50_bc371d64",
        "filename": "crypto/fipsmodule/service_indicator/internal.h",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "FIPS_service_indicator_update_state?",
      "range": {
        "startLine": 47,
        "startChar": 37,
        "endLine": 47,
        "endChar": 72
      },
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10cba18a_78e5b9e6",
        "filename": "crypto/fipsmodule/service_indicator/internal.h",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "Done, thanks.",
      "parentUuid": "bd35ac50_bc371d64",
      "range": {
        "startLine": 47,
        "startChar": 37,
        "endLine": 47,
        "endChar": 72
      },
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "986a32bd_fd86d2c6",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 45,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "If a tree falls in a forest... :-)",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5014ba4_e2efbc85",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 94,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "Nit: This isn\u0027t a doc comment, just a regular comment, so I think this should also have pipes?",
      "range": {
        "startLine": 94,
        "startChar": 3,
        "endLine": 94,
        "endChar": 36
      },
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "124b3cf3_699885d0",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 94,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "Done. (And moved into the function so that it\u0027s clearly not a doc comment.)",
      "parentUuid": "c5014ba4_e2efbc85",
      "range": {
        "startLine": 94,
        "startChar": 3,
        "endLine": 94,
        "endChar": 36
      },
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "367f3276_a617956f",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 153,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "That is all of them, but I suppose explicitly checking is easier. :-P",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b40fb28_fc08304c",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 204,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "We don\u0027t support RSA-PSS SPKIs, so we can drop this one. (They\u0027re the ridiculous ones that describe a complex matcher on the PSS parameters.)",
      "range": {
        "startLine": 204,
        "startChar": 31,
        "endLine": 204,
        "endChar": 64
      },
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f86e40a_6840e71f",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 204,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b40fb28_fc08304c",
      "range": {
        "startLine": 204,
        "startChar": 31,
        "endLine": 204,
        "endChar": 64
      },
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cbbeb93_71333932",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 226,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "Do we need to check other PSS parameters, or do those not matter here? (The padding will tell you if it\u0027s PSS and then there are getters for PSS params.)",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef167275_b89f9632",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 226,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "Hmm, good point. ACVP is only testing saltLen\u003d\u003dhashLen. Have restricted things accordingly.",
      "parentUuid": "6cbbeb93_71333932",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e41acb8d_540146dd",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "Seems `break; default: break;` can all be dropped. Ditto below.",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51e2a63c_76157cb0",
        "filename": "crypto/fipsmodule/service_indicator/service_indicator.c",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e41acb8d_540146dd",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ae8ddd1_1ad9462e",
        "filename": "crypto/internal.h",
        "patchSetId": 9
      },
      "lineNbr": 651,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "This service indicator seems to be doing basically the same thing as the FIPS counters. Can we retire the counters in favor of this thing?",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "256c6eb6_1f30b95d",
        "filename": "crypto/internal.h",
        "patchSetId": 9
      },
      "lineNbr": 651,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "The service indicator shouldn\u0027t actually be used. I rather separate the mandatory interface from the interface that we want to support real users with, to be honest. Otherwise yet more needs pile into the service indicator and the Venn diagram gets tighter.",
      "parentUuid": "7ae8ddd1_1ad9462e",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94db1314_a499c413",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 45,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "`extern \"C++\" {` because sometimes people wrap our headers in `extern \"C\"` (they really shouldn\u0027t but...)\n\nAlso guard with BORINGSSL_NO_CXX because apparently we have some people who pull in our headers from C++ files, using toolchains that don\u0027t meet our C++ requirements.\n\nAlthough we should probably look over everyone doing this now and see if they actually still need it. I hope toolchains have moved forward by now.",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6e5ed834_9d9cc223",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 45,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94db1314_a499c413",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bfc6d06_15566217",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "If this is now C++, should we just use a proper enum?",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a730f471_6eabaf01",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 47,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8bfc6d06_15566217",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb81c761_0a1691bc",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-20T20:04:02Z",
      "side": 1,
      "message": "If it depends on C++ anyway, this could also just be a function that takes a lambda. Something like:\n\n```\ntemplate \u003ctypename Func\u003e\nauto CallServiceAndCheckApproved(int *out_approved, const Func \u0026f) {\n  FIPSIndicatorHelper helper(out_approved);\n  return f();\n}\n```",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86d8de0b_557b88c3",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-22T23:07:48Z",
      "side": 1,
      "message": "Yea, but it involves writing a lot of [] all through the tests. I don\u0027t actually want anyone to use this functions so don\u0027t want to skew too far from Amazon\u0027s API just yet.",
      "parentUuid": "eb81c761_0a1691bc",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74ad63fa_01f9dabe",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 62,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "To confirm, the aim is to make all this be public API?",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b95a3366_0aa51cc9",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 62,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "Nobody (except our tests) should ever call it, but the module has to expose the indicator.",
      "parentUuid": "74ad63fa_01f9dabe",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cef189a0_bd442dba",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 62,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-20T20:04:02Z",
      "side": 1,
      "message": "Are FIPS_service_indicator_before_call / FIPS_service_indicator_after_call sufficient to expose the indicator, or do we need the C++ wrapper to interpret it?\n\nIf the C++ wrapper isn\u0027t necessary, we could also just stick this into a test support (like a header in crypto/test), or just in the one file that uses it, and avoid making that into public API.",
      "parentUuid": "b95a3366_0aa51cc9",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c6f0557_9744d5b5",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 62,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-22T23:07:48Z",
      "side": 1,
      "message": "The answer is \"it\u0027s ambiguous\": this is still too new to know what NIST\u0027s interpretation will be. But I think the helper is needed. At least having it matches the IG wording much better and seems less likely to cause a problem.",
      "parentUuid": "cef189a0_bd442dba",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35db3450_a1e1fd0c",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 68,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-05-19T19:04:05Z",
      "side": 1,
      "message": "FIPSIndicatorHelper(const FIPSIndicatorHelper\u0026) \u003d delete;\nFIPSIndicatorHelper \u0026operator\u003d(const FIPSIndicatorHelper\u0026) \u003d delete;\n\nto make it non-copyable (and non-moveable).",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d2d2319_64369403",
        "filename": "include/openssl/service_indicator.h",
        "patchSetId": 9
      },
      "lineNbr": 68,
      "author": {
        "id": 5070
      },
      "writtenOn": "2022-05-20T00:11:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35db3450_a1e1fd0c",
      "revId": "253e94b02c51c7d169cf072ae674bdd789cf8110",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}