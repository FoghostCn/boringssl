{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2c63cd7f_44248bc5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-06-16T18:01:39Z",
      "side": 1,
      "message": "why not?\n\nLater: stuck on this question of what the point of this is!",
      "range": {
        "startLine": 10,
        "startChar": 53,
        "endLine": 11,
        "endChar": 62
      },
      "revId": "1c2f8d62e85fc339b5d093b13bbbbcbb695606e4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74fd6d19_d1c0fa7c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-06-16T20:24:00Z",
      "side": 1,
      "message": "Right now anything that goes in SNI implicitly runs through whatever the caller believes is valid for a DNS name. E.g. in a browser, it needs to successfully transit our URL parser and DNS stack. The public name goes straight from DNS response to the ClientHello. The application doesn\u0027t see it until we get to certificate verification. So this is a new capability, but whether it matters is another question...\n\nAt minimum, ECH needs to have opinions that the public_name is a DNS string and not some random other SAN type, since it ultimately directs the string into certificate verification. (Although it could say that while disavowing syntax checking.) Beyond that, occasionally people get very excited about being able to trick a local memcached into thinking some newline in the ClientHello is a command. I think that problem needs a more robust solution (e.g. a range of TCP ports the browser promises to stay away from), but checking syntax does avert some of that noise.\n\nUnfortunately, once you go down that rabbithole, the IP address thing comes up, and that\u0027s just a mess. :-(",
      "parentUuid": "2c63cd7f_44248bc5",
      "range": {
        "startLine": 10,
        "startChar": 53,
        "endLine": 11,
        "endChar": 62
      },
      "revId": "1c2f8d62e85fc339b5d093b13bbbbcbb695606e4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "89334be8_5ca0f9a0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-06-17T17:18:42Z",
      "side": 1,
      "message": "\u003e Occasionally people get very excited about being able to trick a local memcached into thinking some newline in the ClientHello is a command.\n\nAren\u0027t tickets a bit of a problem then? (I guess we only accept them from validated connections though.)\n\nI think the argument that I can buy is that public names won\u0027t be validated in the normal course of things but matter when you need to switch off ECH, which is probably a bad day for you already. When doing so you don\u0027t want to find that your public name was set to \"???\\n\" or something and you never noticed because it never mattered before.\n\nSo I can see an argument for wanting to guide the ecosystem a little. But the full IP-address parsing is quite a lot? On the other hand, I do bang on about the importance of major implementations being strict in order to guide the ecosystem.",
      "parentUuid": "74fd6d19_d1c0fa7c",
      "range": {
        "startLine": 10,
        "startChar": 53,
        "endLine": 11,
        "endChar": 62
      },
      "revId": "1c2f8d62e85fc339b5d093b13bbbbcbb695606e4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f84b2a8_4e2cf0f4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-06-17T17:46:04Z",
      "side": 1,
      "message": "\u003e Aren\u0027t tickets a bit of a problem then? (I guess we only accept them from validated connections though.)\n\nYup! In fact the original memcached complaint was from tickets + DNS rebinding. :-) I tugged on some folks recently to get a coherent answer as to whether ad-hoc wire image control (e.g. partitioning session cache by public/private IPs) or salvaging TCP port numbers was the way to go and was unsuccessful. So we\u0027re currently in a mess with no one committing to anything.\n\nWith no one committing to salving TCP port numbers, I suspect ad-hoc wire image control will be the path of least resistance since it\u0027s easy to layer on hacks that avoid most of the compat cost. :-( But we also don\u0027t partition the session cache by IP space, so it is arguably moot until/unless we change our mind there.\n\n\u003e I think the argument that I can buy is that public names won\u0027t be validated in the normal course of things but matter when you need to switch off ECH, which is probably a bad day for you already. When doing so you don\u0027t want to find that your public name was set to \"???\\n\" or something and you never noticed because it never mattered before.\n\nYeah, although probably you\u0027d want to just ignore ECH for a small %-age of traffic to make sure the whole thing works. A valid public name you don\u0027t own isn\u0027t useful either. :-)\n\n\u003e But the full IP-address parsing is quite a lot? On the other hand, I do bang on about the importance of major implementations being strict in order to guide the ecosystem.\n\nPretty much my thoughts. There was a proposal for a MUST on the IP check. Someone objected the WHATWG algorithm is a disaster and didn\u0027t want to implement it, so the proposal was downgraded to a SHOULD. That seems like the worst of both worlds, so I suggested we move IPs to the application\u0027s certificate verification hook, since the application presumably already knows what it believes is the valid space of DNS names. But the person who already implemented it didn\u0027t want to drop it, so we ended up with the actual binding requirement at cert verify but there\u0027s still this goofy SHOULD. \n\nAnd then, with the SHOULD, well, okay it\u0027s just code so I guess we like to err on the strict side when it\u0027s a question. (I\u0027m happy to drop it though. It\u0027s pretty awful.)",
      "parentUuid": "89334be8_5ca0f9a0",
      "range": {
        "startLine": 10,
        "startChar": 53,
        "endLine": 11,
        "endChar": 62
      },
      "revId": "1c2f8d62e85fc339b5d093b13bbbbcbb695606e4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a50709ce_fc87fef1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-06-16T18:01:39Z",
      "side": 1,
      "message": "did you mean \"include\"? I think DNS syntax does exclude IPv4 literals because labels can\u0027t start with a digit?\n\nLater: ok, DNS started off by saying that leading digits were bad (https://datatracker.ietf.org/doc/html/rfc1035#section-2.3.1) but I guess updated that (https://datatracker.ietf.org/doc/html/rfc5890#section-2.3.1).",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 7
      },
      "revId": "1c2f8d62e85fc339b5d093b13bbbbcbb695606e4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4181132_0677327d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-06-16T20:24:00Z",
      "side": 1,
      "message": "Yeah, I\u0027ve definitely seen DNS names with leading digits, sadly. If they kept that rule, it would have avoided a lot of fuss!\n\nAlthough maybe we should round the WHATWG rules up to the RFC1035 rules and just check for leading digits, rather than running that entire ridiculous algorithm...",
      "parentUuid": "a50709ce_fc87fef1",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 7
      },
      "revId": "1c2f8d62e85fc339b5d093b13bbbbcbb695606e4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}