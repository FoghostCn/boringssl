{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5cfc5469_4b862ee8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-01-06T19:53:09Z",
      "side": 1,
      "message": "(Probably going to pause here and check that the internal roll is happy before landing any more.)",
      "revId": "d815a5df9287e2f2bf3da5487d7cffae0cbac0c8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "455b3eb6_8cdca24f",
        "filename": "util/fipstools/delocate/delocate.peg",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-01-08T18:11:45Z",
      "side": 1,
      "message": "Nit: Maybe worth wrapping this one now that it\u0027s gotten so long and probably we\u0027ll end up adding to it. Perhaps something like:\n\nRegisterOrConstant \u003c- ((\u0027%\u0027[[A-Z]][[A-Z0-9]]*) /\n                       (\u0027$\u0027? ((Offset Offset) / Offset)) /\n                       (\u0027#\u0027 Offset (\u0027*\u0027 [0-9]+ (\u0027-\u0027 [0-9] [0-9]*)?)? ) /\n                       (\u0027#\u0027 \u0027~\u0027? \u0027(\u0027 [0-9] WS? \"\u003c\u003c\" WS? [0-9] \u0027)\u0027 ) /\n                       ARMRegister) ![fb:(+\\-]",
      "revId": "d815a5df9287e2f2bf3da5487d7cffae0cbac0c8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ed20d28_0d6ce284",
        "filename": "util/fipstools/delocate/delocate.peg",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-01-08T18:11:45Z",
      "side": 1,
      "message": "Two digits is possible if referring a single element of a vector by bytes (16 bytes in a vector reg). So something like v0.b[15].\n\nAlso, if we optionally want to be tighter, I think we\u0027ll never have both numbers before [bsdhq] or square brackets after and never both. I.e. v0.16b vs v0.8b refers to all 16 vs 8 bytes of v0, and v0.b[15] refers to byte 15 of v0, but v0.16b[15] doesn\u0027t mean anything.\n\nI would have said v0.b also doesn\u0027t mean anything, but I see single structure forms of ld{1-4} has some extra unique syntax. Lovely.\n\nhttps://developer.arm.com/documentation/dui0802/b/A64-SIMD-Vector-Instructions/LD1--vector--single-structure-\nhttps://developer.arm.com/documentation/dui0802/b/A64-SIMD-Vector-Instructions/LD2--vector--single-structure-\nhttps://developer.arm.com/documentation/dui0802/b/A64-SIMD-Vector-Instructions/LD3--vector--single-structure-\nhttps://developer.arm.com/documentation/dui0802/b/A64-SIMD-Vector-Instructions/LD4--vector--single-structure-",
      "range": {
        "startLine": 72,
        "startChar": 63,
        "endLine": 72,
        "endChar": 68
      },
      "revId": "d815a5df9287e2f2bf3da5487d7cffae0cbac0c8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}