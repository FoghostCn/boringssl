{
  "comments": [
    {
      "key": {
        "uuid": "9c581443_517dc64d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5535
      },
      "writtenOn": "2015-02-04T09:17:05Z",
      "side": 1,
      "message": "With respect to x509_trs.c, it doesn\u0027t free because none of them have X509_TRUST_DYNAMIC set.\n\nThe statically allocated members can have X509_TRUST_DYNAMIC_NAME set. You can call X509_TRUST_add() on existing entries including the statically allocated ones.  It will not set X509_TRUST_DYNAMIC in this case so it won\u0027t be freed, but it will set X509_TRUST_DYNAMIC_NAME.",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17479f3f_72c6f038",
        "filename": "crypto/asn1/a_int.c",
        "patchSetId": 3
      },
      "lineNbr": 161,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-02-03T19:32:17Z",
      "side": 1,
      "message": "Superfluous parens in conditionals are the local style, but we\u0027re trying to weed it out :)\n\nAlso, why \u003e 1, not \u003e 0?",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c581443_dc5b0d3a",
        "filename": "crypto/asn1/a_object.c",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 5535
      },
      "writtenOn": "2015-02-04T09:17:05Z",
      "side": 1,
      "message": "I may be in the minority here, but I avoid initializing data as a response to output from a tool like Clang\u0027s analyzer.  Don\u0027t get me wrong - I like the tool.  I think it tells you where to look to find the underlying issue though.  Or it tells you about bugs/limitations in the tool.",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17479f3f_d28244e0",
        "filename": "crypto/asn1/a_object.c",
        "patchSetId": 3
      },
      "lineNbr": 185,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-02-03T19:32:17Z",
      "side": 1,
      "message": "We do stick to using OPENSSL_malloc still, even though they are wired into malloc/free. So I think this would be OPENSSL_malloc + memset.",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c581443_1c8765f2",
        "filename": "crypto/asn1/a_object.c",
        "patchSetId": 3
      },
      "lineNbr": 211,
      "author": {
        "id": 5535
      },
      "writtenOn": "2015-02-04T09:17:05Z",
      "side": 1,
      "message": "I don\u0027t see how initializing tmp is fixing a bug on this line.\n\ni is initialized on line 174.  It\u0027s only incremented when setting \u0027out\u0027 elements.  It\u0027s only decremented in the above while loop getting \u0027out\u0027 elements.  The values for the tmp elements are either from a function call or a variable that was defined.  Where would the uninitialized tmp element come from on line 211?",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17479f3f_1254ccba",
        "filename": "crypto/asn1/tasn_new.c",
        "patchSetId": 3
      },
      "lineNbr": 332,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-02-03T19:32:17Z",
      "side": 1,
      "message": "*/ on the end of the previous line.",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c581443_7161eaa1",
        "filename": "crypto/asn1/tasn_new.c",
        "patchSetId": 3
      },
      "lineNbr": 333,
      "author": {
        "id": 5535
      },
      "writtenOn": "2015-02-04T09:17:05Z",
      "side": 1,
      "message": "This function is part of the public API.  asn1_item_ex_combine_new() is not necessarily the only caller.",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17479f3f_524e542a",
        "filename": "crypto/asn1/tasn_new.c",
        "patchSetId": 3
      },
      "lineNbr": 337,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-02-03T19:32:17Z",
      "side": 1,
      "message": "ditto.",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17479f3f_32c8e825",
        "filename": "crypto/asn1/tasn_new.c",
        "patchSetId": 3
      },
      "lineNbr": 384,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-02-03T19:32:17Z",
      "side": 1,
      "message": "we don\u0027t want superfluous parens, even though it is the local style.",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17479f3f_b2e218a4",
        "filename": "crypto/err/err.c",
        "patchSetId": 3
      },
      "lineNbr": 629,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-02-03T19:32:17Z",
      "side": 1,
      "message": "Already taken care of by Brian.",
      "revId": "a980a1e1392caaf1199f78c2d41d4ed611df22ab",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}