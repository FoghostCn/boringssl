{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2842f864_2f01b9cc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 16706
      },
      "writtenOn": "2023-08-03T03:53:45Z",
      "side": 1,
      "message": "Necessary foundation for change 62146, which resolves bug 636. Thanks for your time. I\u0027ll be thrilled if this lands!",
      "revId": "5578bffb115874618c3eab50fa16874b7ad76940",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ae9b986_e3b381c4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-07T21:34:26Z",
      "side": 1,
      "message": "We have a number of downstream consumers that will have a very hard time with the API approach. The Rust build.rs ecosystem is, unfortunately, a complete disaster w.r.t. reproducibility and hermeticity. And, for better or worse, a lot of folks we support have decided to [reject build.rs](https://security.googleblog.com/2021/05/integrating-rust-into-android-open.html) for that reason.\n\nThe goal here was to fix the types of the macro constants, right? Perhaps we can simply suffix those constants with `ul`? Is that enough to for bindgen to figure out the correct type, or is that a bindgen deficiency we\u0027d have to correct. In general, we prefer in-source solutions over build logic on the side.",
      "revId": "5578bffb115874618c3eab50fa16874b7ad76940",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8359e15_58ca9696",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-11-23T19:02:27Z",
      "side": 1,
      "message": "So now that we\u0027ve decided on basically saying \"thou shalt run build.rs or deal with the equivalents in your custom build\" - Do we want to consider doing something like this?",
      "parentUuid": "2842f864_2f01b9cc",
      "revId": "5578bffb115874618c3eab50fa16874b7ad76940",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1519531b_c54a3c00",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-03-17T02:08:00Z",
      "side": 1,
      "message": "We ended up solving this a different way, and the conclusion so far seems to be that the build.rs API would still be a problem for us.\n\nClosing this CL.",
      "parentUuid": "c8359e15_58ca9696",
      "revId": "5578bffb115874618c3eab50fa16874b7ad76940",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "5578bffb115874618c3eab50fa16874b7ad76940",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "5578bffb115874618c3eab50fa16874b7ad76940",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}