{
  "comments": [
    {
      "key": {
        "uuid": "d3d44d30_962cecd2",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5810
      },
      "writtenOn": "2015-06-30T19:27:57Z",
      "side": 1,
      "message": "don\u0027t you need to hold global_lock here?",
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3386892e_290c8d77",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-06-30T19:40:15Z",
      "side": 1,
      "message": "I wanted to avoid touching threading APIs just in case bouncing on a pthread lock left it in a state that wasn\u0027t amenable to fork without exec. Is that guaranteed to be safe?",
      "parentUuid": "d3d44d30_962cecd2",
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3ab6d9c_fedb015e",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-06-30T20:46:33Z",
      "side": 1,
      "message": "(Added a comment to clarify this.)",
      "parentUuid": "3386892e_290c8d77",
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3d44d30_f94793f2",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-30T21:23:11Z",
      "side": 1,
      "message": "The lock does need to be taken here.\n\nIf someone forked while multithreaded and the lock gets stuck, well, that happens. You can\u0027t fork when multithreaded.",
      "parentUuid": "d3ab6d9c_fedb015e",
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3386892e_e97435ad",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-06-30T21:28:47Z",
      "side": 1,
      "message": "Right, but is:\n\n  pthread_rwlock_wrlock(lock);\n  pthread_rwlock_unlock(lock);\n  fork();\n  pthread_rwlock_wrlock(lock);\n  pthread_rwlock_unlock(lock);\n\ngoing to cause problems? I dunno if we have to care about the locks secretly having reference to some kernel object that doesn\u0027t get copied across fork().",
      "parentUuid": "d3d44d30_f94793f2",
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3d44d30_59d0c76c",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-30T21:33:41Z",
      "side": 1,
      "message": "If it does cause problems then I think lots of things would break. malloc takes a lock, for example.",
      "parentUuid": "3386892e_e97435ad",
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3386892e_89101957",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-06-30T21:39:14Z",
      "side": 1,
      "message": "Good point. Taking the lock and revising the documentation.",
      "parentUuid": "d3d44d30_59d0c76c",
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3d44d30_f62d60d1",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 5810
      },
      "writtenOn": "2015-06-30T19:27:57Z",
      "side": 1,
      "message": "Unrelated: do you always use abort() for critical things like this?\n\nIt may be worth having your own very conservative \"NoNoNoCrashNow()\" function along the lines of:\n\nvoid NoNoNoCrashNow() {\n\n  abort(); // might not work because of signal handlers issues\n\n  if (*(volatile char*)0) {\n  }\n  // same\n\n  for(;;) {\n    syscall(SYS_exit_group, 1);  // might not work because of seccomp or other sandboxing mechanism\n  }  // should at least loop forever in all cases (syscall().. should never be considered \"noreturn\" by the compiler)\n\n}",
      "range": {
        "startLine": 128,
        "startChar": 9,
        "endLine": 128,
        "endChar": 12
      },
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3386892e_4911c18a",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-06-30T19:40:15Z",
      "side": 1,
      "message": "The rest of it\u0027s also just abort(). Doing that to signal handlers and abort seems rather bad manners. :-) Since this is already an issue elsewhere, it probably should be resolved separately so we can fix it in one go. (Adam, thoughts?)",
      "parentUuid": "d3d44d30_f62d60d1",
      "range": {
        "startLine": 128,
        "startChar": 9,
        "endLine": 128,
        "endChar": 12
      },
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3d44d30_99465ff4",
        "filename": "crypto/rand/urandom.c",
        "patchSetId": 2
      },
      "lineNbr": 128,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-06-30T21:23:11Z",
      "side": 1,
      "message": "Yea, don\u0027t address this in this CL. We could do an OPENSSL_abort but has anyone actually observed abort not working in practice? We only really have to worry about Google code, after all.",
      "parentUuid": "3386892e_4911c18a",
      "range": {
        "startLine": 128,
        "startChar": 9,
        "endLine": 128,
        "endChar": 12
      },
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3d44d30_f6db205e",
        "filename": "include/openssl/rand.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 5810
      },
      "writtenOn": "2015-06-30T19:27:57Z",
      "side": 1,
      "message": "Unimportant nit: this feels a little like an implementation detail. I would phrase it more along the lines of \"The caller retains ownership of |fd| and is at liberty to close it at any time.\"",
      "range": {
        "startLine": 40,
        "startChar": 52,
        "endLine": 40,
        "endChar": 53
      },
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3386892e_69168585",
        "filename": "include/openssl/rand.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-06-30T19:40:15Z",
      "side": 1,
      "message": "Done. Also added \"a copy of\" to the first sentence.",
      "parentUuid": "d3d44d30_f6db205e",
      "range": {
        "startLine": 40,
        "startChar": 52,
        "endLine": 40,
        "endChar": 53
      },
      "revId": "f489492ef16983af9fed9a7aa063fb49ec364ea9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}