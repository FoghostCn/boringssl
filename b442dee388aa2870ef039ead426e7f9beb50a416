{
  "comments": [
    {
      "key": {
        "uuid": "f730aaea_f5b82a0f",
        "filename": "crypto/bio/buffer.c",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-12-21T00:11:46Z",
      "side": 0,
      "message": "Does this seem reasonable? I can also add a buffer-specific hook, but it seems chaining of BIO_[w]pending is rarely used and basically nonsense, so I figured I\u0027d just change it here.",
      "revId": "b442dee388aa2870ef039ead426e7f9beb50a416",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_bdaaa9b9",
        "filename": "crypto/bio/buffer.c",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-12-21T19:38:01Z",
      "side": 0,
      "message": "I could see an argument for always adding the next_bio\u0027s value, but testing only on zero doesn\u0027t make much sense. (Although, as you note, the base64 BIO reports the number of base64 chars for BIO_pending, not the number of bytes that will result. So maybe it\u0027s always been a bit of a zero vs non-zero thing and thus the current behaviour reflects that.)\n\nHaving said that, /not/ chaining at all isn\u0027t obviously more correct. At least for BIO_pending, a reasonable meaning might be \"can I read bytes without doing I/O at this point?\". But I\u0027m not sure what the interpretation without chaining would be.",
      "parentUuid": "f730aaea_f5b82a0f",
      "revId": "b442dee388aa2870ef039ead426e7f9beb50a416",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f730aaea_5b4ccfe2",
        "filename": "crypto/bio/buffer.c",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-12-21T19:59:42Z",
      "side": 0,
      "message": "\"can I read bytes without doing I/O at this point?\" is tricky to answer in general. For something like the SSL BIO, you need to actually consume the bytes in downstream BIOs to see if you\u0027ve got a full record in there. I was thinking the meaning would be something like \"how many bytes are ready for read/pending for write in *this* BIO\", in a world where the consumer was very aware of the entire BIO chain, having set it all up. This aligns with what DTLS wants.\n\nI\u0027m happy to add a separate BIO_get_write_buffer_size function though. Or I can just disable the new tests on DTLS until we\u0027ve gotten the buffer BIO out of DTLS\u0027s path, which needs to happen anyway.",
      "parentUuid": "77b2fac6_bdaaa9b9",
      "revId": "b442dee388aa2870ef039ead426e7f9beb50a416",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b2fac6_e3eac2bd",
        "filename": "crypto/bio/buffer.c",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 5005
      },
      "writtenOn": "2016-12-21T23:07:00Z",
      "side": 0,
      "message": "There are a lot of uses of BIO_pending and quite a lot of uses of BIO_push. There don\u0027t seem to be many users of the combination however. But your SSL example is a good one to show that the current answer really doesn\u0027t make a lot of sense.\n\nSo let\u0027s try this and see how much breaks in the new year.",
      "parentUuid": "f730aaea_5b4ccfe2",
      "revId": "b442dee388aa2870ef039ead426e7f9beb50a416",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}