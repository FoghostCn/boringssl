{
  "comments": [
    {
      "key": {
        "uuid": "a8246fcc_9b317032",
        "filename": "ssl/test/bssl_shim.cc",
        "patchSetId": 6
      },
      "lineNbr": 1880,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-04-11T23:57:53Z",
      "side": 1,
      "message": "Something that might be simpler:\n\nRather then WriteHandoff and WriteHandback, add SendHandoff and SetHandback functions that just stash them in a std::vector or whatever. Then you can assemble it all together in one CBB and write it in one go.",
      "revId": "e99be7bfb240371c742372aaf34999ac9d48bca8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "723e15a8_969e7fe4",
        "filename": "ssl/test/bssl_shim.cc",
        "patchSetId": 6
      },
      "lineNbr": 1894,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-04-11T23:57:53Z",
      "side": 1,
      "message": "Nit: fp gets leaked in a lot of error paths here.",
      "range": {
        "startLine": 1894,
        "startChar": 4,
        "endLine": 1894,
        "endChar": 8
      },
      "revId": "e99be7bfb240371c742372aaf34999ac9d48bca8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b4b5668_85385727",
        "filename": "ssl/test/bssl_shim.cc",
        "patchSetId": 6
      },
      "lineNbr": 1914,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-04-11T23:57:53Z",
      "side": 1,
      "message": "asserts will get compiled out in release mode. You can do something like this, perhaps:\n\nif (!Write(kDataTag, nullptr)) {\n  fprintf(stderr, \"Blah blah text\\n\");\n  abort();\n}\n\nOr the code around DoConnection could be:\n\n   bool ok \u003d DoConnection(...);\n   if (!writer.Write(...)) {\n     // blah\n   }\n   if (!ok) {\n      fprintf(stderr, \"Connection %d failed.\\n\", i + 1);\n      ERR_print_errors_fp(stderr);\n      return 1;\n    }",
      "revId": "e99be7bfb240371c742372aaf34999ac9d48bca8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59d2f571_50bb1553",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 6
      },
      "lineNbr": 495,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-04-11T23:57:53Z",
      "side": 1,
      "message": "(FWIW, I think people typically just defer f.Close() and not worry about the error too much.)",
      "revId": "e99be7bfb240371c742372aaf34999ac9d48bca8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bdbfffc_d32fe91e",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 6
      },
      "lineNbr": 581,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-04-11T23:57:53Z",
      "side": 1,
      "message": "Ah, I see. This code was relying on some vague synchronization with the shim writing the settings before doing anything, and each of the tests requiring *something* from the shim. And rather concatenation should wait until the shim ends.\n\nWDYT about this version: doExchange no longer gets passed transcriptPrefix or num and just returns the transcript output. Unfortunately, that\u0027s probably a nuisance to do without making it an output parameter. (We could use named returns, but then all the error returns need to get redone.) So perhaps it takes an output parameter, outTranscript *[]byte, and this defer just does *outTranscript \u003d connDebug.Transcript().\n\nThen the doExchange calls can just gather them into a [][]byte and we append to the shim halves with the existing writeTranscript. That should avoid stuff like the os.IsNotExist bit.\n\nThoughts? (If this is actually cleaner, that\u0027s fine too. It just seems weird to have Go return data to Go in a file.)",
      "revId": "e99be7bfb240371c742372aaf34999ac9d48bca8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    }
  ]
}