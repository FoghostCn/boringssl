{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "abc0e361_73f83d0a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-09-30T14:11:59Z",
      "side": 1,
      "message": "Once this is reviewed/merged, I have a corresponding PR for rust-openssl to take advantage of this. The end goal is reduced maintenance burden and fewer `cfg(boringssl)` checks.",
      "revId": "bb3c73eb3d74c58db04f74ebafe946e635a52d4a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96dd9701_84fc8946",
        "filename": "rust/bssl-sys/Cargo.toml",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-10-04T17:19:23Z",
      "side": 1,
      "message": "What exactly are the implications of this attribute, other than working around a Cargo deficiency?\n\nThis talks about linking a native library, but we do not link a `libbssl.a`\nhttps://doc.rust-lang.org/cargo/reference/manifest.html#the-links-field\n\nThen this says links forces there to be exactly one copy of bssl-sys. This sounds... completely incoherent. This crate doesn\u0027t bundle a copy of BoringSSL. It doesn\u0027t seem like there are any actual consequences to having two of them, beyond the usual size consequences of duplicating any of them.\nhttps://doc.rust-lang.org/cargo/reference/build-scripts.html#the-links-manifest-key\n\nWhat in the world is Cargo doing here?",
      "revId": "bb3c73eb3d74c58db04f74ebafe946e635a52d4a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c621cc8_3744dcfd",
        "filename": "rust/bssl-sys/Cargo.toml",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-10-04T23:58:39Z",
      "side": 1,
      "message": "As far as I know, the implications of having the links key are:\n\n1. It will error if there are two separate crates with the same links value (n.b., this includes two different versions of bssl-sys) in the same compilation graph.\n2. It results in `DEP_${links}_${key}` env vars being passed down to dependent crates.\n\nI do not know why they chose to connect (2) with links, when \"the ability to pass configuration to another library\" seems entirely orthogonal to me.\n\nIf you\u0027d prefer not to do the `links` thing, I can file an issue with cargo to request an alternate mechanism. Then we could either wait until that\u0027s available, or land this and then remove once it\u0027s available.",
      "parentUuid": "96dd9701_84fc8946",
      "revId": "bb3c73eb3d74c58db04f74ebafe946e635a52d4a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41a35c0c_ba577b81",
        "filename": "rust/bssl-sys/Cargo.toml",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-10-05T14:17:46Z",
      "side": 1,
      "message": "Thinking about this some more, I think the single-copy restriction is fine. We expect bssl-sys to be 1:1 with BoringSSL itself, and BoringSSL itself cannot be multiply-linked because you cannot multiply-link C libraries. So the Cargo limitation is fine here, but for the wrong reasons.\n\nThere\u0027s this bug already https://github.com/rust-lang/cargo/issues/3544, which is about just this deficiency. So maybe update the comment to mention this is working around that bug?\n\nMuch as I would like to get someone to fix that silly limitation. ðŸ˜Š Though, really, rather than env vars, the bssl crate should be able to publish cfg values for the downstream crate to import. Then we don\u0027t need this build.rs mess in the first place. (I will point out that C has hard this capability since forever...)\n\n...actually, a thought: instead of cfgs, could we do something dumb with macros? Like instead of exporting a crate `foo`, a crate could export an `ifdef!` macro such that `ifdef!(token)` will either delete the contents or include them if `token` applies to the version of the crate you\u0027re linking? Pretty gross though. And it looks like you can\u0027t do it with attribute syntax unless it\u0027s a proc macro, which sounds a bit extreme. (This language is so incomplete...)",
      "parentUuid": "5c621cc8_3744dcfd",
      "revId": "bb3c73eb3d74c58db04f74ebafe946e635a52d4a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "494007e4_246a4113",
        "filename": "rust/bssl-sys/Cargo.toml",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-10-06T00:24:25Z",
      "side": 1,
      "message": "Even if ifdef worked as an attribute macro, I don\u0027t think there\u0027d be a way for rust-openssl to use it to map these values into their own cfgs (which is my motivation).\n\nI\u0027ll leave a comment on the cargo bug to see if I can get it moving ago.\n\n(Also, crap: I took my mac to the apple store today for a repair, and I just realized that my patch to rust-openssl to take advantage of this is the _one_ thing that I don\u0027t have pushed anywhere. Ah well, it only took an hour to write)",
      "parentUuid": "41a35c0c_ba577b81",
      "revId": "bb3c73eb3d74c58db04f74ebafe946e635a52d4a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0124c1c_11b1446a",
        "filename": "rust/bssl-sys/build.rs",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-10-04T17:19:23Z",
      "side": 1,
      "message": "include/openssl/opensslconf.h",
      "range": {
        "startLine": 20,
        "startChar": 33,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "bb3c73eb3d74c58db04f74ebafe946e635a52d4a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3be249a_3aa050a9",
        "filename": "rust/bssl-sys/build.rs",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-10-04T23:58:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0124c1c_11b1446a",
      "range": {
        "startLine": 20,
        "startChar": 33,
        "endLine": 20,
        "endChar": 54
      },
      "revId": "bb3c73eb3d74c58db04f74ebafe946e635a52d4a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}