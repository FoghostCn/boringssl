{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "adec2331_79c0e751",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-03-15T11:58:09Z",
      "side": 1,
      "message": "This was mostly obviated by a different rust-openssl PR.\n\nAre you interseted in me trimming this down to use the static inline stuff, or just close this out?",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68ef625f_ddef5cc4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-03-15T17:33:16Z",
      "side": 1,
      "message": "Sorry about the late response. The static inline stuff definitely sounds good. The main constraint right now is that deleting rust_wrapper.h and rust_wrapper.c will break Android unless we update their build with it. So I\u0027m thinking I\u0027ll:\n\n1) Wait for @prb@google.com to get the latest update through in https://android-review.googlesource.com/c/platform/external/boringssl/+/2480396\n\n2) Replicate this change in the Android build and make sure it works.\n\n3) If all clears, land this.",
      "parentUuid": "adec2331_79c0e751",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a874e47_da200e6e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 9619
      },
      "writtenOn": "2023-03-15T17:35:32Z",
      "side": 1,
      "message": "SGTM",
      "parentUuid": "68ef625f_ddef5cc4",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "69bee71a_1d50e5ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-03-15T17:37:07Z",
      "side": 1,
      "message": "Also just checked and Android\u0027s bindgen is indeed new enough, so hopefully this\u0027ll be straightforward:\nhttps://cs.android.com/android/platform/superproject/+/master:external/rust/crates/bindgen/lib.rs?q\u003dwrap-static-fns",
      "parentUuid": "7a874e47_da200e6e",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfb38634_0016d3dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-03-15T21:11:49Z",
      "side": 1,
      "message": "I\u0027ll rebase this to only contain teh relevant parts.",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99cdc880_4ad2346b",
        "filename": "rust/CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-03-15T17:33:16Z",
      "side": 1,
      "message": "target_include_directories(rust_wrapper PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})\n\nThat way it\u0027ll work for any toolchain, though I doubt MSVC + Rust works right now. :-)",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3677a7e9_56707c0d",
        "filename": "rust/CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-03-15T21:11:49Z",
      "side": 1,
      "message": "This is depressingly, not equivilant. `target_include_directories` is the equivilant of `-I`, that is the include search path. `-include` is basically a \"pretend I wrote #include at the top of the file\"",
      "parentUuid": "99cdc880_4ad2346b",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba436ef9_2aba2238",
        "filename": "rust/CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-03-15T21:30:43Z",
      "side": 1,
      "message": "Ah I see. Went and looked at the output. I don\u0027t think this bindgen feature can be considered working yet.\n\n- First, `bindgen` should output a file that includes the necessary includes, instead of relying on build goop to inject it. Otherwise this output cannot be used on C toolchains that don\u0027t use GCC-style command-line arguments.\n\n- Second, when I try to build it, I get a pile of warnings like this:\n\n```\n[...]/rust/wrapper.c:1468:38: error: old-style function definition [-Werror\u003dold-style-definition]\n 1468 | struct stack_st_ACCESS_DESCRIPTION * sk_ACCESS_DESCRIPTION_new_null__extern() { return sk_ACCESS_DESCRIPTION_new_null(); }\n      |                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n```\n\nThe way to say an empty parameter list in C is `(void)`, not `()`. Using empty is actually the old-style K\u0026R syntax.\n\nSeems `bindgen` still has some work to do before we can remove the need for `bssl-sys`, sadly.",
      "parentUuid": "3677a7e9_56707c0d",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "672fab20_64d86467",
        "filename": "rust/CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-03-15T21:39:32Z",
      "side": 1,
      "message": "Interesting, it does render with `(void)` on the previous line:\n\nstruct stack_st_ACCESS_DESCRIPTION * sk_ACCESS_DESCRIPTION_new_null__extern(void) asm(\"sk_ACCESS_DESCRIPTION_new_null__extern\");\nstruct stack_st_ACCESS_DESCRIPTION * sk_ACCESS_DESCRIPTION_new_null__extern() { return sk_ACCESS_DESCRIPTION_new_null(); }\n\n\nI\u0027ll file a bug: https://github.com/rust-lang/rust-bindgen/issues/2442",
      "parentUuid": "ba436ef9_2aba2238",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9e8b2c45_c65a4a41",
        "filename": "rust/CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-03-15T21:45:09Z",
      "side": 1,
      "message": "Ah yeah, both should be `(void)`. I\u0027m not sure if it makes a real difference in the definition, unlike the declaration, but without `(void)` in the definition, it\u0027s technically a K\u0026R-style function definition. Anyway, GCC warns without it and I think they are right to do so.\n\nInterestingly, it looks like C23 is finally fixing this and making `()` mean `(void)`.\nhttps://en.cppreference.com/w/c/language/function_definition\nhttps://en.cppreference.com/w/c/language/function_declaration\n\nBut the world\u0027s not C23 yet.",
      "parentUuid": "672fab20_64d86467",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14825709_c0115bf2",
        "filename": "rust/CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-03-15T21:56:45Z",
      "side": 1,
      "message": "The `asm(\"...\")` in the declarations seems also a bad idea. What was the reason for that? Won\u0027t that break also break with non-GCC/Clang compilers? Also it seems to just generally risk mishaps on platforms that mangle names interestingly. (E.g. Apple platforms prefix C symbols with underscores.)\n\nI suppose bindgen already depends on libclang, but considering Rust and bindgen already inherently needs to know the platform\u0027s name-mangling story for C to support `extern \"C\"`, what is the point of doing something else?",
      "parentUuid": "9e8b2c45_c65a4a41",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5b9f791_856857e7",
        "filename": "rust/CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-03-16T03:22:55Z",
      "side": 1,
      "message": "I absolutely do not know why they chose that approach :-) Their CI tests on both Ubuntu and macOS, so at a minimum it seems to handle both platform\u0027s ABIs.",
      "parentUuid": "14825709_c0115bf2",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5449207_872c2334",
        "filename": "rust/CMakeLists.txt",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-03-16T16:10:53Z",
      "side": 1,
      "message": "I filed https://github.com/rust-lang/rust-bindgen/issues/2445\n\nObviously, testing on just Ubuntu and macOS isn\u0027t enough. It omits a significant desktop platform that tends to be quite in toolchain and ABI from more POSIX-y ones. :-P",
      "parentUuid": "f5b9f791_856857e7",
      "revId": "d5f74dd70cb738555f4b5870bdaf5f1a7dc39243",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}