{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e5490432_32fc9ed9",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1158,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-03-22T11:17:15Z",
      "side": 1,
      "message": "Nit: might make sense to allocate both in a single `malloc` call.",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "553c8e93_bb7b33b7",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1158,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "e5490432_32fc9ed9",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc977ed4_211224e0",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1158,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "e5490432_32fc9ed9",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9130da90_5f971481",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1170,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "(If we end up keeping the malloc calls separate, `OPENSSL_memdup` is malloc + memcpy.)",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab95a271_a64a2501",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1171,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "Optional: It looks like every use of `vectorl_ntt` is preceeded by a memcpy. That is, although `vectorl_ntt` is in-place, nothing seems to actually want an in-place one. Perhaps we should just do...\n\n```\nstatic void vectork_ntt(vectork *out, const vectork *in) {\n  for (int i \u003d 0; i \u003c K; i++) {\n    OPENSSL_memcpy(\u0026out-\u003ev[i], \u0026in-\u003ev[i], sizeof(scalar));\n    scalar_ntt(\u0026out-\u003ev[i]);\n  }\n}\n```",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4075de8f_e1444eb4",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1171,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-04-08T07:32:37Z",
      "side": 1,
      "message": "It\u0027s more that `scalar_ntt` is inherently in place. We could make it in/out by unrolling the first iteration of the loop to read from the input and then always manipulate the output, but this seemed like premature optimization to me. All the math is much slower than one copy.",
      "parentUuid": "ab95a271_a64a2501",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8f80711_7a64ed15",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1171,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-10T19:14:55Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "4075de8f_e1444eb4",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21a44891_534a3aa8",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1216,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "This is only 768 bytes. Not tiny but not that big. Surely we can keep this on the stack...",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6aa40b52_30b8f551",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1217,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "Likewise this is only 1024 bytes.",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75713134_c19b7c99",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1235,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "Would it make sense to just store s1, s2, and t0 in the private key in NTT form? We\u0027d need to do more work to marshal the key after generating it, but I imagine that\u0027s much rarer than signing. That\u0027s three fewer vectors to allocate when signing *and* three fewer NTTs.",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc84b0ce_003f46e8",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1235,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-04-08T07:32:37Z",
      "side": 1,
      "message": "Yes, and the matrix A can also be cached in NTT form. The main drawback I saw was that the private key struct would use more memory (64 KB rather than 17 KB), but the improvement in signing speed is significant (because these NTTs take a lot of time), see go/dilithium-in-boringssl. Likewise the NTT values can be cached for the public key.\n\nI haven\u0027t included these optimizations in this first implementation due to the additional permanent memory use, but if we\u0027re fine with key objects being larger that\u0027s definitely something I can do (perhaps in a follow-up change?).",
      "parentUuid": "75713134_c19b7c99",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2c42a71_d1ed6ff7",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1235,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-10T17:29:20Z",
      "side": 1,
      "message": "I would probably do this as a follow on ðŸ˜Š",
      "parentUuid": "cc84b0ce_003f46e8",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bfc4852e_a1c8a0f2",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1254,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "Optional nit: Not that it matters, but might make sense to do this before the allocated bit, just to reduce the time period that we have extra heap memory in use.",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15986769_57dec7df",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1257,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "Optional: `y` only lives long enough to compute `y_ntt`. It can probably be easily folded into some other `vectorl` and save a chunk of memory. Maybe it can alias `cs1`?",
      "range": {
        "startLine": 1257,
        "startChar": 24,
        "endLine": 1257,
        "endChar": 34
      },
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15181553_9ace5cf4",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1262,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "Optional: Likewise, `w` does not live very long, like a `tmp_vectork` or so. Maybe it can alias `cs2`?",
      "range": {
        "startLine": 1262,
        "startChar": 17,
        "endLine": 1262,
        "endChar": 26
      },
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "217485e0_ee4898d9",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1290,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "@guillaumee@google.com This code leaks which of `z_max` and `r0_max` was too high. Are `z_max` and `r0_max` public or secret?  OK to leak, or does this computation need to be done secretly?\n\nWe should probably run this through the constant-time validation and add the declassifies we need. I can give that a go.",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1a277fc_641c51fb",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1290,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:46:56Z",
      "side": 1,
      "message": "\u003e I can give that a go.\n\nAlternatively, so that I\u0027m not the only one who knows how to do this, you up for getting it a try, Bob? I can put together some notes. ðŸ˜Š",
      "parentUuid": "217485e0_ee4898d9",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f03a861_1ecc95b3",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1290,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-05T22:37:27Z",
      "side": 1,
      "message": "Yeah, if you give me some notes to try it, sure,  \nAlthough I don\u0027t think that need hold up this landing in experimental.",
      "parentUuid": "f1a277fc_641c51fb",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cabad675_2e19bb1e",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1290,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-04-08T07:32:37Z",
      "side": 1,
      "message": "- `z` is part of the signature so it is public (and therefore `z_max` is public too), no problem here.\n- I haven\u0027t checked whether leaking `r0` might be a concern, although in any case if the check fails the signing loop is retried which obviously is noticeable time-wise (but this is inherently part of the algorithm).",
      "parentUuid": "7f03a861_1ecc95b3",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57972831_863457ce",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1290,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-10T19:07:27Z",
      "side": 1,
      "message": "\u003e z is part of the signature so it is public (and therefore z_max is public too), no problem here.\n\nI don\u0027t think that follows, at least not obviously.\n\n`z` isn\u0027t part of the signature that we ultimately return. I thought the reason for this sampling is that the bad `z`s were biased towards the private key. Presumably we specifically don\u0027t want to reveal those.\n\n\u003e if the check fails the signing loop is retried which obviously is noticeable time-wise (but this is inherently part of the algorithm).\n\nI think that\u0027s also irrelevant. One presumes that each attempt round the loop is independent. Telling the attacker \"I tried 5 times before I got your a signature that doesn\u0027t leak anything\" is fine. Telling the attacker \"I rejected signature with value 1234abcdef because it leaked my private key\" is clearly not fine.\n\nOne way or another, in order to pass our constant-time validation tests, this needs explicit declassify calls. It sounds like we should just make this constant-time and not worry about it.",
      "parentUuid": "cabad675_2e19bb1e",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a238a851_355b82d7",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1290,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-10T19:14:55Z",
      "side": 1,
      "message": "\u003e Yeah, if you give me some notes to try it, sure,\n\nThese are the build configurations I run it through:\n\n```\n[ConstDebug]\nCONSTANT_TIME_VALIDATION \u003d \"1\"\nCMAKE_BUILD_TYPE \u003d \"Debug\"\n\n[Const]\nCONSTANT_TIME_VALIDATION \u003d \"1\"\nCMAKE_BUILD_TYPE \u003d \"Release\"\n\n[ConstSmall]\nCONSTANT_TIME_VALIDATION \u003d \"1\"\nCMAKE_BUILD_TYPE \u003d \"Release\"\nOPENSSL_SMALL \u003d \"1\"\n\n[ConstNoAsm]\nCONSTANT_TIME_VALIDATION \u003d \"1\"\nCMAKE_BUILD_TYPE \u003d \"Release\"\nOPENSSL_NO_ASM \u003d \"1\"\n\n[ConstNoAsmClang]\nCONSTANT_TIME_VALIDATION \u003d \"1\"\nCMAKE_BUILD_TYPE \u003d \"Release\"\nOPENSSL_NO_ASM \u003d \"1\"\nCMAKE_TOOLCHAIN_FILE \u003d \"util/clang-toolchain.cmake\"\n\n[ConstClang]\nCONSTANT_TIME_VALIDATION \u003d \"1\"\nCMAKE_BUILD_TYPE \u003d \"Release\"\nCMAKE_TOOLCHAIN_FILE \u003d \"util/clang-toolchain.cmake\"\n\n[ConstClangSmall]\nCONSTANT_TIME_VALIDATION \u003d \"1\"\nCMAKE_BUILD_TYPE \u003d \"Release\"\nCMAKE_TOOLCHAIN_FILE \u003d \"util/clang-toolchain.cmake\"\nOPENSSL_SMALL \u003d \"1\"\n```\n\nThis is using https://user.git.corp.google.com/davidben/autocmake\n\nclang-toolchain.cmake is just a file I dropped in containing:\n\n```\nset(CMAKE_C_COMPILER \"/path/to/chromium/src/third_party/llvm-build/Release+Asserts/bin/clang\")\nset(CMAKE_CXX_COMPILER \"/path/to/chromium/src/third_party/llvm-build/Release+Asserts/bin/clang++\")\n```\n\nI just steal Chromium\u0027s Clang. Any other clang will do too. ðŸ˜Š\n\nFrom there, run the relevant tests you want under valgrind. You\u0027ll need to mark the secret key with the macros in crypto/internal.h. See how the other tests do it.\n\n\u003e Although I don\u0027t think that need hold up this landing in experimental.\n\nWe are telling people it\u0027s experimental because it might change. We\u0027re not telling people it\u0027s experimental because it fails to meet our usual security bar. If people are going to actually try to protect data with it, especially if not hybridized, it should meet our usual bar.\n\nIt also should not be too much work to make it pass. I might try this evening.",
      "parentUuid": "57972831_863457ce",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16bc46d2_02f81bf6",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1300,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8c06bb8_c684faa6",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1300,
      "author": {
        "id": 17331
      },
      "writtenOn": "2024-04-08T07:32:37Z",
      "side": 1,
      "message": "- `h` is part of the signature and therefore public too.\n- And in fact, `ct0_max` is always smaller than `kGamma2` for the parameters of Dilithium3 (see the observation in https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/eLaw4fgjaMg). I\u0027ve kept it so far for consistency with the official spec, but this check could be removed altogether.",
      "parentUuid": "16bc46d2_02f81bf6",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2603e2f_96c27c13",
        "filename": "crypto/dilithium/dilithium.c",
        "patchSetId": 16
      },
      "lineNbr": 1300,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-10T19:07:27Z",
      "side": 1,
      "message": "\u003e `h` is part of the signature and therefore public too.\n\nSee above.\n\n\u003e And in fact, ct0_max is always smaller than kGamma2 for the parameters of Dilithium3\n\nAh cool. So it sounds like that doesn\u0027t matter so much. Though we still need to deal with the constant-time aspects for our constant-time validation.\n\nHowever, this raises yet another question: is it OK to leak to the attacker which of the two rejection paths happened.",
      "parentUuid": "b8c06bb8_c684faa6",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "459eb20c_5c0bd556",
        "filename": "crypto/dilithium/dilithium_test.cc",
        "patchSetId": 16
      },
      "lineNbr": 31,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "Nit: 80 chars... probably just run clang-format over the whole file. :-)",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4085e4a3_df770fab",
        "filename": "include/openssl/experimental/dilithium.h",
        "patchSetId": 16
      },
      "lineNbr": 31,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-05T20:38:19Z",
      "side": 1,
      "message": "Given the SNAFU with the team that wanted a four-year key, I suspect this is not sufficient and we need to ACL the headers before letting google3 get at this.",
      "revId": "b18625f9cfbfe8e627f32981b424956f776cfe56",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}