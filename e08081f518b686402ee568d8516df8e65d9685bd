{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "82da6938_eda2f66f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-09-12T14:08:32Z",
      "side": 1,
      "message": "Hmm, this is the spelling used by https://docs.microsoft.com/en-us/windows/win32/winsock/creating-a-basic-winsock-application\n\nIt\u0027s also the casing used at the bottom of references like this one:\nhttps://docs.microsoft.com/en-us/windows/win32/api/Winsock2/nf-winsock2-connect\n\nWhere\u0027s the other casing from? Does cross-compiling for Windows even work case-sensitively? I know, for Chromium, our Windows cross-compiles have to use a ciopfs because the Windows SDK doesn\u0027t even work case-sensitively.\n\nhttps://chromium.googlesource.com/chromium/src/+/HEAD/docs/win_cross.md\nhttps://source.chromium.org/chromium/chromium/src/+/main:build/vs_toolchain.py;drc\u003d73a09d1a67a9bab66eba08b51372f431ab709b2d;l\u003d494",
      "revId": "e08081f518b686402ee568d8516df8e65d9685bd",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fa778f8_58a81cc8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14937
      },
      "writtenOn": "2022-09-13T15:22:54Z",
      "side": 1,
      "message": "The \"WS2_32.Lib\" casing is what\u0027s in the Windows SDK (10.0.20348.0).\n\nRe case-sensitivity issues: I\u0027m using Clang\u0027s vfs-overlay for case-insensitive headers, so the only problem is libraries. I\u0027m also automatically creating library symlinks with some common casings.",
      "parentUuid": "82da6938_eda2f66f",
      "revId": "e08081f518b686402ee568d8516df8e65d9685bd",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7106b2f_cd6f1ab8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-09-15T15:28:07Z",
      "side": 1,
      "message": "Interesting. It\u0027s bizarre to me that Microsoft would use a different casing from their documentation, but I suppose the expectation with the Windows SDK is that you use it with a case-insensitive filesystem.\n\nTo that end, I asked our Windows cross-compiling expert (+thakis) who says using consistently the Windows SDK case-insensitively is the preferred approach. Chromium uses a cpiofs mount. In particular, if there are other files with different casings of the pragma, you\u0027ll still run into problems. Given the spelling we use is the officially documented spelling from Microsoft, it\u0027s odd to try to standardize on a different one.\n\nHe also points out this change, which may provide the feature you want, if you\u0027re using the compiler-level features instead of a mount.\nhttps://reviews.llvm.org/D125800",
      "parentUuid": "3fa778f8_58a81cc8",
      "revId": "e08081f518b686402ee568d8516df8e65d9685bd",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02f67d84_6fac5ebc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14937
      },
      "writtenOn": "2022-09-15T16:36:20Z",
      "side": 1,
      "message": "Yeah, I really don\u0027t know why Microsoft exercises the case-insensitivity so much. I found up to 4 different casings for certain libraries.\n\nI know that using a case-insensitive filesystem is preferred, for my own tests I\u0027m currently using ext4\u0027s case-insensitive directory feature, but all of this is not very portable when other people need to build my code.\n\nThat LLVM feature however looks like exactly what I need. I\u0027m already using its counterpart for headers (ivfsoverlay), I did not know that a variant for the linker made it into LLVM 15. Tell thakis I said thanks!",
      "parentUuid": "f7106b2f_cd6f1ab8",
      "revId": "e08081f518b686402ee568d8516df8e65d9685bd",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "e08081f518b686402ee568d8516df8e65d9685bd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "e08081f518b686402ee568d8516df8e65d9685bd",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}