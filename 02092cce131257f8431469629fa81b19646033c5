{
  "comments": [
    {
      "key": {
        "uuid": "707552b8_b38678e4",
        "filename": "crypto/ec/p256-64.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "I did not really look through this code and assume it works.",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_736c60b8",
        "filename": "crypto/ec/p256-64.c",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "This doesn\u0027t look like it\u0027ll work on MSVC. I think we need to limit this to gcc-alikes for now. (There\u0027s several #ifdefs that\u0027ll need touching up.)",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30d59acf_74c466e3",
        "filename": "crypto/ec/p256-64.c",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-04-16T00:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "707552b8_736c60b8",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_93e6dcb1",
        "filename": "crypto/ec/p256-64.c",
        "patchSetId": 2
      },
      "lineNbr": 1468,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "[You mentioned before that this might cause some size hit. bssl_shim in release mode seems to grow by 316 bytes, so I think we\u0027re fine.]",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30d59acf_14587a8b",
        "filename": "crypto/ec/p256-64.c",
        "patchSetId": 2
      },
      "lineNbr": 1468,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-04-16T00:15:42Z",
      "side": 1,
      "message": "bssl_shim grows by 41KB with this change, and this isn\u0027t even the large P-256 implementation! Just wait for the next CL.",
      "parentUuid": "707552b8_93e6dcb1",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_27da2266",
        "filename": "crypto/ec/p256-64.c",
        "patchSetId": 2
      },
      "lineNbr": 1468,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-16T19:13:08Z",
      "side": 1,
      "message": "Oof, I got units confused. I\u0027m actually getting a 322k increase on release mode and a 55k increase in debug, which is much more consistent with your numbers. I guess there\u0027s a lot of inlining.",
      "parentUuid": "30d59acf_14587a8b",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_27678224",
        "filename": "crypto/ec/p256-64.c",
        "patchSetId": 2
      },
      "lineNbr": 1468,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-16T19:17:58Z",
      "side": 1,
      "message": "Okay, yet another set of numbers. If I change CMakeLists.txt to use -O2 -DNDEBUG manually rather than relying on cmake\u0027s default thing (which is apparently -O3), it\u0027s only a 26k increase in release mode which is much less scary than 322k.",
      "parentUuid": "707552b8_27da2266",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_b338b89c",
        "filename": "crypto/ec/p256-64.c",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "I think you can just leave these NULL. EC_GROUP_precompute_mult will return 1 instead of 0, but that seems fine? (\"I successfully did nothing.\")\n\nThere aren\u0027t actually many callers of this stuff to compare, but upstream\u0027s ectest.c (which we don\u0027t have) looks like it\u0027ll bail if this returns 0 instead of 1.",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30d59acf_9708ec5b",
        "filename": "crypto/ec/p256-64.c",
        "patchSetId": 2
      },
      "lineNbr": 1921,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-04-16T00:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "707552b8_b338b89c",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_53f04461",
        "filename": "crypto/ec/util-64.c",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "I didn\u0027t really look at this file and assume it works.",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_d30e94e9",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "Sort of odd that this is called SpeedECDHCurve, but it\u0027s not actually using crypto/ecdh. It does do a bit extra work, so I guess it\u0027s a question of whether we should be isolating the ECDH bits for better measuring that or including any non-EC overhead that all practically callers will pay for.",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30d59acf_17907c4a",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-04-16T00:15:42Z",
      "side": 1,
      "message": "I think what\u0027s measured here is correct: the generation of an ephemeral key and then the key-agreement computation.\n\nI don\u0027t really care so much for the crypto/ecdh code itself.",
      "parentUuid": "707552b8_d30e94e9",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_27154274",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-16T19:13:08Z",
      "side": 1,
      "message": "Alright. Possibly later we should tighten crypto/ecdh itself up or add a different API (the truncation and auto-KDF is kinda unnecessary...), since that\u0027s what the SSL stack uses for now. I\u0027ll make sure it matches this code in performance.",
      "parentUuid": "30d59acf_17907c4a",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_b31518f1",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 315,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "We differ on substring vs. equality here compared to the non-RNG tests. (I\u0027d think substring would be better, so you can run both P-256 tests in one go.)",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30d59acf_f7da9811",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 315,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-04-16T00:15:42Z",
      "side": 1,
      "message": "I think I still don\u0027t understand you here. All the tests of |selected| are equality tests. I could see the point of wanting a substring match, but I think that would be a different change.",
      "parentUuid": "707552b8_b31518f1",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_07f126e0",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 315,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-16T19:13:08Z",
      "side": 1,
      "message": "SpeedRSA says:\n\n  if (!selected.empty() \u0026\u0026 key_name.find(selected) \u003d\u003d std::string::npos) {\n\nIf I run bssl speed R right now, it manages to pick up the RSA and RC4 tests just fine. (I don\u0027t mind strict equality either, but it\u0027s weird to have them inconsistent.)",
      "parentUuid": "30d59acf_f7da9811",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10dc16fc_ff86eb16",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 315,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-04-16T20:53:23Z",
      "side": 1,
      "message": "Huh, I had completely forgotten about that. Fair enough, changed. I\u0027ll ponder about the other ones and maybe fix them up too in the future.",
      "parentUuid": "707552b8_07f126e0",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_93fd7c37",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "ScopedBIGNUM x(BN_new())? I guess it\u0027s an extra malloc. (Upstream 1.1.x has actually lost BN_init altogether, in the name of opaquifying)",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30d59acf_f757f8df",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-04-16T00:15:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "707552b8_93fd7c37",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_53428401",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 357,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "ditto",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707552b8_73478010",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 365,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-04-15T22:06:56Z",
      "side": 1,
      "message": "One of these speed tests includes the key generation, but the other one doesn\u0027t.",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30d59acf_f7d938f6",
        "filename": "tool/speed.cc",
        "patchSetId": 2
      },
      "lineNbr": 365,
      "author": {
        "id": 5005
      },
      "writtenOn": "2015-04-16T00:15:42Z",
      "side": 1,
      "message": "Right, that\u0027s deliberate. Ephemeral key generation is generally path of the critical-path for ECDH, but not for ECDSA.",
      "parentUuid": "707552b8_73478010",
      "revId": "02092cce131257f8431469629fa81b19646033c5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}