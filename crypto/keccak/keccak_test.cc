/* Copyright (c) 2023, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

#include <vector>

#include <string.h>

#include <gtest/gtest.h>

#include <openssl/bytestring.h>

#include "../test/file_test.h"
#include "../test/test_util.h"
#include "./internal.h"


static void KeccakFileTest(FileTest *t) {
  std::vector<uint8_t> input, sha3_256_expected, sha3_512_expected,
      shake128_expected, shake256_expected;
  ASSERT_TRUE(t->GetBytes(&input, "Input"));
  ASSERT_TRUE(t->GetBytes(&sha3_256_expected, "SHA3-256"));
  ASSERT_TRUE(t->GetBytes(&sha3_512_expected, "SHA3-512"));
  ASSERT_TRUE(t->GetBytes(&shake128_expected, "SHAKE-128"));
  ASSERT_TRUE(t->GetBytes(&shake256_expected, "SHAKE-256"));

  uint8_t sha3_256_digest[32];
  BORINGSSL_keccak(sha3_256_digest, sizeof(sha3_256_digest), input.data(),
                   input.size(), boringssl_sha3_256);
  uint8_t sha3_512_digest[64];
  BORINGSSL_keccak(sha3_512_digest, sizeof(sha3_512_digest), input.data(),
                   input.size(), boringssl_sha3_512);
  uint8_t shake128_output[512];
  BORINGSSL_keccak(shake128_output, sizeof(shake128_output), input.data(),
                   input.size(), boringssl_shake128);
  uint8_t shake256_output[512];
  BORINGSSL_keccak(shake256_output, sizeof(shake256_output), input.data(),
                   input.size(), boringssl_shake256);

  EXPECT_EQ(Bytes(sha3_256_expected), Bytes(sha3_256_digest));
  EXPECT_EQ(Bytes(sha3_512_expected), Bytes(sha3_512_digest));
  EXPECT_EQ(Bytes(shake128_expected), Bytes(shake128_output));
  EXPECT_EQ(Bytes(shake256_expected), Bytes(shake256_output));

  struct BORINGSSL_keccak_st ctx;

  // Single-pass absorb/squeeze.
  OPENSSL_memset(shake128_output, 0, sizeof(shake128_output));
  BORINGSSL_keccak_init(&ctx, boringssl_shake128);
  BORINGSSL_keccak_absorb(&ctx, input.data(), input.size());
  BORINGSSL_keccak_finalize(&ctx);
  BORINGSSL_keccak_squeeze(&ctx, shake128_output, sizeof(shake128_output));
  EXPECT_EQ(Bytes(shake128_expected), Bytes(shake128_output));

  OPENSSL_memset(shake256_output, 0, sizeof(shake256_output));
  BORINGSSL_keccak_init(&ctx, boringssl_shake256);
  BORINGSSL_keccak_absorb(&ctx, input.data(), input.size());
  BORINGSSL_keccak_finalize(&ctx);
  BORINGSSL_keccak_squeeze(&ctx, shake256_output, sizeof(shake256_output));
  EXPECT_EQ(Bytes(shake256_expected), Bytes(shake256_output));

  // Byte-by-byte absorb/squeeze.
  OPENSSL_memset(shake128_output, 0, sizeof(shake128_output));
  BORINGSSL_keccak_init(&ctx, boringssl_shake128);
  for (size_t i = 0; i < input.size(); i++) {
    BORINGSSL_keccak_absorb(&ctx, &input[i], 1);
  }
  BORINGSSL_keccak_finalize(&ctx);
  for (size_t i = 0; i < sizeof(shake128_output); i++) {
    BORINGSSL_keccak_squeeze(&ctx, &shake128_output[i], 1);
  }
  EXPECT_EQ(Bytes(shake128_expected), Bytes(shake128_output));

  OPENSSL_memset(shake256_output, 0, sizeof(shake256_output));
  BORINGSSL_keccak_init(&ctx, boringssl_shake256);
  for (size_t i = 0; i < input.size(); i++) {
    BORINGSSL_keccak_absorb(&ctx, &input[i], 1);
  }
  BORINGSSL_keccak_finalize(&ctx);
  for (size_t i = 0; i < sizeof(shake256_output); i++) {
    BORINGSSL_keccak_squeeze(&ctx, &shake256_output[i], 1);
  }
  EXPECT_EQ(Bytes(shake256_expected), Bytes(shake256_output));
}

TEST(KeccakTest, KeccakTestVectors) {
  FileTestGTest("crypto/keccak/keccak_tests.txt", KeccakFileTest);
}

TEST(KeccakTest, MultiPass) {
  std::vector<uint8_t> input = {
      0xac, 0xea, 0xbc, 0xa8, 0x49, 0xe5, 0x74, 0xdc, 0x7f, 0x1e, 0x4f, 0xf0,
      0xf4, 0xe0, 0x29, 0x37, 0x61, 0x31, 0x39, 0x4f, 0x3f, 0x06, 0x04, 0x7e,
      0xd3, 0x92, 0xc9, 0xf9, 0x67, 0x3f, 0xa3, 0xbb, 0x1f, 0xfb, 0x65, 0x7e,
      0x06, 0x9b, 0x5a, 0x85, 0xc5, 0xe2, 0x5e, 0xcd, 0xc7, 0x68, 0xa7, 0x89,
      0xb1, 0xcb, 0x98, 0x25, 0xed, 0xc9, 0x66, 0x6f, 0xe7, 0xa9, 0x31, 0x1e,
      0x46, 0x0b, 0xfc, 0x22, 0x88, 0x5a, 0xd2, 0x64, 0xe4, 0x58, 0x68, 0xb1,
      0x2c, 0xfd, 0x8b, 0x66, 0x6f, 0x20, 0xcb, 0xfb, 0x57, 0x5c, 0xc8, 0x40,
      0x56, 0x54, 0x50, 0x89, 0xe6, 0xa8, 0xff, 0xd8, 0x80, 0xd0, 0xab, 0xad,
      0x34, 0xe3, 0xb6, 0xaa,
  };
  std::vector<uint8_t> shake128_expected = {
      0xea, 0xc7, 0x6b, 0x25, 0xaa, 0xfe, 0xec, 0x4a, 0xa1, 0xb0, 0xf8, 0x6e,
      0x15, 0x48, 0x3a, 0x3f, 0x66, 0xb0, 0x0b, 0x34, 0x3d, 0x63, 0x93, 0x40,
      0xf5, 0xae, 0x69, 0x24, 0x1c, 0x32, 0x6d, 0x3d, 0x29, 0x20, 0xf7, 0xb7,
      0x97, 0xf4, 0xd8, 0x66, 0x32, 0x6f, 0xf9, 0xa8, 0x97, 0xa1, 0x00, 0x7b,
      0x9f, 0x3e, 0x7a, 0x2a, 0xd5, 0xf8, 0xdc, 0x04, 0xab, 0x38, 0x22, 0x8b,
      0xcd, 0xfe, 0xee, 0x24, 0x81, 0x7d, 0x39, 0x08, 0x42, 0xd6, 0x69, 0x00,
      0xca, 0x47, 0x17, 0x1e, 0x45, 0x7c, 0x1a, 0x7d, 0xd5, 0xe2, 0xaa, 0x1c,
      0x8d, 0x76, 0x32, 0x76, 0xd4, 0x0c, 0x0f, 0x4c, 0xfe, 0xe0, 0x4d, 0x30,
      0xbe, 0x5f, 0xaa, 0xd1, 0xc1, 0xff, 0x63, 0x30, 0xda, 0xd9, 0xe1, 0xde,
      0x1a, 0xcf, 0xf9, 0x8c, 0x0a, 0x8d, 0x51, 0xee, 0xf9, 0x86, 0x33, 0x92,
      0xd3, 0x46, 0x09, 0xf4, 0x73, 0x5f, 0x6a, 0x47, 0x49, 0x21, 0x16, 0xaf,
      0xbb, 0x94, 0xe9, 0xf4, 0xb6, 0x32, 0x54, 0xa2, 0xf5, 0x11, 0x43, 0x56,
      0x89, 0x52, 0xa7, 0xce, 0x11, 0x4d, 0x3e, 0x8f, 0x50, 0xae, 0x09, 0xc4,
      0xaf, 0x8a, 0x8e, 0x02, 0x43, 0x1a, 0xd0, 0x13, 0x77, 0x06, 0x99, 0x5d,
      0x56, 0xf5, 0x36, 0x76, 0x55, 0x34, 0xeb, 0x42, 0x72, 0x07, 0x5b, 0x66,
      0xff, 0x81, 0xac, 0x98, 0x42, 0x33, 0x44, 0xe1, 0x17, 0xc6, 0x38, 0x1e,
      0xca, 0x7a, 0x86, 0xa3, 0xbf, 0x4c, 0xc3, 0x5b, 0xa8, 0x18, 0xca, 0x43,
      0x57, 0xdc, 0x44, 0x18, 0x9e, 0x0c, 0x5b, 0x13, 0xeb, 0x57, 0xf0, 0x36,
      0xaa, 0xe7, 0x18, 0xd4, 0xdb, 0x3b, 0xc3, 0x06, 0x82, 0xb7, 0x9f, 0x15,
      0x61, 0x71, 0xca, 0x63, 0x3a, 0xa9, 0x95, 0xfd, 0xcb, 0xee, 0xa1, 0x14,
      0xd7, 0x72, 0x73, 0x83, 0x0a, 0x15, 0xaa, 0x08, 0x00, 0x5a, 0xcc, 0x40,
      0x96, 0xb4, 0x71, 0x8b, 0x34, 0x9b, 0xe9, 0x4e, 0xfa, 0x75, 0xb7, 0x2e,
      0x3f, 0x83, 0x15, 0x7c, 0xda, 0x7d, 0xa5, 0x7f, 0x1e, 0xd3, 0xde, 0xab,
      0x9d, 0xd8, 0xfb, 0x04, 0xd9, 0x86, 0xea, 0xd4, 0x97, 0xcf, 0x24, 0x52,
      0xca, 0x72, 0x26, 0xd9, 0x6e, 0x85, 0x2b, 0xaf, 0xee, 0x99, 0x45, 0x0f,
      0x6b, 0x33, 0x95, 0xc5, 0x67, 0xa2, 0x30, 0x56, 0xa9, 0x5d, 0x03, 0x5c,
      0x4a, 0x80, 0xc5, 0x1e, 0xfb, 0x48, 0xb3, 0xc6, 0x61, 0xbd, 0x22, 0x41,
      0x3a, 0x01, 0xf9, 0x86, 0x1b, 0x89, 0x30, 0x50, 0xd1, 0x65, 0x46, 0xab,
      0xf0, 0xcf, 0x8f, 0xa3, 0xdf, 0x35, 0xa8, 0x3f, 0xff, 0x44, 0x06, 0xc7,
      0x0e, 0xb7, 0x75, 0xb3, 0xe0, 0x5b, 0xd9, 0xff, 0x49, 0xf8, 0x14, 0xed,
      0xb9, 0x70, 0x37, 0x77, 0x6f, 0x17, 0x3e, 0x04, 0xd1, 0xa4, 0x4c, 0x40,
      0x3f, 0xe1, 0xa7, 0xd0, 0xe1, 0xe8, 0x61, 0x46, 0x5e, 0x9b, 0xa2, 0x79,
      0xca, 0x15, 0xa2, 0xb8, 0x78, 0x21, 0xa1, 0xdd, 0xd7, 0x89, 0xe3, 0xc7,
      0x9a, 0x36, 0x89, 0x71, 0xdb, 0xdb, 0x93, 0xb5, 0x6a, 0xd3, 0xbf, 0x0b,
      0x6d, 0xf1, 0x41, 0xef, 0x21, 0xc1, 0x6f, 0x66, 0xac, 0xb6, 0x7c, 0x57,
      0x98, 0x05, 0x00, 0xaa, 0xa9, 0xc5, 0x22, 0x2c, 0x5e, 0x1b, 0xf5, 0x28,
      0xca, 0x81, 0xea, 0x65, 0xb1, 0x60, 0xb0, 0xab, 0xfb, 0x68, 0xaf, 0x5d,
      0x95, 0xba, 0xf9, 0x55, 0xe2, 0x96, 0xb9, 0x7a, 0xc6, 0xec, 0x10, 0x68,
      0x76, 0x4f, 0x6a, 0x2b, 0xbd, 0x71, 0x5b, 0xd7, 0x96, 0xd1, 0x81, 0x9b,
      0x40, 0xf3, 0x57, 0xd9, 0x43, 0xb2, 0x31, 0x2b, 0xeb, 0x41, 0x73, 0x3d,
      0x4f, 0xf2, 0xfd, 0x43, 0x5e, 0x87, 0xd4, 0x31, 0x5b, 0x75, 0xc9, 0x33,
      0x3d, 0x78, 0x9b, 0x7e, 0x4d, 0xe0, 0xf2, 0x3d, 0x08, 0xf0, 0xba, 0x6c,
      0xfb, 0x39, 0xe8, 0xec, 0xf5, 0x3d, 0xb9, 0x52,
  };
  std::vector<uint8_t> shake256_expected = {
      0x70, 0x76, 0xe0, 0x5e, 0xb3, 0xfe, 0xd9, 0x21, 0x6b, 0xda, 0xa2, 0x4c,
      0xf8, 0x72, 0xc1, 0x6f, 0xe1, 0x80, 0x91, 0xf3, 0x34, 0xf2, 0x43, 0x16,
      0x22, 0x4d, 0x10, 0xd2, 0x3c, 0x07, 0x9e, 0x2b, 0x9a, 0x4e, 0x0e, 0x2b,
      0x06, 0xdf, 0x19, 0xc2, 0x4c, 0xeb, 0xb7, 0x51, 0x5b, 0x5d, 0xce, 0x13,
      0x49, 0x05, 0x30, 0x9b, 0xdb, 0xc0, 0xd5, 0x34, 0x4a, 0x31, 0x29, 0x20,
      0x5b, 0xff, 0xeb, 0x63, 0x40, 0x61, 0x76, 0x69, 0x76, 0xe5, 0xfb, 0x3a,
      0x8f, 0x6c, 0x42, 0x99, 0x06, 0x5e, 0xb9, 0xd5, 0x82, 0x78, 0x94, 0x18,
      0x2f, 0x80, 0xf5, 0xc4, 0xe1, 0xd3, 0x31, 0x0b, 0x18, 0x6b, 0xc6, 0x7d,
      0xcb, 0xde, 0x13, 0x64, 0x9f, 0x38, 0x74, 0xb2, 0xf0, 0xd2, 0x54, 0x6e,
      0xb2, 0x73, 0xe3, 0xb9, 0x0c, 0x26, 0xcb, 0x60, 0x7e, 0x45, 0xa6, 0x0a,
      0x33, 0x2d, 0x08, 0x96, 0xf5, 0x19, 0x36, 0x16, 0x11, 0xfd, 0x5c, 0xa0,
      0x3d, 0xdb, 0x69, 0x6e, 0x77, 0x4e, 0x7e, 0x93, 0xb9, 0xb9, 0x3c, 0x23,
      0x92, 0x04, 0x5f, 0xd8, 0xda, 0xd6, 0xa0, 0x5f, 0x5b, 0xab, 0xa7, 0x71,
      0x74, 0x54, 0xad, 0xa1, 0xe2, 0xb9, 0x1e, 0xd7, 0xef, 0xa2, 0xf8, 0xd4,
      0x1b, 0xcd, 0x68, 0x88, 0xef, 0x23, 0xf4, 0xe0, 0xe8, 0xea, 0x58, 0xae,
      0x17, 0x73, 0x34, 0x5e, 0xa7, 0xfc, 0x65, 0x92, 0x76, 0xbc, 0xe9, 0x1f,
      0x3b, 0x57, 0xf5, 0xed, 0xf1, 0x93, 0x16, 0xf0, 0x2d, 0xa5, 0xc9, 0xca,
      0x9f, 0x65, 0x65, 0x0f, 0xf7, 0x46, 0x7f, 0x83, 0xf0, 0x8e, 0x0e, 0xd5,
      0xc0, 0x95, 0x49, 0x83, 0x27, 0x98, 0x91, 0x17, 0x2e, 0x05, 0x84, 0xa2,
      0xd9, 0x14, 0x59, 0x05, 0x0b, 0x46, 0x2a, 0x00, 0xfa, 0xce, 0x84, 0x3a,
      0xfd, 0x50, 0x00, 0xe3, 0x33, 0x3f, 0x25, 0x2d, 0x12, 0x15, 0xb6, 0xf2,
      0xda, 0x7d, 0x88, 0x37, 0xe4, 0x3c, 0xe8, 0xdd, 0x75, 0x5f, 0x91, 0xf2,
      0x47, 0x9b, 0xeb, 0xfb, 0xf0, 0x94, 0xf1, 0xf0, 0xc5, 0xe9, 0xc4, 0x48,
      0x87, 0xa1, 0xee, 0x59, 0x82, 0x82, 0xba, 0xa9, 0x5a, 0x25, 0x9d, 0xf1,
      0x3c, 0x92, 0x04, 0x87, 0xe3, 0x34, 0xcd, 0x61, 0x24, 0xb5, 0x19, 0x2e,
      0x1b, 0xbc, 0x3d, 0x49, 0x1c, 0x1f, 0x26, 0x31, 0x58, 0xfa, 0x0f, 0x2b,
      0xc0, 0x31, 0xe8, 0x04, 0x38, 0x0a, 0xf8, 0xb7, 0xb9, 0xd5, 0x55, 0x67,
      0x33, 0x71, 0x99, 0x66, 0xbf, 0xd9, 0x7e, 0x10, 0xd3, 0x57, 0x45, 0x58,
      0x47, 0xae, 0x83, 0x51, 0x5a, 0x70, 0x68, 0x66, 0xf0, 0xa9, 0x41, 0xf9,
      0x6c, 0x8d, 0x88, 0x9f, 0xa1, 0xd2, 0x78, 0x8b, 0x9a, 0x81, 0xe8, 0xc1,
      0xa4, 0x9e, 0xe9, 0x4f, 0xd5, 0x43, 0x67, 0xb2, 0x91, 0x40, 0x75, 0xa4,
      0xae, 0x84, 0x8f, 0xa6, 0xf5, 0x88, 0x2c, 0x5c, 0xbf, 0xcb, 0x1b, 0x11,
      0x52, 0xf9, 0x3b, 0x58, 0xe7, 0xa8, 0xce, 0x69, 0x73, 0xe2, 0x01, 0xc3,
      0xcc, 0xcb, 0xec, 0x40, 0x95, 0x98, 0x35, 0x23, 0x99, 0x38, 0xf4, 0xcc,
      0x1a, 0x8d, 0x32, 0x31, 0xbb, 0xb2, 0xf6, 0x97, 0xca, 0xb1, 0x09, 0x6a,
      0x4a, 0xde, 0x30, 0x61, 0xde, 0x1f, 0x5f, 0x41, 0x78, 0xa8, 0x2a, 0xb5,
      0xfe, 0xb1, 0x49, 0x65, 0xbb, 0x0c, 0xf1, 0xf5, 0x86, 0x94, 0x60, 0xbd,
      0x29, 0x60, 0xcf, 0x7f, 0xa4, 0x8b, 0x13, 0x72, 0x27, 0xc5, 0x9c, 0x3f,
      0x45, 0x8e, 0x13, 0x07, 0xa9, 0x40, 0x28, 0x88, 0xbe, 0xd1, 0xb1, 0x17,
      0x62, 0x81, 0xbd, 0x76, 0x75, 0xe5, 0x45, 0xb1, 0xe5, 0xd9, 0xec, 0xa4,
      0xee, 0x4e, 0x20, 0x65, 0xc3, 0xbc, 0x8a, 0x77, 0xab, 0xb0, 0x94, 0xa4,
      0x23, 0xda, 0x90, 0xc6, 0xcb, 0x09, 0x54, 0x31, 0xb8, 0xd0, 0xc5, 0x96,
      0x67, 0x86, 0x50, 0xff, 0xc7, 0xc8, 0x6e, 0xb0,
  };

  uint8_t shake128_output[512];
  uint8_t shake256_output[512];

  struct BORINGSSL_keccak_st ctx;

  // Multi-pass absorb.
  for (size_t j = 0; j < input.size(); j++) {
    for (size_t i = 0; i < j; i++) {
      OPENSSL_memset(shake128_output, 0, sizeof(shake128_output));
      BORINGSSL_keccak_init(&ctx, boringssl_shake128);
      BORINGSSL_keccak_absorb(&ctx, input.data(), i);
      BORINGSSL_keccak_absorb(&ctx, &input[i], j - i);
      BORINGSSL_keccak_absorb(&ctx, &input[j], input.size() - j);
      BORINGSSL_keccak_finalize(&ctx);
      BORINGSSL_keccak_squeeze(&ctx, shake128_output, sizeof(shake128_output));
      EXPECT_EQ(Bytes(shake128_expected), Bytes(shake128_output));
    }
  }

  for (size_t j = 0; j < input.size(); j++) {
    for (size_t i = 0; i < j; i++) {
      OPENSSL_memset(shake256_output, 0, sizeof(shake256_output));
      BORINGSSL_keccak_init(&ctx, boringssl_shake256);
      BORINGSSL_keccak_absorb(&ctx, input.data(), i);
      BORINGSSL_keccak_absorb(&ctx, &input[i], j - i);
      BORINGSSL_keccak_absorb(&ctx, &input[j], input.size() - j);
      BORINGSSL_keccak_finalize(&ctx);
      BORINGSSL_keccak_squeeze(&ctx, shake256_output, sizeof(shake256_output));
      EXPECT_EQ(Bytes(shake256_expected), Bytes(shake256_output));
    }
  }

  // Multi-pass squeeze.
  for (size_t j = 0; j < sizeof(shake128_output); j++) {
    for (size_t i = 0; i < j; i++) {
      OPENSSL_memset(shake128_output, 0, sizeof(shake128_output));
      BORINGSSL_keccak_init(&ctx, boringssl_shake128);
      BORINGSSL_keccak_absorb(&ctx, input.data(), input.size());
      BORINGSSL_keccak_finalize(&ctx);
      BORINGSSL_keccak_squeeze(&ctx, shake128_output, i);
      BORINGSSL_keccak_squeeze(&ctx, &shake128_output[i], j - i);
      BORINGSSL_keccak_squeeze(&ctx, &shake128_output[j],
                               sizeof(shake128_output) - j);
      EXPECT_EQ(Bytes(shake128_expected), Bytes(shake128_output));
    }
  }

  for (size_t j = 0; j < sizeof(shake256_output); j++) {
    for (size_t i = 0; i < j; i++) {
      OPENSSL_memset(shake256_output, 0, sizeof(shake256_output));
      BORINGSSL_keccak_init(&ctx, boringssl_shake256);
      BORINGSSL_keccak_absorb(&ctx, input.data(), input.size());
      BORINGSSL_keccak_finalize(&ctx);
      BORINGSSL_keccak_squeeze(&ctx, shake256_output, i);
      BORINGSSL_keccak_squeeze(&ctx, &shake256_output[i], j - i);
      BORINGSSL_keccak_squeeze(&ctx, &shake256_output[j],
                               sizeof(shake256_output) - j);
      EXPECT_EQ(Bytes(shake256_expected), Bytes(shake256_output));
    }
  }
}
