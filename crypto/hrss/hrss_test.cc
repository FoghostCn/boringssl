/* Copyright (c) 2018, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

#include <gtest/gtest.h>

#include <openssl/hrss.h>
#include <openssl/rand.h>

#include "../test/test_util.h"

TEST(HRSS, Basic) {
  uint8_t generate_key_entropy[HRSS_GENERATE_KEY_BYTES];
  for (unsigned i = 0; i < sizeof(generate_key_entropy); i++) {
    generate_key_entropy[i] = i;
  }

  HRSS_public_key pub;
  HRSS_private_key priv;
  HRSS_generate_key(&pub, &priv, generate_key_entropy);

  uint8_t encap_entropy[HRSS_ENCAP_BYTES];
  for (unsigned i = 0; i < sizeof(encap_entropy); i++) {
    encap_entropy[i] = i;
  }

  uint8_t ciphertext[HRSS_CIPHERTEXT_BYTES];
  uint8_t shared_key[HRSS_KEY_BYTES];
  HRSS_encap(ciphertext, shared_key, &pub, encap_entropy);

  HRSS_public_key pub2;
  HRSS_private_key priv2;
  uint8_t pub_bytes[HRSS_PUBLIC_KEY_BYTES];
  uint8_t priv_bytes[HRSS_PRIVATE_KEY_BYTES];
  HRSS_marshal_public_key(pub_bytes, &pub);
  ASSERT_TRUE(HRSS_parse_public_key(&pub2, pub_bytes));
  HRSS_marshal_private_key(priv_bytes, &priv);
  ASSERT_TRUE(HRSS_parse_private_key(&priv2, priv_bytes));

  uint8_t shared_key2[HRSS_KEY_BYTES];
  HRSS_decap(shared_key2, &pub2, &priv2, ciphertext, sizeof(ciphertext));

  EXPECT_EQ(Bytes(shared_key), Bytes(shared_key2));
}

TEST(HRSS, Random) {
  for (unsigned i = 0; i < 10; i++) {
    SCOPED_TRACE(i);
    uint8_t generate_key_entropy[HRSS_GENERATE_KEY_BYTES];
    RAND_bytes(generate_key_entropy, sizeof(generate_key_entropy));

    HRSS_public_key pub;
    HRSS_private_key priv;
    HRSS_generate_key(&pub, &priv, generate_key_entropy);

    for (unsigned j = 0; j < 10; j++) {
      SCOPED_TRACE(j);
      uint8_t encap_entropy[HRSS_ENCAP_BYTES];
      RAND_bytes(encap_entropy, sizeof(encap_entropy));

      uint8_t ciphertext[HRSS_CIPHERTEXT_BYTES];
      uint8_t shared_key[HRSS_KEY_BYTES];
      HRSS_encap(ciphertext, shared_key, &pub, encap_entropy);

      uint8_t shared_key2[HRSS_KEY_BYTES];
      HRSS_decap(shared_key2, &pub, &priv, ciphertext, sizeof(ciphertext));

      EXPECT_EQ(Bytes(shared_key), Bytes(shared_key2));
    }
  }
}

TEST(HRSS, Golden) {
  uint8_t generate_key_entropy[HRSS_GENERATE_KEY_BYTES];
  for (unsigned i = 0; i < HRSS_SAMPLE_BYTES; i++) {
    generate_key_entropy[i] = i;
  }
  for (unsigned i = HRSS_SAMPLE_BYTES; i < 2 * HRSS_SAMPLE_BYTES; i++) {
    generate_key_entropy[i] = 2 + i;
  }
  for (unsigned i = 2 * HRSS_SAMPLE_BYTES; i < sizeof(generate_key_entropy);
       i++) {
    generate_key_entropy[i] = 4 + i;
  }

  HRSS_public_key pub;
  HRSS_private_key priv;
  OPENSSL_memset(&pub, 0, sizeof(pub));
  OPENSSL_memset(&priv, 0, sizeof(priv));
  HRSS_generate_key(&pub, &priv, generate_key_entropy);

  static const uint8_t kExpectedPub[HRSS_PUBLIC_KEY_BYTES] = {
      0xf8, 0x9f, 0xa0, 0xfc, 0xf1, 0xd4, 0xfa, 0x4d, 0x8f, 0x35, 0x28, 0x73,
      0x0e, 0x37, 0x18, 0x1d, 0x09, 0xf3, 0x9e, 0x16, 0x0d, 0x7f, 0x9c, 0x82,
      0x17, 0xa1, 0xa1, 0x88, 0x6b, 0x29, 0x5b, 0x3a, 0x30, 0xcd, 0x6f, 0x8e,
      0x0c, 0xd3, 0x38, 0x0c, 0x05, 0x68, 0x6e, 0x4c, 0xcc, 0x20, 0xd4, 0x06,
      0x77, 0x0c, 0xac, 0x1c, 0x49, 0x14, 0x00, 0xd6, 0x9b, 0x1c, 0xde, 0x43,
      0x0a, 0x59, 0x37, 0xd6, 0x46, 0x68, 0x1f, 0x04, 0xcb, 0x73, 0x92, 0x37,
      0x2d, 0x7f, 0x57, 0x70, 0x16, 0xe8, 0x06, 0x48, 0x3b, 0x66, 0xb3, 0x63,
      0x02, 0x5a, 0x71, 0x46, 0xdd, 0xa4, 0xee, 0xb8, 0x78, 0x44, 0xfd, 0x9e,
      0xd0, 0x71, 0x16, 0x00, 0xbd, 0x01, 0x1e, 0x27, 0x2e, 0xa0, 0xc6, 0x8d,
      0x55, 0x89, 0x7c, 0x2a, 0x01, 0x2b, 0x1b, 0x75, 0xa2, 0xc2, 0xd1, 0x5a,
      0x67, 0xfa, 0xdd, 0x3b, 0x70, 0x9d, 0xdb, 0xcd, 0x73, 0x32, 0x5e, 0x24,
      0xb1, 0xcf, 0x23, 0xbe, 0x3c, 0x56, 0xcc, 0xbe, 0x61, 0xdb, 0xe7, 0x3c,
      0xc7, 0xf5, 0x09, 0xe6, 0x87, 0xa0, 0x09, 0x52, 0x9d, 0x61, 0x5b, 0xc6,
      0xd4, 0xc5, 0x2e, 0xc2, 0x6c, 0x87, 0x30, 0x36, 0x49, 0x6f, 0x04, 0xaa,
      0xb3, 0x26, 0xd5, 0x63, 0xcf, 0xd4, 0x74, 0x1e, 0xc7, 0x79, 0xb3, 0xfc,
      0x8c, 0x41, 0x36, 0x79, 0xaa, 0xd5, 0xba, 0x64, 0x49, 0x48, 0xdb, 0xeb,
      0xe8, 0x33, 0x7d, 0xbe, 0x3b, 0x67, 0xd7, 0xfd, 0x93, 0x1e, 0x80, 0x8d,
      0x17, 0xab, 0x6f, 0xfd, 0x1c, 0x4b, 0x2d, 0x5b, 0x90, 0xf0, 0xf0, 0x5d,
      0xbe, 0x8f, 0x81, 0x18, 0x29, 0x08, 0x9a, 0x47, 0x1b, 0xc2, 0x2d, 0xa2,
      0x22, 0x5a, 0x4f, 0xe9, 0x81, 0x64, 0xdd, 0x53, 0x2e, 0x67, 0xe5, 0x07,
      0x1a, 0xf0, 0x0c, 0x54, 0x9b, 0xe2, 0xf8, 0xe6, 0xb3, 0xb6, 0xe0, 0x5a,
      0x74, 0xfa, 0x8d, 0x9c, 0xa5, 0x7c, 0x6e, 0x73, 0xba, 0xee, 0x6e, 0x6e,
      0x31, 0xcb, 0x59, 0xd7, 0xfd, 0x94, 0x1c, 0x4d, 0x62, 0xc6, 0x87, 0x0b,
      0x38, 0x54, 0xc6, 0x35, 0xac, 0xc8, 0x8c, 0xc0, 0xd9, 0x99, 0xee, 0xfc,
      0xa9, 0xde, 0xc4, 0x50, 0x88, 0x8e, 0x24, 0xf6, 0xd6, 0x04, 0x54, 0x3e,
      0x81, 0xc4, 0x96, 0x9a, 0x40, 0xe5, 0xef, 0x8b, 0xec, 0x41, 0x50, 0x1d,
      0x14, 0xae, 0xa4, 0x5a, 0xac, 0xd4, 0x73, 0x31, 0xc3, 0x1d, 0xc1, 0x96,
      0x89, 0xd8, 0x62, 0x97, 0x60, 0x3f, 0x58, 0x2a, 0x5f, 0xcf, 0xcb, 0x26,
      0x99, 0x69, 0x81, 0x13, 0x9c, 0xaf, 0x17, 0x91, 0xa8, 0xeb, 0x9a, 0xf9,
      0xd3, 0x83, 0x47, 0x66, 0xc7, 0xf8, 0xd8, 0xe3, 0xd2, 0x7e, 0x58, 0xa9,
      0xf5, 0xb2, 0x03, 0xbe, 0x7e, 0xa5, 0x29, 0x9d, 0xff, 0xd1, 0xd8, 0x55,
      0x39, 0xc7, 0x2c, 0xce, 0x03, 0x64, 0xdc, 0x18, 0xe7, 0xb0, 0x60, 0x46,
      0x26, 0xeb, 0xb7, 0x61, 0x4b, 0x91, 0x2c, 0xd8, 0xa2, 0xee, 0x63, 0x2e,
      0x15, 0x0a, 0x58, 0x88, 0x04, 0xb1, 0xed, 0x6d, 0xf1, 0x5c, 0xc7, 0xee,
      0x60, 0x38, 0x26, 0xc9, 0x31, 0x7e, 0x69, 0xe4, 0xac, 0x3c, 0x72, 0x09,
      0x3e, 0xe6, 0x24, 0x30, 0x44, 0x6e, 0x66, 0x83, 0xb9, 0x2a, 0x22, 0xaf,
      0x26, 0x1e, 0xaa, 0xa3, 0xf4, 0xb1, 0xa1, 0x5c, 0xfa, 0x5f, 0x0d, 0x71,
      0xac, 0xe3, 0xe0, 0xc3, 0xdd, 0x4f, 0x96, 0x57, 0x8b, 0x58, 0xac, 0xe3,
      0x42, 0x8e, 0x47, 0x72, 0xb1, 0xe4, 0x19, 0x68, 0x3e, 0xbb, 0x19, 0x14,
      0xdf, 0x16, 0xb5, 0xde, 0x7f, 0x37, 0xaf, 0xd8, 0xd3, 0x3d, 0x6a, 0x16,
      0x1b, 0x26, 0xd3, 0xcc, 0x53, 0x82, 0x57, 0x90, 0x89, 0xc5, 0x7e, 0x6d,
      0x7e, 0x99, 0x5b, 0xcd, 0xd3, 0x18, 0xbb, 0x89, 0xef, 0x76, 0xbd, 0xd2,
      0x62, 0xf0, 0xe8, 0x25, 0x2a, 0x8d, 0xe2, 0x21, 0xea, 0xde, 0x6e, 0xa5,
      0xa4, 0x3d, 0x58, 0xee, 0xdf, 0x90, 0xc1, 0xa1, 0x38, 0x5d, 0x11, 0x50,
      0xb5, 0xac, 0x9d, 0xb4, 0xfd, 0xef, 0x53, 0xe8, 0xc0, 0x17, 0x6c, 0x4f,
      0x31, 0xe0, 0xcc, 0x8f, 0x80, 0x7a, 0x84, 0x14, 0xde, 0xee, 0xec, 0xdd,
      0x6a, 0xad, 0x29, 0x65, 0xa5, 0x72, 0xc3, 0x73, 0x5f, 0xe3, 0x6f, 0x60,
      0xb1, 0xfb, 0x0f, 0xaa, 0xc6, 0xda, 0x53, 0x4a, 0xb1, 0x92, 0x2a, 0xb7,
      0x02, 0xbe, 0xf9, 0xdf, 0x37, 0x16, 0xe7, 0x5c, 0x38, 0x0b, 0x3c, 0xe2,
      0xdd, 0x90, 0xb8, 0x7b, 0x48, 0x69, 0x79, 0x81, 0xc5, 0xae, 0x9a, 0x0d,
      0x78, 0x95, 0x52, 0x63, 0x80, 0xda, 0x46, 0x69, 0x20, 0x57, 0x9b, 0x27,
      0xe2, 0xe8, 0xbd, 0x2f, 0x45, 0xe6, 0x46, 0x40, 0xae, 0x50, 0xd5, 0xa2,
      0x53, 0x93, 0xe1, 0x99, 0xfd, 0x13, 0x7c, 0xf6, 0x22, 0xc4, 0x6c, 0xab,
      0xe3, 0xc9, 0x55, 0x0a, 0x16, 0x67, 0x68, 0x26, 0x6b, 0xd6, 0x7d, 0xde,
      0xd3, 0xae, 0x71, 0x32, 0x02, 0xf1, 0x27, 0x67, 0x47, 0x74, 0xd9, 0x40,
      0x35, 0x1d, 0x25, 0x72, 0x32, 0xdf, 0x75, 0xd5, 0x60, 0x26, 0xab, 0x90,
      0xfa, 0xeb, 0x26, 0x11, 0x4b, 0xb4, 0xc5, 0xc2, 0x3e, 0xa9, 0x23, 0x3a,
      0x4e, 0x6a, 0xb1, 0xbb, 0xb3, 0xea, 0xf9, 0x1e, 0xe4, 0x10, 0xf5, 0xdc,
      0x35, 0xde, 0xb5, 0xee, 0xf0, 0xde, 0xa1, 0x18, 0x80, 0xc7, 0x13, 0x68,
      0x46, 0x94, 0x0e, 0x2a, 0x8e, 0xf8, 0xe9, 0x26, 0x84, 0x42, 0x0f, 0x56,
      0xed, 0x67, 0x7f, 0xeb, 0x7d, 0x35, 0x07, 0x01, 0x11, 0x81, 0x8b, 0x56,
      0x88, 0xc6, 0x58, 0x61, 0x65, 0x3c, 0x5d, 0x9c, 0x58, 0x25, 0xd6, 0xdf,
      0x4e, 0x3b, 0x93, 0xbf, 0x82, 0xe1, 0x19, 0xb8, 0xda, 0xde, 0x26, 0x38,
      0xf2, 0xd9, 0x95, 0x24, 0x98, 0xde, 0x58, 0xf7, 0x0c, 0xe9, 0x32, 0xbb,
      0xcc, 0xf7, 0x92, 0x69, 0xa2, 0xf0, 0xc3, 0xfa, 0xd2, 0x31, 0x8b, 0x43,
      0x4e, 0x03, 0xe2, 0x13, 0x79, 0x6e, 0x73, 0x63, 0x3b, 0x45, 0xde, 0x80,
      0xf4, 0x26, 0xb1, 0x38, 0xed, 0x62, 0x55, 0xc6, 0x6a, 0x67, 0x00, 0x2d,
      0xba, 0xb2, 0xc5, 0xb6, 0x97, 0x62, 0x28, 0x64, 0x30, 0xb9, 0xfb, 0x3f,
      0x94, 0x03, 0x48, 0x36, 0x2c, 0x5d, 0xfd, 0x08, 0x96, 0x40, 0xd1, 0x6c,
      0xe5, 0xd0, 0xf8, 0x99, 0x40, 0x82, 0x87, 0xd7, 0xdc, 0x2f, 0x8b, 0xaa,
      0x31, 0x96, 0x0a, 0x34, 0x33, 0xa6, 0xf1, 0x84, 0x6e, 0x33, 0x73, 0xc5,
      0xe3, 0x26, 0xad, 0xd0, 0xcb, 0x62, 0x71, 0x82, 0xab, 0xd1, 0x82, 0x33,
      0xe6, 0xca, 0xd0, 0x3e, 0xf5, 0x4d, 0x12, 0x6e, 0xf1, 0x83, 0xbd, 0xdc,
      0x4d, 0xdf, 0x49, 0xbc, 0x63, 0xae, 0x7e, 0x59, 0xe8, 0x3c, 0x0d, 0xd6,
      0x1d, 0x41, 0x89, 0x72, 0x52, 0xc0, 0xae, 0xd1, 0x2f, 0x0a, 0x8a, 0xce,
      0x26, 0xd0, 0x3e, 0x0c, 0x71, 0x32, 0x52, 0xb2, 0xe4, 0xee, 0xa2, 0xe5,
      0x28, 0xb6, 0x33, 0x69, 0x97, 0x5a, 0x53, 0xdb, 0x56, 0x63, 0xe9, 0xb3,
      0x6d, 0x60, 0xf4, 0x7a, 0xce, 0xec, 0x36, 0x65, 0xd5, 0xca, 0x63, 0x2a,
      0x19, 0x90, 0x14, 0x7b, 0x02, 0x33, 0xfa, 0x11, 0x58, 0x5a, 0xd9, 0xc5,
      0x54, 0xf3, 0x28, 0xd5, 0x6e, 0xea, 0x85, 0xf5, 0x09, 0xbb, 0x81, 0x44,
      0x1c, 0x63, 0x66, 0x81, 0xc5, 0x96, 0x2d, 0x7c, 0x0e, 0x75, 0x7b, 0xb4,
      0x7e, 0x4e, 0x0c, 0xfd, 0x3c, 0xc5, 0x5a, 0x22, 0x85, 0x5c, 0xc8, 0xf3,
      0x97, 0x98, 0x2c, 0xe9, 0x46, 0xb4, 0x02, 0xcf, 0x7d, 0xa4, 0xf2, 0x44,
      0x7a, 0x89, 0x71, 0xa0, 0xfa, 0xb6, 0xa3, 0xaf, 0x13, 0x25, 0x46, 0xe2,
      0x64, 0xe3, 0x69, 0xba, 0xf9, 0x68, 0x5c, 0xc0, 0xb7, 0xa8, 0xa6, 0x4b,
      0xe1, 0x42, 0xe9, 0xb5, 0xc7, 0x84, 0xbb, 0xa6, 0x4b, 0x10, 0x4e, 0xd4,
      0x68, 0x70, 0x0a, 0x75, 0x2a, 0xbb, 0x9d, 0xa0, 0xcb, 0xf0, 0x36, 0x4c,
      0x70, 0x6c, 0x60, 0x4d, 0xfe, 0xe8, 0xc8, 0x66, 0x80, 0x1b, 0xf7, 0xcc,
      0x1a, 0xdd, 0x6b, 0xa7, 0xa7, 0x25, 0x61, 0x0c, 0x31, 0xf0, 0x34, 0x63,
      0x00, 0x0e, 0x48, 0x6a, 0x5a, 0x8d, 0x47, 0x94, 0x3f, 0x14, 0x16, 0xa8,
      0x8a, 0x49, 0xbb, 0x0c, 0x43, 0x21, 0xda, 0xf2, 0xc5, 0xd0, 0xff, 0x19,
      0x3e, 0x36, 0x64, 0x20, 0xb3, 0x70, 0xae, 0x54, 0xca, 0x73, 0x05, 0x56,
      0x7a, 0x49, 0x45, 0xe9, 0x46, 0xbc, 0xc2, 0x61, 0x70, 0x40, 0x7c, 0xb0,
      0xf7, 0xea, 0xc0, 0xd1, 0xb0, 0x77, 0x2c, 0xc7, 0xdd, 0x88, 0xcb, 0x9d,
      0xea, 0x55, 0x6c, 0x5c, 0x28, 0xb8, 0x84, 0x1c, 0x2c, 0x06,
  };
  uint8_t pub_bytes[HRSS_PUBLIC_KEY_BYTES];
  HRSS_marshal_public_key(pub_bytes, &pub);
  EXPECT_EQ(Bytes(pub_bytes), Bytes(kExpectedPub));

  static const uint8_t kExpectedPriv[HRSS_PRIVATE_KEY_BYTES] = {
      0x5a, 0x3c, 0x51, 0x06, 0x5a, 0x3c, 0x6c, 0x94, 0x20, 0x94, 0x6f, 0x94,
      0x20, 0x79, 0x32, 0x76, 0x20, 0x79, 0x32, 0xd0, 0xf1, 0xb6, 0x4f, 0xd1,
      0xf1, 0xb6, 0xe8, 0xbc, 0xe7, 0xb6, 0xe8, 0xbc, 0x5a, 0x3c, 0x51, 0x06,
      0x5a, 0x3c, 0x51, 0x39, 0x02, 0x39, 0x51, 0x39, 0x02, 0x79, 0x32, 0x76,
      0x20, 0x79, 0x32, 0xd0, 0xf1, 0xb6, 0x4f, 0xd1, 0xf1, 0x14, 0xac, 0x06,
      0xab, 0x00, 0xac, 0x06, 0x5a, 0x3c, 0x51, 0x06, 0x5a, 0x3c, 0x6c, 0x94,
      0x20, 0x94, 0x6f, 0x94, 0x20, 0x79, 0x32, 0x76, 0x20, 0x79, 0x32, 0xd0,
      0xf1, 0xb6, 0x4f, 0xd1, 0xf1, 0xb6, 0xe8, 0xbc, 0xe7, 0xb6, 0xe8, 0xbc,
      0x5a, 0x3c, 0x51, 0x06, 0x5a, 0x3c, 0x51, 0x39, 0x02, 0x39, 0x51, 0x39,
      0x02, 0x79, 0x32, 0x76, 0x20, 0x79, 0x32, 0x76, 0xd3, 0x5b, 0x31, 0x76,
      0xd3, 0xac, 0xe8, 0xbc, 0xe7, 0xb6, 0xe8, 0xbc, 0x96, 0xf2, 0x8d, 0xbc,
      0x96, 0xf2, 0x57, 0x39, 0x02, 0x39, 0x51, 0x39, 0x8e, 0x6b, 0x73, 0x24,
      0xae, 0x09, 0xd6, 0x93, 0xcc, 0x32, 0x0e, 0x97, 0x10, 0x46, 0x9b, 0x64,
      0x28, 0x51, 0x6c, 0x07, 0x72, 0x32, 0x0a, 0xaf, 0xdf, 0xd5, 0x73, 0x2a,
      0xc7, 0x1e, 0x19, 0x0b, 0xd3, 0x24, 0xe3, 0x18, 0x34, 0x18, 0x61, 0x13,
      0x53, 0xc6, 0xad, 0x86, 0xa6, 0x5a, 0x3d, 0x2f, 0x67, 0x62, 0xd2, 0x5e,
      0x8c, 0x4d, 0xf0, 0x0d, 0xc5, 0xde, 0x40, 0xd9, 0x48, 0xa3, 0xab, 0xf2,
      0x34, 0x95, 0xe1, 0xf0, 0xb3, 0x29, 0xc3, 0x43, 0x0e, 0xc9, 0xc1, 0x13,
      0x10, 0xef, 0x4d, 0x72, 0x20, 0xe3, 0x55, 0x4c, 0x7d, 0xd8, 0x54, 0x53,
      0x57, 0xd2, 0xc3, 0x8c, 0xa3, 0x74, 0xb3, 0x40, 0x3d, 0x61, 0x07, 0xe0,
      0xce, 0x4b, 0x08, 0x31, 0x8d, 0xad, 0xb3, 0x54, 0x8e, 0x20, 0xaa, 0x41,
      0x20, 0x84, 0x10, 0x7a, 0xb6, 0xa2, 0x05, 0xa3, 0x77, 0xb8, 0x77, 0x0a,
      0xbc, 0x5f, 0x63, 0xe5, 0x56, 0xd6, 0x20, 0x97, 0xa5, 0x17, 0x44, 0xb1,
      0x10, 0xa3, 0x2d, 0xef, 0x2d, 0xc1, 0x00, 0xce, 0x4b, 0xc2, 0x6c, 0x1b,
      0xef, 0xce, 0x83, 0xbc, 0x2f, 0x1b, 0xb5, 0xd3, 0xbb, 0x0c, 0xd0, 0x6e,
      0x3f, 0x94, 0x3d, 0x14, 0xc0, 0xe7, 0x80, 0x89, 0x61, 0xb7, 0xb7, 0xde,
      0xbd, 0xe0, 0x3c, 0x80, 0xce, 0x73, 0xd8, 0xae, 0x32, 0x40, 0x43, 0x03,
      0xd1, 0x8a, 0x70, 0x5f, 0x81, 0x5f, 0xb7, 0x20, 0x14, 0xb2, 0x5f, 0x14,
      0xc1, 0x19, 0x3c, 0xa8, 0x97, 0x81, 0x51, 0x48, 0x11, 0x97, 0xfa, 0xe9,
      0x43, 0x46, 0x1d, 0x98, 0x14, 0x48, 0x8b, 0xe0, 0xc2, 0xac, 0x4e, 0xdb,
      0xd5, 0x09, 0x51, 0x5b, 0x43, 0x52, 0xe4, 0x38, 0x2f, 0x49, 0xbb, 0x3f,
      0x94, 0xb1, 0x0a, 0x57, 0xd1, 0x03, 0x05, 0x78, 0xad, 0x81, 0x33, 0x35,
      0x30, 0xf8, 0x05, 0x7c, 0x7c, 0x6e, 0x74, 0x6f, 0x38, 0x48, 0x3a, 0xbb,
      0x5b, 0xff, 0x99, 0x43, 0x46, 0x3e, 0x51, 0x81, 0x62, 0xcb, 0xaf, 0x6b,
      0xf4, 0x30, 0x81, 0xef, 0xdc, 0x86, 0xd1, 0x7f, 0x52, 0xf0, 0xdc, 0x57,
      0x47, 0x08, 0x96, 0x5e, 0x1c, 0xd6, 0xfb, 0x4b, 0xdb, 0x43, 0xf9, 0x54,
      0xc6, 0x88, 0xa6, 0x69, 0x1f, 0x10, 0xe4, 0x8b, 0xe7, 0x5c, 0x8c, 0x86,
      0x82, 0xe6, 0xcb, 0xa3, 0x73, 0x14, 0x4d, 0xbc, 0x79, 0x09, 0x61, 0x1c,
      0x59, 0xf2, 0x52, 0xb9, 0x39, 0x03, 0x4f, 0x9a, 0x56, 0x8a, 0xc4, 0x55,
      0xe4, 0x3e, 0x96, 0x3b, 0x72, 0x2c, 0x31, 0x2f, 0xa8, 0x09, 0x7d, 0xc3,
      0xcb, 0x82, 0x63, 0x39, 0x73, 0x83, 0x06, 0x46, 0x55, 0x9b, 0x03, 0xef,
      0xc5, 0xf5, 0x21, 0x26, 0x7e, 0xa2, 0x72, 0x60, 0x2e, 0xa2, 0x5f, 0x53,
      0x2d, 0x19, 0x69, 0x79, 0xd0, 0xe7, 0x24, 0x47, 0xae, 0x32, 0x0b, 0x08,
      0xfb, 0xee, 0x73, 0x88, 0xe4, 0x5f, 0xf5, 0x7e, 0x94, 0x78, 0x54, 0xab,
      0x26, 0x4b, 0x61, 0x15, 0x30, 0x7b, 0x1c, 0x1b, 0xce, 0xdb, 0xff, 0x89,
      0xec, 0x34, 0xd8, 0xef, 0x43, 0xb0, 0xf7, 0x36, 0x07, 0xf0, 0x50, 0xdb,
      0x19, 0xf7, 0xd4, 0x0e, 0xd9, 0xa4, 0xf8, 0x23, 0x88, 0x82, 0xf0, 0xee,
      0xb6, 0x03, 0x8d, 0xf6, 0x32, 0xdd, 0x42, 0xf2, 0x12, 0x3e, 0x79, 0x0c,
      0xe2, 0x9e, 0x06, 0x9a, 0x02, 0xfb, 0xe5, 0xf2, 0x02, 0xab, 0x94, 0x53,
      0x4d, 0xa9, 0x2b, 0x0e, 0x77, 0x64, 0xd1, 0x57, 0xbb, 0x76, 0x3f, 0xd8,
      0x69, 0x7f, 0x6f, 0x6d, 0x68, 0xea, 0x2c, 0xbb, 0x10, 0xa9, 0x02, 0x31,
      0x92, 0xb6, 0xe8, 0x48, 0x3a, 0xe1, 0x16, 0x56, 0xc2, 0x8b, 0x99, 0x25,
      0x87, 0xeb, 0x10, 0x73, 0x39, 0xe6, 0xa2, 0xe2, 0xe6, 0x95, 0xbd, 0xb4,
      0xc5, 0x35, 0xed, 0x4e, 0x19, 0x5d, 0x41, 0x7e, 0x10, 0x8a, 0xdc, 0xb2,
      0x69, 0xc6, 0x66, 0x04, 0x30, 0x6f, 0x2c, 0x8b, 0x18, 0x01, 0xfd, 0xfc,
      0x50, 0xb0, 0x57, 0x20, 0x6f, 0xc1, 0x32, 0x87, 0x35, 0x82, 0xe3, 0xc5,
      0x44, 0xb9, 0xe7, 0x2b, 0xf3, 0x22, 0xd5, 0xd5, 0x05, 0xf6, 0x0f, 0x86,
      0x2c, 0x73, 0x0d, 0xb3, 0x8b, 0x31, 0xba, 0x9e, 0xe4, 0xac, 0xf1, 0x62,
      0x5e, 0x43, 0x67, 0xe3, 0x0a, 0x49, 0x82, 0xdb, 0x82, 0x59, 0x94, 0x7e,
      0xcd, 0xa5, 0xa2, 0x91, 0x72, 0x75, 0x76, 0x3c, 0x8f, 0xae, 0x7e, 0x9d,
      0xb8, 0x20, 0x8d, 0x58, 0xe5, 0x70, 0xa3, 0x2f, 0x87, 0xa9, 0x9c, 0xda,
      0x8e, 0xa4, 0xc0, 0xe4, 0x59, 0x1e, 0xcc, 0x1f, 0xd3, 0xb7, 0x02, 0x20,
      0xed, 0xdd, 0xdd, 0x96, 0x25, 0x96, 0x5d, 0x2c, 0xc4, 0xab, 0x69, 0x05,
      0xf7, 0x5d, 0x5e, 0x12, 0x44, 0x28, 0xbe, 0x1e, 0x90, 0xd8, 0x29, 0x84,
      0x2a, 0xc7, 0xc7, 0xba, 0x15, 0x07, 0xa6, 0x87, 0x69, 0x4e, 0x50, 0x90,
      0xe5, 0xca, 0x4e, 0x7f, 0x39, 0x7d, 0x67, 0x7f, 0x08, 0xad, 0xaf, 0xd7,
      0xb8, 0x17, 0xeb, 0x3f, 0x14, 0x26, 0x76, 0xba, 0xea, 0xc0, 0x74, 0x28,
      0x4e, 0x35, 0xaf, 0x80, 0x8b, 0x34, 0x9d, 0x4f, 0x0f, 0xc6, 0x9a, 0xd8,
      0xe8, 0x9f, 0xeb, 0xa6, 0x40, 0x3d, 0x9f, 0xb9, 0xce, 0xc3, 0x3c, 0xce,
      0xe4, 0xe0, 0x0a, 0x4e, 0x48, 0x24, 0x89, 0xa8, 0x11, 0xa2, 0x59, 0x78,
      0xa3, 0x8c, 0x14, 0x25, 0x55, 0xdd, 0x89, 0xd4, 0xa0, 0x92, 0x09, 0x89,
      0x8a, 0x56, 0xbb, 0x63, 0xc8, 0xab, 0x23, 0xbc, 0x68, 0xcd, 0xb3, 0xb1,
      0x30, 0x44, 0xe0, 0xc5, 0x23, 0xfb, 0xb1, 0xf6, 0xb7, 0xc3, 0x70, 0x82,
      0x5e, 0x59, 0xf3, 0xe3, 0x90, 0x41, 0xde, 0x0e, 0xbf, 0xbc, 0x72, 0x98,
      0xa9, 0x18, 0xd3, 0x7e, 0x4a, 0x0d, 0x53, 0xcd, 0xb2, 0x78, 0x73, 0xf3,
      0xcf, 0x03, 0x43, 0x41, 0x59, 0x8c, 0x8d, 0xaa, 0xe5, 0x52, 0x6e, 0x40,
      0x56, 0x1d, 0x88, 0x4a, 0x78, 0x3f, 0xc8, 0x5e, 0x98, 0xa5, 0xe3, 0xd8,
      0xf7, 0xd7, 0x8f, 0x50, 0x09, 0x2e, 0x88, 0x21, 0x4a, 0x3b, 0x23, 0xa8,
      0xa8, 0xd0, 0xdf, 0x70, 0x1b, 0x32, 0xd6, 0x4d, 0xdd, 0x7c, 0xaa, 0x47,
      0x73, 0x77, 0x92, 0xf8, 0xf4, 0x42, 0xd2, 0x1c, 0x99, 0x67, 0xd8, 0xec,
      0x4f, 0x22, 0x9b, 0xdd, 0x4d, 0xfb, 0xa2, 0x3a, 0x58, 0x2e, 0xff, 0x3c,
      0x01, 0x72, 0x58, 0x11, 0xbf, 0x22, 0xfb, 0x5b, 0x5d, 0xc1, 0xca, 0x39,
      0x73, 0xb6, 0x64, 0xa6, 0xc0, 0xc5, 0x19, 0x86, 0x79, 0xe6, 0xe8, 0x51,
      0x28, 0x60, 0x7c, 0xcd, 0x07, 0xc7, 0x93, 0xbf, 0x4e, 0xb9, 0x6f, 0xd7,
      0xd8, 0x7a, 0xe2, 0xc2, 0xbb, 0x16, 0x4d, 0xb3, 0xc8, 0x3a, 0xcb, 0xe3,
      0x45, 0x97, 0x76, 0xcf, 0x21, 0x91, 0xd6, 0x89, 0x9a, 0x59, 0xa9, 0x9a,
      0x01, 0x54, 0xce, 0xc3, 0x09, 0xeb, 0xf8, 0xdb, 0x03, 0x2d, 0x54, 0xb6,
      0xfd, 0xfd, 0xc0, 0x9d, 0xf8, 0x97, 0x2c, 0x2b, 0x12, 0x39, 0x2d, 0x9f,
      0x18, 0x18, 0x87, 0x5b, 0x32, 0x17, 0x25, 0x1c, 0x24, 0x3f, 0x11, 0x12,
      0xb6, 0x27, 0x69, 0x41, 0x2f, 0x74, 0xaf, 0x82, 0x34, 0xef, 0xb8, 0xfa,
      0x12, 0x33, 0x74, 0x88, 0x06, 0x31, 0x37, 0x6d, 0x7f, 0x60, 0xd5, 0xc9,
      0xe0, 0x83, 0x84, 0x99, 0xde, 0x6c, 0xfa, 0xdd, 0xf8, 0x62, 0x11, 0x01,
      0xaa, 0xd3, 0x54, 0x64, 0x84, 0xf0, 0x27, 0xe2, 0x61, 0x17, 0x33, 0xa1,
      0x13, 0x92, 0x14, 0xa6, 0x45, 0xaa, 0x86, 0xe8, 0x9d, 0x4c, 0xb3, 0xbf,
      0x63, 0x8f, 0x61, 0xe1, 0xc1, 0x76, 0x33, 0xd8, 0x9b, 0x16, 0x21, 0x0b,
      0xdc, 0x8f, 0xdf, 0x38, 0x32, 0x56, 0x52, 0x7e, 0x75, 0x54, 0x29, 0x82,
      0x0a, 0x72, 0x80, 0x56, 0xce, 0xcf, 0x01, 0xfb, 0x09, 0xd1, 0xdb, 0x92,
      0x82, 0x58, 0xc2, 0x3e, 0xaf, 0xf3, 0x62, 0x1c, 0xda, 0x8e, 0xcb, 0x10,
      0x35, 0x94, 0xda, 0x96, 0x73, 0x4e, 0x3a, 0x29, 0x78, 0xb1, 0xf1, 0xdf,
      0xc6, 0x34, 0x78, 0xb2, 0x48, 0x7d, 0x6e, 0x46, 0xb2, 0x16, 0x73, 0x23,
      0x70, 0xc9, 0x23, 0x47, 0x57, 0x98, 0xfa, 0xe8, 0x1a, 0xf8, 0xfd, 0x50,
      0x3c, 0x48, 0xb8, 0xa7, 0x35, 0xfb, 0x70, 0x9c, 0x66, 0x2c, 0x60, 0xf4,
      0x0a, 0x8e, 0xec, 0x18, 0x4b, 0x8f, 0xbe, 0x9b, 0x11, 0xec, 0x9e, 0x03,
      0xf3, 0xec, 0x4e, 0x7c, 0xb3, 0x5a, 0xac, 0x1f, 0x4a, 0x68, 0xac, 0x14,
      0x2d, 0x18, 0x83, 0xee, 0x81, 0x74, 0xc8, 0x02, 0xe8, 0x6e, 0xdd, 0xad,
      0xec, 0x6a, 0xc4, 0xb1, 0xc2, 0xcc, 0x2a, 0xd6, 0x87, 0xba, 0x7b, 0xf4,
      0xb5, 0x51, 0x1c, 0x6d, 0xa6, 0xdc, 0xae, 0xda, 0xe7, 0x0f, 0x3b, 0xf3,
      0x6e, 0x1e, 0xb9, 0x1b, 0xa7, 0x4b, 0xca, 0x45, 0x9e, 0xaa, 0xe9, 0xc3,
      0x1f, 0xef, 0x49, 0x9a, 0x4b, 0xc4, 0xe0, 0x0e, 0x6c, 0x7f, 0x5f, 0x7c,
      0x43, 0x4e, 0xdd, 0x79, 0x01, 0xc5, 0x9d, 0x09, 0xb9, 0x2a, 0x50, 0xa3,
      0x60, 0x00, 0x94, 0x27, 0x83, 0x20, 0xb0, 0x3d, 0xfa, 0xfe, 0x00, 0x21,
      0x1c, 0x32, 0x85, 0x72, 0x0f, 0x9d, 0x79, 0xec, 0x2c, 0x71, 0x67, 0x31,
      0xdb, 0x5a, 0x0a, 0x44, 0xc5, 0x22, 0xd0, 0x29, 0x71, 0x40, 0x05, 0x05,
      0x63, 0x68, 0x39, 0xf8, 0x8d, 0xa6, 0x83, 0x06, 0x0f, 0x5f, 0xa9, 0x99,
      0xd3, 0x53, 0x66, 0xf9, 0x50, 0xbe, 0xb0, 0xd4, 0x4c, 0x83, 0x18, 0x25,
      0x5b, 0xac, 0xaf, 0x99, 0x96, 0xc8, 0x0e, 0xf5, 0x1e, 0x3e, 0x63, 0xf4,
      0xf5, 0x8e, 0x9f, 0xaa, 0x01, 0x0e, 0x72, 0x88, 0x95, 0xcd, 0xac, 0x2d,
      0xf3, 0x3f, 0xed, 0x06, 0x41, 0x8a, 0x1f, 0xea, 0x5e, 0x2a, 0x57, 0x81,
      0x57, 0x09, 0xc2, 0x19, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
      0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3,
      0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf,
  };
  uint8_t priv_bytes[HRSS_PRIVATE_KEY_BYTES];
  HRSS_marshal_private_key(priv_bytes, &priv);
  EXPECT_EQ(Bytes(priv_bytes), Bytes(kExpectedPriv));

  uint8_t ciphertext[HRSS_CIPHERTEXT_BYTES];
  uint8_t shared_key[HRSS_KEY_BYTES];
  OPENSSL_STATIC_ASSERT(
      sizeof(kExpectedPriv) >= HRSS_ENCAP_BYTES,
      "Private key too small to use as input to HRSS encapsulation");
  HRSS_encap(ciphertext, shared_key, &pub, kExpectedPriv);

  static const uint8_t kExpectedCiphertext[HRSS_CIPHERTEXT_BYTES] = {
      0x9d, 0x19, 0x28, 0x6b, 0x5a, 0x30, 0x69, 0xc6, 0x70, 0xd1, 0x02, 0xa7,
      0x81, 0xff, 0x20, 0x7b, 0xdd, 0x86, 0xcd, 0x2d, 0x13, 0xf9, 0xbc, 0xb8,
      0x75, 0x26, 0xd9, 0xa8, 0x72, 0x43, 0x62, 0x5a, 0xa8, 0xbf, 0x41, 0xba,
      0x79, 0x3a, 0xcc, 0x6c, 0x72, 0x65, 0x64, 0x42, 0xc5, 0x0a, 0xca, 0xf7,
      0x56, 0xa0, 0x47, 0xf8, 0x04, 0xcb, 0x95, 0x6c, 0xe1, 0x24, 0xae, 0x21,
      0x9d, 0x3b, 0x1c, 0xe9, 0x2d, 0xc7, 0xc3, 0x0e, 0xf4, 0xc1, 0x66, 0xa6,
      0x6c, 0x95, 0x18, 0xe8, 0x4c, 0xab, 0xea, 0x2c, 0x8c, 0xa8, 0xb0, 0x38,
      0x97, 0x41, 0xbd, 0x2c, 0x6c, 0x05, 0x90, 0xda, 0x48, 0xcd, 0x9b, 0xca,
      0x7d, 0xe4, 0xf1, 0x8d, 0x26, 0xa0, 0xe5, 0xcc, 0x07, 0x4b, 0xd2, 0xa9,
      0x25, 0x88, 0xc6, 0x66, 0x49, 0xe1, 0xce, 0x90, 0xf4, 0x6f, 0xf5, 0x64,
      0x79, 0xd5, 0x6f, 0x3d, 0x05, 0x67, 0x32, 0x09, 0xe2, 0xed, 0xfc, 0xa0,
      0xad, 0x30, 0xfa, 0x6a, 0x43, 0xb0, 0x18, 0x99, 0x1d, 0xf5, 0x68, 0xac,
      0xf9, 0xaf, 0x8c, 0x55, 0xe9, 0x76, 0x20, 0x41, 0x91, 0x4a, 0x2f, 0x81,
      0x28, 0x13, 0x54, 0xc8, 0x46, 0x5e, 0x8d, 0x29, 0x3b, 0xc9, 0x91, 0x95,
      0x85, 0x56, 0xd6, 0xb5, 0x57, 0x09, 0xe5, 0x16, 0x0a, 0xfe, 0xdd, 0x29,
      0xac, 0x0c, 0x5d, 0xb2, 0xc3, 0xa5, 0x55, 0x9c, 0x87, 0xf9, 0xc7, 0x83,
      0x90, 0xdf, 0xee, 0x97, 0xf2, 0x5d, 0xc1, 0x4b, 0x31, 0xb1, 0x36, 0xe6,
      0x0b, 0x40, 0xbc, 0x05, 0xe1, 0xd6, 0xf4, 0xf3, 0x78, 0x6d, 0x0b, 0xc9,
      0xea, 0xb6, 0x6b, 0x88, 0x6a, 0x9b, 0x52, 0x35, 0x34, 0x78, 0x37, 0x9e,
      0xd8, 0x18, 0x49, 0x97, 0xa6, 0xd3, 0x88, 0x92, 0x8e, 0xe6, 0x66, 0x95,
      0x60, 0xfb, 0x76, 0x01, 0x53, 0x78, 0xc5, 0x46, 0x6e, 0x29, 0x83, 0xed,
      0xe1, 0x36, 0x73, 0xd7, 0xcb, 0xaa, 0xf4, 0xac, 0x52, 0x86, 0x2e, 0xdc,
      0xc2, 0xb8, 0x9c, 0x41, 0x76, 0xd7, 0x64, 0xa6, 0xb0, 0x58, 0x66, 0xc1,
      0x51, 0xc8, 0x36, 0xa9, 0x79, 0x0a, 0xf8, 0x84, 0xb3, 0xda, 0xe1, 0xf9,
      0x71, 0x75, 0x5e, 0x73, 0xdb, 0x8e, 0xd6, 0xda, 0xf3, 0x82, 0x51, 0x89,
      0x5d, 0x7c, 0x33, 0x95, 0xe0, 0x86, 0xc3, 0x34, 0xef, 0x84, 0x20, 0x01,
      0x7b, 0xc9, 0x05, 0x30, 0xd7, 0x2a, 0x05, 0xf9, 0xd8, 0x46, 0xa1, 0x88,
      0xa8, 0xb9, 0xda, 0x60, 0x6e, 0xe9, 0xf7, 0x48, 0x9a, 0x7b, 0x5f, 0xe8,
      0xe2, 0xed, 0xf8, 0x63, 0xa2, 0x61, 0x82, 0x39, 0x21, 0x9a, 0xc2, 0x4a,
      0x61, 0xfa, 0xd4, 0xc4, 0x0c, 0xd5, 0x67, 0x61, 0xcb, 0x9a, 0xeb, 0xe6,
      0x48, 0x03, 0xfc, 0xea, 0x29, 0x3d, 0xbc, 0x3f, 0x5b, 0x17, 0xc3, 0xee,
      0x41, 0x3d, 0xa8, 0x56, 0x8a, 0x07, 0xc2, 0x04, 0x50, 0x7f, 0x81, 0xe7,
      0x73, 0xe2, 0x49, 0x62, 0xa3, 0x6e, 0xa7, 0x52, 0x8d, 0x6f, 0x57, 0xed,
      0xea, 0x27, 0x0f, 0xdc, 0xa9, 0xaa, 0xcc, 0x87, 0x4c, 0xf4, 0x25, 0xd0,
      0x21, 0xa1, 0x0d, 0xd5, 0x6b, 0x74, 0xfe, 0xaa, 0xae, 0xd0, 0xe6, 0xa9,
      0xb5, 0x52, 0xca, 0xb8, 0x46, 0x52, 0x27, 0xfa, 0x31, 0x5a, 0x37, 0x73,
      0x9c, 0xae, 0x5c, 0x03, 0x03, 0x40, 0xc9, 0x7f, 0x44, 0x71, 0x8c, 0x9f,
      0x9d, 0x8f, 0x69, 0xd8, 0xc1, 0x28, 0xbd, 0xd3, 0xf1, 0xfd, 0x2e, 0xe8,
      0x95, 0x62, 0x83, 0xe0, 0x32, 0xa9, 0x0f, 0x6c, 0x7a, 0xb6, 0x09, 0xcc,
      0xa8, 0x9c, 0x10, 0xe4, 0x76, 0x73, 0x0e, 0x42, 0x04, 0xf5, 0x7d, 0xa5,
      0x99, 0xb3, 0x31, 0x87, 0xb8, 0xab, 0xf2, 0x69, 0xdf, 0x69, 0xe8, 0x19,
      0x7a, 0x3f, 0xe2, 0x02, 0xbf, 0xf0, 0x3c, 0x4b, 0x3a, 0x74, 0xae, 0xd4,
      0x84, 0xb6, 0xf3, 0x8b, 0xe1, 0x1b, 0x24, 0x07, 0x41, 0x62, 0x3c, 0x4e,
      0x1c, 0x30, 0x4f, 0xc0, 0xda, 0xb1, 0x88, 0xe8, 0xb3, 0xea, 0x33, 0xd2,
      0x78, 0xb3, 0xd3, 0x45, 0xab, 0x42, 0x2e, 0x30, 0xa8, 0x3f, 0x76, 0xea,
      0xbd, 0xe3, 0xd7, 0xb1, 0xc2, 0xba, 0x95, 0x90, 0x87, 0xd8, 0x12, 0xd9,
      0x1c, 0x89, 0xb6, 0xd4, 0xd2, 0x59, 0x94, 0xec, 0x2a, 0xcd, 0x88, 0x33,
      0x76, 0x2c, 0xb3, 0xe1, 0xf4, 0x8f, 0x5a, 0x2d, 0x7a, 0x1f, 0x2e, 0x26,
      0x50, 0x72, 0x05, 0x3f, 0xab, 0x2e, 0x8c, 0x17, 0xe8, 0x64, 0xc7, 0x74,
      0x29, 0x26, 0x87, 0x72, 0x36, 0x8a, 0x88, 0x94, 0xdd, 0xa6, 0xa0, 0xdc,
      0x78, 0x6f, 0xf2, 0x78, 0xdc, 0x35, 0xc5, 0xba, 0xcd, 0x34, 0x2e, 0xbb,
      0x84, 0xeb, 0x8e, 0x3c, 0xf5, 0x26, 0xf8, 0xbc, 0x46, 0xc9, 0x5e, 0x82,
      0xd0, 0xd1, 0x7d, 0x48, 0xe9, 0x89, 0x9a, 0x20, 0x5b, 0x2c, 0xb6, 0xc0,
      0xcc, 0xd8, 0x56, 0xe4, 0xb7, 0x84, 0x30, 0x18, 0x96, 0x2d, 0x16, 0x0c,
      0x70, 0x12, 0x14, 0x27, 0x37, 0x2d, 0xd9, 0xb7, 0x90, 0xde, 0x02, 0x6a,
      0xcf, 0x40, 0x39, 0x3c, 0x3a, 0x54, 0x91, 0x84, 0xac, 0x19, 0x76, 0x60,
      0x94, 0x7f, 0xff, 0xae, 0xac, 0x88, 0x0c, 0x57, 0xfa, 0x3b, 0xba, 0x32,
      0x68, 0x28, 0x1d, 0xf9, 0xb9, 0x5b, 0x80, 0x33, 0x16, 0xbe, 0xc5, 0x97,
      0x2d, 0xbf, 0x4b, 0x77, 0xd0, 0xc5, 0x5b, 0x93, 0x32, 0x75, 0x51, 0x55,
      0xc9, 0x31, 0x5e, 0x42, 0x08, 0xe9, 0x8c, 0x92, 0x9d, 0x54, 0xb4, 0x03,
      0xf7, 0x5d, 0x17, 0x9f, 0xe1, 0x55, 0x44, 0xa8, 0xf6, 0xd2, 0xdd, 0xe1,
      0x40, 0x35, 0x1d, 0x51, 0x22, 0xec, 0xe1, 0x97, 0x7b, 0xa6, 0x78, 0xa2,
      0x95, 0xcb, 0xb1, 0xf8, 0x7a, 0x41, 0xc5, 0x2b, 0x0c, 0xf0, 0xb5, 0xc5,
      0x95, 0x7c, 0xb1, 0x39, 0x0e, 0x0e, 0x50, 0x7d, 0x54, 0xc3, 0xd0, 0xae,
      0x61, 0x45, 0x14, 0x76, 0xbc, 0x31, 0xb7, 0x89, 0x57, 0x9f, 0xad, 0xf1,
      0xd8, 0x56, 0x6b, 0xe4, 0x49, 0x59, 0x6c, 0x12, 0x49, 0x41, 0x87, 0x6a,
      0xcc, 0x8e, 0x0f, 0x89, 0x7c, 0x24, 0xc9, 0x3e, 0x3e, 0x00, 0xa3, 0x8b,
      0x71, 0x7a, 0x69, 0x50, 0xad, 0xa4, 0x89, 0x6f, 0xe9, 0xc4, 0xfb, 0x76,
      0xa0, 0x35, 0x5f, 0xe3, 0xb2, 0xe0, 0x0b, 0xe0, 0xcd, 0x31, 0x87, 0x25,
      0x6c, 0xc4, 0xa1, 0x22, 0xf7, 0xb1, 0x9c, 0xe9, 0x0f, 0x92, 0x1a, 0x53,
      0x31, 0x15, 0x61, 0x4a, 0xcc, 0x77, 0x80, 0xe1, 0x12, 0xc0, 0x55, 0xd6,
      0xbb, 0x8e, 0x59, 0x05, 0xe0, 0xb2, 0xcf, 0x0d, 0x9e, 0xf3, 0x7a, 0x12,
      0xf5, 0xe7, 0x8a, 0xfc, 0x87, 0x28, 0xeb, 0xa4, 0x1b, 0x09, 0xf3, 0xf7,
      0xaf, 0x9f, 0x72, 0x41, 0x59, 0x31, 0xa6, 0x37, 0x83, 0xb7, 0x7c, 0x67,
      0xcd, 0x15, 0x45, 0x8a, 0x19, 0x5a, 0xdc, 0xf1, 0xf2, 0x24, 0x3e, 0x8f,
      0x92, 0x43, 0x4d, 0x68, 0x3f, 0x07, 0x5e, 0x63, 0xc5, 0x1c, 0xd0, 0xeb,
      0x71, 0x01, 0x9b, 0xe7, 0xd8, 0xe8, 0x1e, 0xf5, 0x7c, 0x76, 0xfb, 0x65,
      0xd4, 0xc0, 0x3e, 0xdb, 0x73, 0x18, 0xee, 0x1e, 0x2a, 0x84, 0xa9, 0xda,
      0x8f, 0x1c, 0x62, 0x40, 0x7e, 0x5a, 0x0a, 0xc6, 0x68, 0x72, 0xa5, 0xa5,
      0xbb, 0x41, 0x9a, 0x18, 0xc3, 0x29, 0x7b, 0x63, 0x94, 0xb1, 0xe3, 0x17,
      0xea, 0x11, 0x3c, 0xee, 0x16, 0xe1, 0x51, 0xa0, 0x53, 0xae, 0x8e, 0xc8,
      0x11, 0x96, 0x20, 0x3b, 0x35, 0x7f, 0x04, 0xc4, 0x23, 0xab, 0x51, 0x60,
      0x98, 0x5d, 0x15, 0x1d, 0x58, 0x51, 0xb4, 0xc8, 0x5c, 0x28, 0x59, 0x83,
      0x53, 0xe9, 0xd8, 0x1f, 0xc5, 0xa1, 0xa6, 0x3b, 0x66, 0xc8, 0x22, 0xc3,
      0x01, 0xef, 0x80, 0xc7, 0xe6, 0xe6, 0xe0, 0xe2, 0x32, 0x8c, 0x58, 0x34,
      0x4e, 0x8a, 0x0d, 0xa8, 0xf3, 0x7d, 0x24, 0xef, 0x35, 0xae, 0x87, 0x0f,
      0xcb, 0x85, 0xb4, 0xbd, 0x05, 0x14, 0xa7, 0xef, 0x50, 0x71, 0xf4, 0x49,
      0x9f, 0x76, 0x0c, 0xb4, 0x8c, 0x3c, 0x48, 0x8c, 0x71, 0x1a, 0x15, 0x2c,
      0x03, 0xab, 0xbb, 0xa0, 0xfa, 0x40, 0x72, 0xc2, 0x65, 0x8a, 0x0a, 0xa0,
      0x0d, 0xfb, 0xff, 0x4a, 0x76, 0x8f, 0xd8, 0x58, 0x22, 0x57, 0xdf, 0x40,
      0x26, 0x6c, 0xbd, 0x14, 0xa1, 0xe2, 0xd6, 0xde, 0x5d, 0x2f, 0x13, 0x48,
      0x38, 0xa4, 0x4a, 0xb2, 0xc4, 0xc3, 0xcb, 0x22, 0x6d, 0xc2, 0xa1, 0x85,
      0x9c, 0xb5, 0xb9, 0xb2, 0xb8, 0xd1, 0x25, 0x31, 0x17, 0x73, 0x90, 0x37,
      0x2d, 0x7d, 0xec, 0x56, 0x20, 0xfb, 0xb9, 0x4c, 0x09, 0x66, 0x5e, 0xde,
      0x7c, 0x5b, 0xbe, 0x76, 0x55, 0xb0, 0x19, 0x9e, 0x18, 0x0f, 0x51, 0x42,
      0x73, 0x46, 0x03, 0x32, 0x3a, 0x30, 0x95, 0xa0, 0x88, 0xc4, 0x71, 0xb9,
      0x9b, 0x3d, 0xc0, 0xd5, 0xd3, 0xe0, 0xbd, 0xcf, 0x82, 0xe5, 0x2f, 0x35,
      0x94, 0x52, 0x24, 0x9f, 0xb8, 0xc3,
  };
  EXPECT_EQ(Bytes(ciphertext), Bytes(kExpectedCiphertext));

  static const uint8_t kExpectedSharedKey[HRSS_KEY_BYTES] = {
      0xc6, 0x7a, 0xe7, 0xe1, 0x84, 0xae, 0x3e, 0x82, 0x76, 0x40, 0x51,
      0x44, 0x6c, 0xde, 0x32, 0x0f, 0xc6, 0x0b, 0xfb, 0xd4, 0xab, 0xef,
      0xb8, 0x6e, 0x17, 0x0a, 0xd4, 0xc7, 0x2d, 0x0e, 0xd7, 0xd7,
  };
  EXPECT_EQ(Bytes(shared_key), Bytes(kExpectedSharedKey));

  HRSS_decap(shared_key, &pub, &priv, ciphertext, sizeof(ciphertext));
  EXPECT_EQ(Bytes(shared_key, sizeof(shared_key)),
            Bytes(kExpectedSharedKey, sizeof(kExpectedSharedKey)));

  // Corrupt the ciphertext and ensure that the failure key is constant.
  ciphertext[50] ^= 4;
  HRSS_decap(shared_key, &pub, &priv, ciphertext, sizeof(ciphertext));

  static const uint8_t kExpectedFailureKey[HRSS_KEY_BYTES] = {
      0x02, 0x91, 0x9e, 0x31, 0x70, 0xe8, 0x25, 0x88, 0x99, 0x46, 0x08,
      0x0c, 0xc7, 0x5a, 0x12, 0x61, 0x1a, 0x14, 0x6e, 0x00, 0x05, 0x59,
      0xd9, 0x3f, 0x41, 0x8d, 0xe3, 0xf6, 0x6a, 0xab, 0xa6, 0x76,
  };
  EXPECT_EQ(Bytes(shared_key), Bytes(kExpectedFailureKey));
}
