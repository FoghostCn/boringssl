/* Copyright (c) 2018, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

#include <gtest/gtest.h>

#include <openssl/hrss.h>
#include <openssl/rand.h>

#include "../test/test_util.h"

static void hexdump(const uint8_t *in, size_t len) {
  for (size_t i = 0; i < len; i++) {
    printf("%02x", in[i]);
  }
  printf("\n");
}

TEST(HRSS, Basic) {
  uint8_t generate_key_entropy[HRSS_GENERATE_KEY_BYTES];
  for (unsigned i = 0; i < sizeof(generate_key_entropy); i++) {
    generate_key_entropy[i] = i;
  }

  HRSS_public_key pub;
  HRSS_private_key priv;
  HRSS_generate_key(&pub, &priv, generate_key_entropy);

  uint8_t encap_entropy[HRSS_ENCAP_BYTES];
  for (unsigned i = 0; i < sizeof(encap_entropy); i++) {
    encap_entropy[i] = i;
  }

  uint8_t ciphertext[HRSS_CIPHERTEXT_BYTES];
  uint8_t shared_key[HRSS_KEY_BYTES];
  HRSS_encap(ciphertext, shared_key, &pub, encap_entropy);

  uint8_t shared_key2[HRSS_KEY_BYTES];
  HRSS_decap(shared_key2, &pub, &priv, ciphertext, sizeof(ciphertext));

  EXPECT_EQ(Bytes(shared_key), Bytes(shared_key2));
}

TEST(HRSS, Random) {
  for (unsigned i = 0; i < 10; i++) {
    SCOPED_TRACE(i);
    uint8_t generate_key_entropy[HRSS_GENERATE_KEY_BYTES];
    RAND_bytes(generate_key_entropy, sizeof(generate_key_entropy));

    HRSS_public_key pub;
    HRSS_private_key priv;
    HRSS_generate_key(&pub, &priv, generate_key_entropy);

    for (unsigned j = 0; j < 10; j++) {
      SCOPED_TRACE(j);
      uint8_t encap_entropy[HRSS_ENCAP_BYTES];
      RAND_bytes(encap_entropy, sizeof(encap_entropy));

      uint8_t ciphertext[HRSS_CIPHERTEXT_BYTES];
      uint8_t shared_key[HRSS_KEY_BYTES];
      HRSS_encap(ciphertext, shared_key, &pub, encap_entropy);

      uint8_t shared_key2[HRSS_KEY_BYTES];
      HRSS_decap(shared_key2, &pub, &priv, ciphertext, sizeof(ciphertext));

      EXPECT_EQ(Bytes(shared_key), Bytes(shared_key2));
      if (OPENSSL_memcmp(shared_key, shared_key2, sizeof(shared_key))) {
        hexdump(generate_key_entropy, sizeof(generate_key_entropy));
        hexdump(encap_entropy, sizeof(encap_entropy));
        return;
      }
    }
  }
}

TEST(HRSS, Golden) {
  uint8_t generate_key_entropy[HRSS_GENERATE_KEY_BYTES];
  for (unsigned i = 0; i < HRSS_SAMPLE_BYTES; i++) {
    generate_key_entropy[i] = i;
  }
  for (unsigned i = HRSS_SAMPLE_BYTES; i < 2 * HRSS_SAMPLE_BYTES; i++) {
    generate_key_entropy[i] = 2 + i;
  }
  for (unsigned i = 2 * HRSS_SAMPLE_BYTES; i < sizeof(generate_key_entropy);
       i++) {
    generate_key_entropy[i] = 4 + i;
  }

  HRSS_public_key pub;
  HRSS_private_key priv;
  OPENSSL_memset(&pub, 0, sizeof(pub));
  OPENSSL_memset(&priv, 0, sizeof(priv));
  HRSS_generate_key(&pub, &priv, generate_key_entropy);

  static const uint8_t kExpected[sizeof(pub)] = {
      0xf8, 0x1f, 0x04, 0x05, 0x7f, 0x1c, 0xa9, 0x15, 0xdf, 0x14, 0xc7, 0x1a,
      0xa0, 0x0c, 0xce, 0x01, 0x37, 0x18, 0xe8, 0x08, 0xc2, 0x1c, 0x3d, 0x0d,
      0xd1, 0x10, 0x3f, 0x0e, 0x0a, 0x1e, 0x22, 0x14, 0xa1, 0x08, 0x5c, 0x0b,
      0xca, 0x16, 0x74, 0x00, 0xd3, 0x1c, 0x37, 0x07, 0x32, 0x0c, 0x1a, 0x07,
      0x0c, 0x05, 0x40, 0x13, 0x1b, 0x13, 0x98, 0x01, 0x42, 0x0d, 0x83, 0x1b,
      0x31, 0x10, 0x95, 0x03, 0x49, 0x14, 0x00, 0x10, 0xf5, 0x06, 0x39, 0x1c,
      0x3d, 0x04, 0x85, 0x0c, 0xdd, 0x18, 0xda, 0x08, 0x68, 0x1f, 0x20, 0x18,
      0xf2, 0x1c, 0x24, 0x0f, 0xd3, 0x12, 0xbf, 0x0b, 0xc1, 0x19, 0x02, 0x1d,
      0x06, 0x08, 0xda, 0x11, 0xd9, 0x0c, 0xc7, 0x04, 0xa0, 0x15, 0x38, 0x03,
      0x75, 0x13, 0xd4, 0x1d, 0xb8, 0x18, 0x23, 0x0a, 0xbf, 0x07, 0xa1, 0x03,
      0x67, 0x01, 0x80, 0x1e, 0x06, 0x18, 0xe3, 0x04, 0x2e, 0x00, 0x35, 0x0e,
      0x63, 0x15, 0x12, 0x19, 0xa7, 0x12, 0x80, 0x15, 0x6c, 0x14, 0x4e, 0x14,
      0xc2, 0x11, 0xd6, 0x1a, 0x99, 0x1e, 0xbb, 0x17, 0x03, 0x17, 0xce, 0x0d,
      0x37, 0x0f, 0x4e, 0x06, 0x5e, 0x04, 0x89, 0x1d, 0xf3, 0x08, 0x7c, 0x19,
      0x63, 0x05, 0x66, 0x1f, 0x86, 0x0d, 0xfb, 0x1c, 0x3c, 0x07, 0xae, 0x0f,
      0x82, 0x19, 0x0f, 0x01, 0x9a, 0x00, 0xa9, 0x0e, 0x86, 0x0d, 0xcb, 0x18,
      0xd4, 0x05, 0x76, 0x11, 0x30, 0x1b, 0x0e, 0x01, 0x63, 0x13, 0xa4, 0x17,
      0x11, 0x08, 0x75, 0x16, 0x26, 0x15, 0x1e, 0x1b, 0x33, 0x15, 0xe9, 0x1c,
      0x71, 0x1c, 0xbc, 0x19, 0xf2, 0x13, 0x31, 0x08, 0x36, 0x19, 0x53, 0x0d,
      0xb5, 0x0e, 0xc9, 0x12, 0x84, 0x14, 0xed, 0x15, 0xa3, 0x0f, 0xa6, 0x0f,
      0xbe, 0x1b, 0x39, 0x1b, 0x75, 0x1f, 0x27, 0x1d, 0x01, 0x18, 0xc6, 0x0b,
      0xac, 0x1e, 0xad, 0x1f, 0x1c, 0x0b, 0x6a, 0x19, 0x16, 0x04, 0xe1, 0x01,
      0xdf, 0x05, 0xdf, 0x07, 0x06, 0x02, 0x23, 0x05, 0x08, 0x1a, 0x3c, 0x1a,
      0x86, 0x10, 0x5b, 0x04, 0x2a, 0x02, 0xad, 0x07, 0xa5, 0x07, 0x90, 0x0c,
      0xdd, 0x13, 0x72, 0x19, 0x59, 0x19, 0x0f, 0x14, 0x01, 0x0f, 0x06, 0x0a,
      0x6d, 0x0a, 0x1c, 0x1f, 0xe6, 0x13, 0xb5, 0x05, 0xb8, 0x16, 0xe8, 0x14,
      0xdf, 0x08, 0xce, 0x12, 0xf2, 0x19, 0x6d, 0x0e, 0xba, 0x0e, 0x77, 0x13,
      0x5b, 0x0c, 0x96, 0x13, 0x75, 0x1d, 0x7e, 0x0a, 0x72, 0x14, 0x49, 0x0c,
      0xc6, 0x07, 0x5c, 0x00, 0x0e, 0x15, 0x8c, 0x0b, 0xc3, 0x0a, 0x64, 0x06,
      0x02, 0x07, 0x3b, 0x13, 0xee, 0x1c, 0x4f, 0x15, 0x37, 0x11, 0xa1, 0x10,
      0xe8, 0x08, 0x12, 0x1b, 0x5b, 0x13, 0x80, 0x0a, 0x3e, 0x01, 0x24, 0x16,
      0xa5, 0x06, 0x81, 0x0a, 0xfe, 0x1e, 0x45, 0x16, 0x07, 0x01, 0xaa, 0x03,
      0x14, 0x0e, 0x25, 0x15, 0x16, 0x0b, 0xa9, 0x07, 0x17, 0x13, 0xe1, 0x0e,
      0x04, 0x1b, 0x32, 0x11, 0xd8, 0x02, 0xbb, 0x04, 0xd8, 0x0f, 0xb0, 0x14,
      0xf2, 0x15, 0xe7, 0x05, 0x9b, 0x04, 0x33, 0x0d, 0x81, 0x13, 0xe0, 0x1c,
      0xeb, 0x05, 0x22, 0x11, 0xba, 0x0e, 0xcd, 0x1c, 0x4f, 0x0f, 0xf0, 0x08,
      0x66, 0x07, 0xc6, 0x07, 0xf6, 0x18, 0xa5, 0x1d, 0x87, 0x15, 0xd4, 0x1a,
      0xcb, 0x0e, 0xc0, 0x17, 0x7e, 0x05, 0x4d, 0x09, 0xe7, 0x1f, 0xa3, 0x11,
      0x5d, 0x15, 0x9c, 0x03, 0xb3, 0x18, 0x79, 0x00, 0x64, 0x1c, 0xc6, 0x18,
      0x39, 0x0c, 0xc1, 0x0c, 0x64, 0x12, 0xf5, 0x1b, 0x86, 0x0d, 0x29, 0x12,
      0x2c, 0x18, 0x16, 0x15, 0xfb, 0x18, 0x5c, 0x0a, 0xa1, 0x00, 0x2c, 0x04,
      0x12, 0x04, 0xb6, 0x1d, 0x6d, 0x11, 0xe7, 0x1a, 0xb1, 0x1b, 0xc1, 0x10,
      0x63, 0x12, 0xe4, 0x18, 0xf8, 0x05, 0x8d, 0x1c, 0xac, 0x1c, 0x91, 0x0b,
      0x82, 0x0f, 0xcc, 0x09, 0x02, 0x03, 0x22, 0x17, 0x99, 0x0d, 0x30, 0x17,
      0x2a, 0x02, 0x79, 0x15, 0x89, 0x07, 0x54, 0x07, 0x4a, 0x1f, 0xd8, 0x10,
      0x72, 0x09, 0xff, 0x0b, 0x0d, 0x11, 0x63, 0x1d, 0x38, 0x18, 0x87, 0x1b,
      0xfd, 0x04, 0xcb, 0x0b, 0x2d, 0x02, 0x8b, 0x15, 0xe3, 0x02, 0x72, 0x1c,
      0x91, 0x1c, 0x62, 0x09, 0x9e, 0x01, 0x34, 0x1f, 0xec, 0x06, 0x83, 0x02,
      0xdf, 0x16, 0xa8, 0x15, 0xf7, 0x1f, 0x6e, 0x1e, 0x8a, 0x1d, 0xe9, 0x1e,
      0xa8, 0x19, 0x62, 0x03, 0x26, 0x13, 0x66, 0x1e, 0x94, 0x00, 0xaf, 0x00,
      0x99, 0x18, 0x62, 0x1f, 0xb5, 0x19, 0x2f, 0x13, 0x5b, 0x0d, 0x9e, 0x06,
      0xc6, 0x0e, 0x13, 0x1f, 0x6e, 0x17, 0x5e, 0x09, 0x8b, 0x01, 0x1e, 0x1d,
      0x25, 0x0a, 0x69, 0x14, 0x78, 0x08, 0xd4, 0x1d, 0xed, 0x16, 0x52, 0x12,
      0xf6, 0x00, 0xcb, 0x1d, 0xdf, 0x10, 0x0c, 0x0e, 0x28, 0x0e, 0xba, 0x02,
      0x01, 0x15, 0x5a, 0x16, 0x76, 0x12, 0xb6, 0x1f, 0xef, 0x13, 0x42, 0x07,
      0xf0, 0x05, 0xd8, 0x1e, 0x14, 0x03, 0x70, 0x06, 0x3f, 0x02, 0x50, 0x0f,
      0x84, 0x14, 0xf0, 0x16, 0x3b, 0x1b, 0xbb, 0x15, 0xd6, 0x1a, 0x94, 0x12,
      0x95, 0x0a, 0x6e, 0x18, 0x73, 0x1f, 0x1a, 0x1f, 0x1b, 0x18, 0x62, 0x17,
      0xff, 0x00, 0x55, 0x03, 0x6b, 0x0f, 0x4a, 0x09, 0xb1, 0x12, 0x54, 0x19,
      0xad, 0x00, 0x7c, 0x13, 0xff, 0x1d, 0x1b, 0x0b, 0x9c, 0x13, 0x0b, 0x07,
      0x0b, 0x1c, 0x11, 0x0f, 0x37, 0x04, 0x71, 0x17, 0x87, 0x14, 0xb4, 0x1c,
      0x05, 0x16, 0xd8, 0x15, 0x9a, 0x0d, 0xc0, 0x0b, 0xa5, 0x14, 0xc6, 0x00,
      0xa8, 0x0d, 0xa3, 0x14, 0x81, 0x1c, 0x6a, 0x13, 0x27, 0x02, 0x47, 0x0f,
      0xef, 0x0b, 0x8a, 0x0c, 0x6e, 0x04, 0x20, 0x17, 0x42, 0x15, 0x5a, 0x14,
      0x53, 0x13, 0x0c, 0x0f, 0x66, 0x1f, 0x27, 0x18, 0x67, 0x0f, 0x11, 0x02,
      0xb3, 0x0d, 0x75, 0x1c, 0xc9, 0x15, 0x52, 0x10, 0xc5, 0x19, 0xd0, 0x0c,
      0xb2, 0x06, 0xeb, 0x1e, 0x79, 0x0f, 0xda, 0x15, 0x71, 0x12, 0x11, 0x08,
      0xfc, 0x09, 0xce, 0x0e, 0x44, 0x17, 0x6c, 0x00, 0xd5, 0x14, 0xa3, 0x04,
      0x72, 0x12, 0xf9, 0x0e, 0x5d, 0x15, 0xc1, 0x0c, 0xb2, 0x0a, 0x48, 0x1d,
      0xaf, 0x1b, 0x24, 0x02, 0x4b, 0x14, 0x2d, 0x16, 0xb0, 0x0f, 0x52, 0x07,
      0xa2, 0x03, 0x27, 0x15, 0xc5, 0x0e, 0x77, 0x16, 0xea, 0x19, 0xf7, 0x00,
      0x39, 0x04, 0xea, 0x19, 0x5d, 0x03, 0xef, 0x1a, 0xba, 0x03, 0xde, 0x1b,
      0xa1, 0x18, 0x00, 0x1c, 0xf1, 0x04, 0xd0, 0x0c, 0x44, 0x09, 0x07, 0x15,
      0x38, 0x02, 0x3f, 0x1d, 0x26, 0x04, 0x14, 0x1a, 0x83, 0x15, 0xda, 0x0f,
      0xf6, 0x17, 0xf5, 0x1e, 0xd5, 0x1c, 0x20, 0x00, 0x11, 0x01, 0x5c, 0x14,
      0x15, 0x02, 0x8d, 0x11, 0x15, 0x16, 0x32, 0x1e, 0x74, 0x11, 0x13, 0x0b,
      0x25, 0x16, 0xfe, 0x16, 0xd3, 0x0e, 0x26, 0x1f, 0x2b, 0x18, 0xf0, 0x0c,
      0xe0, 0x0a, 0xdb, 0x1b, 0x26, 0x18, 0x91, 0x0f, 0x76, 0x05, 0x49, 0x10,
      0xe9, 0x0d, 0xac, 0x1b, 0x33, 0x04, 0x5d, 0x06, 0xbb, 0x0c, 0xbe, 0x17,
      0x64, 0x1a, 0x44, 0x01, 0x3f, 0x0c, 0x7d, 0x09, 0xc7, 0x0c, 0x71, 0x08,
      0x4e, 0x03, 0x10, 0x1f, 0x44, 0x1e, 0xdc, 0x06, 0x37, 0x16, 0x9d, 0x02,
      0x79, 0x03, 0x90, 0x1e, 0x26, 0x11, 0xc5, 0x09, 0xbb, 0x18, 0xaa, 0x0c,
      0xac, 0x16, 0x33, 0x00, 0xb4, 0x08, 0x57, 0x16, 0xc5, 0x16, 0xbd, 0x14,
      0x18, 0x0a, 0xc8, 0x00, 0x93, 0x1b, 0xfd, 0x1f, 0x50, 0x0e, 0x00, 0x09,
      0x36, 0x0c, 0xe9, 0x0a, 0x3f, 0x02, 0x2c, 0x01, 0x14, 0x0d, 0xb6, 0x12,
      0x43, 0x03, 0x3f, 0x13, 0x40, 0x02, 0x3c, 0x1c, 0x35, 0x17, 0x5f, 0x16,
      0xa8, 0x1a, 0x18, 0x0b, 0x2a, 0x10, 0x66, 0x06, 0xa6, 0x11, 0x27, 0x14,
      0xdb, 0x0c, 0xe6, 0x0a, 0x3c, 0x0e, 0x93, 0x16, 0x42, 0x0f, 0x59, 0x0c,
      0x71, 0x02, 0x5c, 0x0d, 0xb4, 0x00, 0x67, 0x0c, 0xae, 0x0c, 0x68, 0x1f,
      0xd4, 0x17, 0x49, 0x02, 0x6e, 0x11, 0x1f, 0x0c, 0x2f, 0x17, 0x9b, 0x1e,
      0x9d, 0x04, 0xde, 0x11, 0xb9, 0x1a, 0x2f, 0x0b, 0xe8, 0x1c, 0x69, 0x10,
      0x75, 0x07, 0x82, 0x12, 0x28, 0x07, 0x29, 0x00, 0xbb, 0x06, 0xfa, 0x05,
      0x0a, 0x0a, 0x74, 0x16, 0x09, 0x14, 0x7d, 0x18, 0x10, 0x07, 0x19, 0x09,
      0xc9, 0x12, 0xdc, 0x1d, 0xa2, 0x05, 0x47, 0x11, 0xed, 0x0c, 0xd2, 0x0e,
      0xa9, 0x15, 0xa9, 0x0d, 0x5b, 0x0d, 0x2c, 0x1d, 0xb3, 0x0d, 0x03, 0x03,
      0xbd, 0x1e, 0x9c, 0x19, 0x6e, 0x13, 0xb2, 0x0a, 0x2b, 0x0f, 0x4c, 0x05,
      0x19, 0x10, 0xa4, 0x18, 0x9e, 0x00, 0x66, 0x14, 0x1f, 0x01, 0x2c, 0x0d,
      0x65, 0x17, 0x98, 0x0a, 0xf3, 0x08, 0xa9, 0x16, 0x9b, 0x1a, 0x0b, 0x0b,
      0x9f, 0x10, 0xdd, 0x00, 0x12, 0x11, 0x63, 0x0c, 0x66, 0x01, 0x2c, 0x16,
      0x65, 0x0b, 0xf8, 0x1c, 0x50, 0x17, 0x3d, 0x1a, 0xfa, 0x19, 0x89, 0x01,
      0xfd, 0x1c, 0x29, 0x16, 0x96, 0x08, 0x0a, 0x19, 0x85, 0x1c, 0xf9, 0x0b,
      0x62, 0x12, 0x25, 0x1d, 0x46, 0x14, 0x15, 0x18, 0x73, 0x1f, 0x48, 0x05,
      0x4f, 0x04, 0xbd, 0x04, 0xc6, 0x01, 0x54, 0x1f, 0xb6, 0x03, 0x7d, 0x1d,
      0x44, 0x09, 0x8c, 0x04, 0x4e, 0x16, 0xf1, 0x14, 0xe9, 0x06, 0x1f, 0x0d,
      0x5c, 0x00, 0xbe, 0x05, 0xaa, 0x09, 0x97, 0x02, 0x2e, 0x14, 0xf4, 0x1a,
      0x1e, 0x13, 0x70, 0x17, 0xa6, 0x0b, 0x82, 0x10, 0x13, 0x15, 0xd1, 0x00,
      0xa7, 0x10, 0x3a, 0x15, 0xec, 0x16, 0x13, 0x14, 0xcb, 0x10, 0xb7, 0x01,
      0x13, 0x1c, 0xd8, 0x00, 0xd6, 0x04, 0x7f, 0x14, 0x23, 0x1b, 0x0c, 0x10,
      0x1b, 0x17, 0x67, 0x16, 0x46, 0x17, 0xd7, 0x0e, 0x7a, 0x1a, 0x92, 0x10,
      0x31, 0x04, 0x06, 0x1e, 0x34, 0x03, 0x03, 0x10, 0x03, 0x12, 0xd4, 0x14,
      0xd5, 0x18, 0x23, 0x0a, 0xfe, 0x10, 0xc2, 0x02, 0xa8, 0x0a, 0x4c, 0x1a,
      0x2e, 0x03, 0x86, 0x02, 0xa2, 0x0d, 0xf9, 0x02, 0x43, 0x1f, 0x3f, 0x03,
      0x3e, 0x16, 0x21, 0x03, 0xc8, 0x0c, 0xe1, 0x1c, 0x4a, 0x05, 0xe5, 0x19,
      0x15, 0x18, 0x4a, 0x0f, 0x49, 0x05, 0x4a, 0x17, 0x11, 0x0f, 0x85, 0x03,
      0x06, 0x07, 0x20, 0x1e, 0xc1, 0x1e, 0x5e, 0x1d, 0xc0, 0x11, 0x86, 0x1d,
      0x1d, 0x0b, 0x8e, 0x1b, 0x8d, 0x18, 0xe5, 0x0e, 0xaa, 0x17, 0x8a, 0x0d,
      0x5c, 0x08, 0xc1, 0x05, 0x21, 0x07, 0x58, 0x0c, 0x73, 0x1e,
  };
  EXPECT_EQ(Bytes(reinterpret_cast<const uint8_t *>(&pub), sizeof(pub)),
            Bytes(kExpected, sizeof(kExpected)));

  static const uint8_t kExpectedPriv[sizeof(priv)] = {
      0x40, 0x01, 0x01, 0x14, 0x40, 0x01, 0x01, 0x14, 0x40, 0x01, 0x01, 0x14,
      0xea, 0xab, 0xab, 0xbe, 0xea, 0xab, 0xab, 0xbe, 0x40, 0x01, 0x01, 0x14,
      0x40, 0x01, 0x01, 0x14, 0x40, 0x01, 0x01, 0x14, 0xea, 0xab, 0xab, 0xbe,
      0x40, 0x01, 0x01, 0x14, 0x40, 0x01, 0x01, 0x14, 0x40, 0x01, 0x01, 0x14,
      0x40, 0x01, 0x01, 0x14, 0xea, 0xab, 0xab, 0xbe, 0xea, 0xab, 0xab, 0xbe,
      0x40, 0x01, 0x01, 0x14, 0x40, 0x01, 0x01, 0x14, 0x40, 0x01, 0x01, 0x14,
      0x40, 0x01, 0x01, 0x14, 0xea, 0xab, 0xab, 0xbe, 0xea, 0xab, 0xab, 0xbe,
      0x40, 0x01, 0x01, 0x04, 0x14, 0x40, 0x40, 0x01, 0xbe, 0xea, 0xea, 0xab,
      0xbe, 0xea, 0xea, 0xab, 0x14, 0x40, 0x40, 0x01, 0x14, 0x40, 0x40, 0x01,
      0x14, 0x40, 0x40, 0x01, 0x14, 0x40, 0x40, 0x01, 0xbe, 0xea, 0xea, 0xab,
      0x14, 0x40, 0x40, 0x01, 0x14, 0x40, 0x40, 0x01, 0x14, 0x40, 0x40, 0x01,
      0xbe, 0xea, 0xea, 0xab, 0xbe, 0xea, 0xea, 0xab, 0x14, 0x40, 0x40, 0x01,
      0x14, 0x40, 0x40, 0x01, 0x14, 0x40, 0x40, 0x01, 0x14, 0x40, 0x40, 0x01,
      0xbe, 0xea, 0xea, 0xab, 0xbe, 0xea, 0xea, 0xab, 0x14, 0x40, 0x40, 0x01,
      0x14, 0x40, 0x40, 0x01, 0x14, 0x40, 0x40, 0x01, 0xea, 0x08, 0x00, 0x81,
      0x45, 0xb2, 0x04, 0x25, 0x54, 0x23, 0x00, 0x00, 0x21, 0x0a, 0x80, 0xda,
      0x0a, 0x01, 0x81, 0x09, 0x14, 0x64, 0x63, 0x8c, 0x20, 0x01, 0xc6, 0x03,
      0x81, 0x2a, 0x64, 0x50, 0x90, 0x9a, 0x07, 0x53, 0x23, 0xcc, 0x20, 0xfc,
      0x26, 0x61, 0x3f, 0x83, 0x44, 0x01, 0x42, 0x22, 0x7a, 0x13, 0x21, 0x03,
      0x36, 0x30, 0x08, 0x82, 0xca, 0x04, 0xc7, 0x44, 0x4a, 0x88, 0x3d, 0xd9,
      0x20, 0x2a, 0x4e, 0xa0, 0xc2, 0x4c, 0xc1, 0x88, 0x50, 0x61, 0x80, 0x81,
      0x06, 0x70, 0x03, 0xc1, 0xc1, 0x06, 0x05, 0x4b, 0x92, 0x02, 0x92, 0x0e,
      0x11, 0x66, 0x66, 0x48, 0xb2, 0x4c, 0x99, 0x5a, 0x0a, 0x8c, 0x0f, 0xe2,
      0x80, 0x55, 0x39, 0x01, 0x65, 0xd6, 0x54, 0x20, 0x8b, 0x11, 0x90, 0x40,
      0x0d, 0x90, 0x11, 0x3c, 0x68, 0x40, 0x93, 0xaa, 0x2b, 0x05, 0x38, 0x08,
      0x94, 0x00, 0x02, 0x01, 0xc9, 0x12, 0x40, 0x1c, 0x3a, 0xc6, 0xad, 0x50,
      0x84, 0xc0, 0x8a, 0xcc, 0xc1, 0x81, 0x84, 0x50, 0x21, 0x19, 0x30, 0x29,
      0xa1, 0x06, 0xc0, 0x04, 0x58, 0x90, 0x10, 0x19, 0x15, 0x20, 0x0a, 0x17,
      0x0f, 0x80, 0x08, 0x7c, 0xf0, 0x02, 0x2c, 0x3c, 0x32, 0xa9, 0x2a, 0x84,
      0x21, 0x25, 0x20, 0x01, 0x2d, 0x01, 0x06, 0x10, 0xf3, 0x12, 0x84, 0x19,
      0xb6, 0x11, 0x77, 0x07, 0x0f, 0x12, 0xf7, 0x05, 0x1b, 0x15, 0x9d, 0x1e,
      0x2e, 0x03, 0xa0, 0x1d, 0xf6, 0x03, 0xca, 0x1e, 0x50, 0x00, 0xf8, 0x1c,
      0x80, 0x09, 0x0c, 0x1b, 0xed, 0x0d, 0xbd, 0x1b, 0x0b, 0x0e, 0x1e, 0x00,
      0x3a, 0x0f, 0x0e, 0x1b, 0xae, 0x12, 0x01, 0x1a, 0xd0, 0x00, 0xa2, 0x15,
      0x08, 0x17, 0xaf, 0x00, 0x7e, 0x1d, 0x16, 0x04, 0x14, 0x12, 0xfd, 0x02,
      0x45, 0x10, 0x33, 0x18, 0x83, 0x1a, 0xcb, 0x00, 0x46, 0x01, 0x29, 0x02,
      0x97, 0x1a, 0x4f, 0x1f, 0x90, 0x11, 0x3a, 0x10, 0x49, 0x01, 0xa4, 0x05,
      0x82, 0x0b, 0x98, 0x15, 0x4e, 0x1b, 0xae, 0x0e, 0x42, 0x14, 0xb6, 0x06,
      0x24, 0x05, 0x72, 0x1c, 0xbc, 0x04, 0x69, 0x17, 0x3f, 0x14, 0x8c, 0x15,
      0xc2, 0x15, 0xa2, 0x07, 0x50, 0x00, 0xbc, 0x16, 0x06, 0x0e, 0xa6, 0x06,
      0x30, 0x18, 0x2f, 0x00, 0x1f, 0x1f, 0xdc, 0x08, 0xf7, 0x06, 0x1c, 0x04,
      0xe9, 0x0c, 0x77, 0x0b, 0xff, 0x19, 0x1c, 0x12, 0x91, 0x0f, 0xa2, 0x02,
      0x28, 0x16, 0xe5, 0x17, 0xae, 0x11, 0x1e, 0x06, 0x81, 0x0f, 0xe7, 0x16,
      0x61, 0x14, 0xff, 0x04, 0x05, 0x0f, 0xee, 0x0b, 0x1d, 0x01, 0xc1, 0x12,
      0x5e, 0x1c, 0xb0, 0x1e, 0xfe, 0x12, 0xb6, 0x07, 0x94, 0x0f, 0x2a, 0x03,
      0x23, 0x1a, 0x34, 0x0d, 0x1f, 0x10, 0x20, 0x1f, 0xe2, 0x19, 0xb9, 0x18,
      0x68, 0x08, 0x41, 0x13, 0x2f, 0x0f, 0x74, 0x0e, 0x14, 0x0d, 0xe2, 0x0d,
      0x5e, 0x02, 0xc2, 0x18, 0x91, 0x05, 0x79, 0x09, 0xe5, 0x06, 0x67, 0x00,
      0x4f, 0x1a, 0xb4, 0x12, 0x22, 0x11, 0xab, 0x08, 0xee, 0x03, 0xcb, 0x1d,
      0xc8, 0x11, 0x25, 0x06, 0x2f, 0x08, 0x4d, 0x08, 0xdf, 0x10, 0x97, 0x05,
      0x38, 0x16, 0x9c, 0x19, 0x0d, 0x1a, 0xc0, 0x08, 0x55, 0x1b, 0x1c, 0x18,
      0x7b, 0x11, 0xeb, 0x03, 0x62, 0x02, 0x3f, 0x11, 0xca, 0x01, 0xcc, 0x05,
      0xa2, 0x1f, 0x9a, 0x0a, 0x4b, 0x06, 0xd2, 0x12, 0x07, 0x1d, 0x73, 0x12,
      0x1c, 0x19, 0x55, 0x06, 0x0b, 0x08, 0xd8, 0x17, 0xfb, 0x1c, 0x10, 0x09,
      0xfe, 0x15, 0x7a, 0x1f, 0x51, 0x02, 0x8f, 0x0a, 0xab, 0x06, 0x59, 0x0a,
      0x58, 0x05, 0x60, 0x16, 0xc7, 0x11, 0x0d, 0x07, 0x6f, 0x1f, 0x3f, 0x11,
      0xec, 0x14, 0xc1, 0x1e, 0xfb, 0x10, 0x60, 0x0f, 0x6f, 0x13, 0x03, 0x18,
      0x43, 0x0d, 0x3b, 0x03, 0xf7, 0x14, 0x76, 0x08, 0x36, 0x09, 0xf1, 0x07,
      0x82, 0x08, 0x41, 0x18, 0xbb, 0x1b, 0x76, 0x00, 0x8d, 0x16, 0x97, 0x09,
      0xb7, 0x10, 0xe4, 0x05, 0xe1, 0x13, 0x3c, 0x06, 0x88, 0x1b, 0xd3, 0x00,
      0x9a, 0x02, 0xd8, 0x0f, 0xb9, 0x1c, 0x05, 0x16, 0x4a, 0x19, 0xa9, 0x06,
      0xa5, 0x0e, 0xc5, 0x01, 0x77, 0x04, 0x8b, 0x1e, 0xd5, 0x0e, 0xed, 0x1e,
      0x83, 0x1d, 0xb4, 0x1f, 0xbd, 0x15, 0x0d, 0x0d, 0xea, 0x0c, 0xd9, 0x05,
      0x44, 0x0a, 0x05, 0x02, 0x23, 0x09, 0x5b, 0x14, 0x23, 0x09, 0x27, 0x1c,
      0x16, 0x16, 0x12, 0x1e, 0x62, 0x06, 0x4b, 0x0e, 0xb8, 0x0e, 0x88, 0x19,
      0xe5, 0x18, 0x5c, 0x14, 0xe2, 0x06, 0xaf, 0x0c, 0x2f, 0x0d, 0x8b, 0x0b,
      0xd3, 0x0e, 0xa7, 0x0c, 0x74, 0x05, 0xc8, 0x0f, 0x10, 0x0a, 0xe4, 0x16,
      0x6c, 0x1a, 0x8c, 0x0d, 0x46, 0x00, 0x98, 0x17, 0xb1, 0x0c, 0x11, 0x03,
      0x01, 0x1d, 0xe7, 0x07, 0x14, 0x0c, 0xaf, 0x00, 0xf2, 0x16, 0x60, 0x19,
      0x1c, 0x16, 0x46, 0x10, 0xe3, 0x05, 0x26, 0x0a, 0xee, 0x19, 0x57, 0x06,
      0x2f, 0x12, 0xea, 0x0a, 0x17, 0x18, 0xfe, 0x01, 0x86, 0x0c, 0x99, 0x0b,
      0xc3, 0x0c, 0x17, 0x03, 0xa3, 0x0b, 0x4f, 0x12, 0xb3, 0x06, 0x5e, 0x0c,
      0x5e, 0x03, 0x3a, 0x1b, 0xb8, 0x02, 0x92, 0x04, 0xb8, 0x0d, 0xc1, 0x0c,
      0x51, 0x1a, 0xaf, 0x19, 0xa5, 0x02, 0x8d, 0x14, 0x5c, 0x1d, 0xec, 0x18,
      0xf3, 0x08, 0x57, 0x1f, 0x75, 0x02, 0x17, 0x04, 0x8d, 0x18, 0x2a, 0x07,
      0xdc, 0x08, 0x5f, 0x0e, 0x98, 0x0a, 0x4e, 0x0d, 0x3b, 0x12, 0x14, 0x18,
      0xe4, 0x19, 0xf2, 0x00, 0xf3, 0x07, 0xa6, 0x0f, 0x2b, 0x00, 0x90, 0x16,
      0x77, 0x17, 0xdb, 0x12, 0x25, 0x16, 0xec, 0x02, 0x0b, 0x11, 0x57, 0x13,
      0x56, 0x10, 0xfb, 0x0e, 0x79, 0x09, 0x82, 0x08, 0x28, 0x1e, 0xf5, 0x00,
      0x24, 0x16, 0x53, 0x08, 0xa8, 0x12, 0xe3, 0x03, 0xeb, 0x16, 0xe2, 0x00,
      0xa6, 0x07, 0x4c, 0x13, 0x13, 0x14, 0x20, 0x0b, 0xae, 0x0c, 0xa7, 0x1f,
      0xe5, 0x14, 0xef, 0x0c, 0x7f, 0x08, 0x68, 0x1d, 0xeb, 0x15, 0x71, 0x0f,
      0xb1, 0x1e, 0x1f, 0x0a, 0x98, 0x18, 0x4e, 0x17, 0xea, 0x00, 0xa6, 0x03,
      0x8a, 0x13, 0x6a, 0x1e, 0x0a, 0x18, 0x45, 0x1a, 0x74, 0x1e, 0xe9, 0x01,
      0xc6, 0x1a, 0xc4, 0x06, 0xfa, 0x07, 0xd7, 0x0d, 0x0a, 0x14, 0x9e, 0x0f,
      0xe6, 0x1a, 0x79, 0x18, 0x3c, 0x0e, 0x26, 0x07, 0xb8, 0x02, 0x9c, 0x10,
      0x44, 0x12, 0x44, 0x14, 0x46, 0x08, 0x34, 0x0b, 0x78, 0x03, 0x65, 0x04,
      0x45, 0x09, 0xaa, 0x1a, 0x9d, 0x08, 0x6a, 0x10, 0x4a, 0x06, 0x21, 0x11,
      0x8a, 0x16, 0xda, 0x1d, 0x18, 0x12, 0x57, 0x07, 0xc2, 0x0b, 0xb4, 0x06,
      0xcf, 0x06, 0x16, 0x06, 0x44, 0x00, 0x2f, 0x1e, 0xc8, 0x1e, 0x63, 0x0d,
      0x7f, 0x1b, 0x61, 0x18, 0x09, 0x1a, 0x2b, 0x0b, 0xf3, 0x03, 0x87, 0x0c,
      0x90, 0x17, 0x1d, 0x1e, 0xcb, 0x0b, 0x39, 0x0c, 0xa6, 0x02, 0x63, 0x1a,
      0x7e, 0x0a, 0x6a, 0x18, 0x54, 0x13, 0x65, 0x11, 0x37, 0x17, 0xf9, 0x07,
      0x0f, 0x0c, 0x28, 0x08, 0x59, 0x0c, 0x6c, 0x14, 0x6a, 0x19, 0xa5, 0x1c,
      0x06, 0x04, 0xab, 0x0e, 0x20, 0x0a, 0x09, 0x0f, 0x3f, 0x08, 0xf6, 0x02,
      0x66, 0x09, 0xc7, 0x11, 0x7d, 0x1f, 0xeb, 0x07, 0x42, 0x05, 0xc1, 0x05,
      0x88, 0x01, 0x51, 0x1a, 0xce, 0x08, 0x50, 0x11, 0x0a, 0x1d, 0x6f, 0x18,
      0x6d, 0x08, 0xc6, 0x1a, 0x4d, 0x1d, 0xe6, 0x13, 0xea, 0x11, 0xe6, 0x0e,
      0x27, 0x09, 0x7c, 0x1a, 0x0b, 0x09, 0x9a, 0x03, 0x99, 0x07, 0xc3, 0x06,
      0xfb, 0x13, 0x44, 0x16, 0xd9, 0x1d, 0xa6, 0x1d, 0x8b, 0x0a, 0x07, 0x0b,
      0x2e, 0x1f, 0xe7, 0x09, 0x80, 0x1c, 0xb0, 0x02, 0xf1, 0x0b, 0x91, 0x1d,
      0x6f, 0x15, 0x2b, 0x18, 0xca, 0x19, 0x99, 0x13, 0x2d, 0x19, 0x4c, 0x01,
      0x5c, 0x1c, 0x0c, 0x03, 0xe6, 0x19, 0x1c, 0x1d, 0x51, 0x08, 0x01, 0x03,
      0x5f, 0x13, 0x0f, 0x0e, 0x3c, 0x19, 0x5f, 0x07, 0xe5, 0x1e, 0xed, 0x1a,
      0xd8, 0x1a, 0x13, 0x17, 0xf0, 0x0e, 0x2d, 0x1a, 0x34, 0x0b, 0x64, 0x1d,
      0x2c, 0x0f, 0xbc, 0x08, 0x97, 0x16, 0x7b, 0x0e, 0x48, 0x04, 0xad, 0x13,
      0xa8, 0x19, 0xac, 0x14, 0x6a, 0x06, 0x80, 0x0a, 0xce, 0x03, 0x4e, 0x18,
      0x3a, 0x1e, 0xb7, 0x07, 0xd0, 0x02, 0x2a, 0x1b, 0xf6, 0x17, 0x1f, 0x18,
      0x9d, 0x18, 0xbf, 0x04, 0xcb, 0x0a, 0x24, 0x12, 0xd3, 0x12, 0x4f, 0x0c,
      0x60, 0x1c, 0x70, 0x0b, 0x32, 0x17, 0x28, 0x01, 0x07, 0x09, 0x7e, 0x02,
      0x21, 0x01, 0xdb, 0x13, 0xa4, 0x05, 0xe8, 0x05, 0x74, 0x0f, 0x15, 0x04,
      0xcd, 0x1b, 0x71, 0x15, 0x2f, 0x11, 0x19, 0x1a, 0x21, 0x1a, 0x20, 0x06,
      0x37, 0x0d, 0xfb, 0x03, 0x58, 0x15, 0x93, 0x01, 0x3e, 0x08, 0xc2, 0x0c,
      0x7a, 0x13, 0x4d, 0x1f, 0xdd, 0x18, 0x17, 0x0b, 0x44, 0x00, 0x54, 0x07,
      0x4d, 0x05, 0x32, 0x02, 0xc2, 0x1f, 0x44, 0x1c, 0x61, 0x17, 0x98, 0x09,
      0xe8, 0x04, 0x24, 0x09, 0x61, 0x1a, 0x22, 0x15, 0x1a, 0x02, 0xbd, 0x13,
      0x4c, 0x13, 0xfd, 0x1d, 0xd8, 0x03, 0xc3, 0x02, 0x1e, 0x0c, 0xbb, 0x19,
      0x60, 0x0f, 0xd3, 0x02, 0x21, 0x0b, 0xe0, 0x1e, 0xe3, 0x17, 0x71, 0x04,
      0x63, 0x05, 0x29, 0x1f, 0xd5, 0x11, 0x2a, 0x05, 0x82, 0x0a, 0x90, 0x03,
      0xa0, 0x15, 0x9c, 0x1f, 0x1c, 0x10, 0xfd, 0x04, 0x44, 0x0f, 0x5b, 0x12,
      0x82, 0x18, 0x12, 0x16, 0xcf, 0x0b, 0xe7, 0x05, 0xc6, 0x01, 0x6d, 0x07,
      0x2e, 0x03, 0xa2, 0x06, 0x94, 0x1a, 0xb6, 0x1c, 0x9c, 0x13, 0x74, 0x12,
      0x82, 0x17, 0xd8, 0x18, 0x7f, 0x1b, 0x98, 0x06, 0x78, 0x12, 0x45, 0x0a,
      0x9f, 0x1b, 0x8c, 0x04, 0x6b, 0x11, 0xb9, 0x11, 0xc0, 0x05, 0x79, 0x04,
      0x47, 0x17, 0xc2, 0x14, 0x3e, 0x1a, 0x35, 0x10, 0xdf, 0x0f, 0x28, 0x1e,
      0x20, 0x01, 0xf7, 0x14, 0x35, 0x1b, 0x87, 0x03, 0xa7, 0x19, 0x58, 0x00,
      0x46, 0x0f, 0x05, 0x07, 0xb2, 0x03, 0x63, 0x09, 0x8f, 0x1e, 0xdd, 0x0c,
      0x04, 0x1b, 0x3d, 0x07, 0x30, 0x0f, 0x76, 0x07, 0xf1, 0x0d, 0x56, 0x0b,
      0xac, 0x1f, 0x50, 0x02, 0x1a, 0x0b, 0x29, 0x1a, 0x82, 0x11, 0x41, 0x17,
      0x07, 0x12, 0x0e, 0x19, 0x02, 0x08, 0x77, 0x0b, 0x77, 0x0b, 0xd9, 0x15,
      0x46, 0x1c, 0x58, 0x01, 0x33, 0x0b, 0xc5, 0x1a, 0x87, 0x1a, 0xdd, 0x03,
      0x7d, 0x0d, 0xa3, 0x18, 0xd1, 0x06, 0x53, 0x0e, 0xbb, 0x0a, 0xfb, 0x1c,
      0x0f, 0x1b, 0x99, 0x17, 0x9b, 0x07, 0x72, 0x17, 0x71, 0x1a, 0x25, 0x05,
      0x17, 0x19, 0x53, 0x15, 0xe9, 0x03, 0xfe, 0x18, 0x7b, 0x12, 0x34, 0x17,
      0x44, 0x0c, 0x70, 0x07, 0xb0, 0x1d, 0xef, 0x0b, 0x7c, 0x03, 0x72, 0x0a,
      0x77, 0x1e, 0x02, 0x0a, 0xdc, 0x19, 0x84, 0x1c, 0xaa, 0x00, 0x6a, 0x14,
      0x60, 0x00, 0xa0, 0x1c, 0xc9, 0x00, 0x41, 0x00, 0xdb, 0x03, 0x7d, 0x1f,
      0x03, 0x04, 0x84, 0x03, 0x32, 0x05, 0x94, 0x1b, 0x43, 0x07, 0xf3, 0x18,
      0xce, 0x12, 0xb8, 0x13, 0xc5, 0x0c, 0x5b, 0x0b, 0x0a, 0x04, 0x2a, 0x16,
      0x08, 0x14, 0x53, 0x02, 0x07, 0x14, 0x82, 0x02, 0x8c, 0x01, 0x2d, 0x07,
      0xf8, 0x0d, 0x34, 0x1d, 0xa0, 0x01, 0x1e, 0x1e, 0x95, 0x1a, 0xcc, 0x09,
      0x4f, 0x19, 0x2c, 0x1f, 0x50, 0x1e, 0x85, 0x05, 0x35, 0x13, 0x06, 0x11,
      0x51, 0x12, 0x2d, 0x16, 0xbe, 0x06, 0xd3, 0x12, 0xc8, 0x0e, 0xa8, 0x17,
      0x87, 0x0f, 0xc6, 0x08, 0x5f, 0x0f, 0xc7, 0x0f, 0xaa, 0x06, 0xc0, 0x01,
      0x72, 0x08, 0xac, 0x0c, 0x33, 0x0b, 0x5b, 0x06, 0xff, 0x13, 0x76, 0x03,
      0x04, 0x09, 0xf1, 0x03, 0xea, 0x1e, 0x52, 0x19, 0x55, 0x00, 0xaf, 0x12,
      0xc2, 0x19, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9,
      0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5,
      0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0x00, 0x00,
  };
  EXPECT_EQ(Bytes(reinterpret_cast<const uint8_t *>(&priv), sizeof(priv)),
            Bytes(kExpectedPriv, sizeof(kExpectedPriv)));

  uint8_t ciphertext[HRSS_CIPHERTEXT_BYTES];
  uint8_t shared_key[HRSS_KEY_BYTES];
  HRSS_encap(ciphertext, shared_key, &pub,
             reinterpret_cast<const uint8_t *>(&priv));

  static const uint8_t kExpectedCiphertext[HRSS_CIPHERTEXT_BYTES] = {
      0x09, 0xa9, 0xe6, 0xee, 0x0c, 0x8c, 0x68, 0x63, 0x1e, 0x84, 0x12, 0x9a,
      0xc6, 0xda, 0x6b, 0xe1, 0xfc, 0x82, 0x3a, 0x1f, 0xd7, 0xb0, 0x8e, 0x7f,
      0xd5, 0x0c, 0x4d, 0x7d, 0xcf, 0x7e, 0x42, 0x76, 0x65, 0x06, 0x37, 0x6b,
      0xa4, 0x47, 0xb5, 0xa7, 0x51, 0xa1, 0x44, 0xd2, 0x0b, 0x30, 0x4e, 0x2e,
      0x8b, 0x20, 0xc7, 0x5e, 0x12, 0xa5, 0x46, 0x65, 0x4a, 0x21, 0x3f, 0x3e,
      0xde, 0xb7, 0x6b, 0x74, 0xcb, 0xb6, 0xd4, 0xc3, 0xe3, 0xe7, 0x83, 0x14,
      0x39, 0x42, 0x89, 0x82, 0x04, 0x1c, 0x53, 0x39, 0x2f, 0xd6, 0x11, 0x20,
      0x2f, 0x09, 0x05, 0x3a, 0x76, 0x51, 0x68, 0xae, 0x48, 0x9e, 0xad, 0xfa,
      0x93, 0x20, 0x11, 0xe7, 0x4d, 0x3e, 0x96, 0xa5, 0xea, 0xfe, 0x95, 0xef,
      0xb0, 0xb1, 0xdc, 0xd3, 0xfc, 0xcc, 0xb2, 0x0f, 0x8b, 0xe2, 0x64, 0x90,
      0x27, 0x71, 0x8b, 0x82, 0xd6, 0xb1, 0x24, 0x20, 0xbd, 0xef, 0xba, 0x3b,
      0x24, 0x43, 0x26, 0x3d, 0x11, 0x1a, 0x2b, 0x4c, 0x37, 0xd5, 0x0f, 0x66,
      0x77, 0x12, 0x17, 0xa7, 0x26, 0xa9, 0x87, 0x2f, 0x66, 0xa9, 0xac, 0x76,
      0x09, 0x55, 0xf3, 0x7e, 0x33, 0xa4, 0xa7, 0x91, 0xeb, 0xc0, 0xdc, 0x79,
      0xe7, 0x9b, 0x1c, 0x34, 0xf5, 0x64, 0x00, 0x75, 0xf5, 0x26, 0x35, 0x3c,
      0xbd, 0xc4, 0x03, 0xc2, 0x6e, 0xda, 0x29, 0xea, 0x19, 0xb3, 0x8b, 0xf6,
      0x5d, 0x1e, 0xa9, 0x46, 0x17, 0x56, 0x0d, 0x27, 0x19, 0x25, 0x7c, 0xeb,
      0x97, 0x98, 0xd7, 0x97, 0x15, 0xcb, 0x82, 0x99, 0x12, 0x91, 0xcf, 0xc1,
      0xe1, 0x1a, 0xc5, 0x94, 0x9c, 0x02, 0xb9, 0x6e, 0x00, 0xf9, 0xee, 0x2d,
      0xa9, 0x98, 0xa4, 0xdd, 0xc4, 0xa7, 0x52, 0xa6, 0x7e, 0xaa, 0xff, 0x25,
      0xaf, 0x2f, 0x9d, 0x42, 0x34, 0x69, 0x49, 0xd9, 0x86, 0x0d, 0x39, 0x89,
      0xbc, 0x22, 0x30, 0x01, 0x08, 0x5d, 0x9b, 0xec, 0xab, 0xbd, 0x26, 0x20,
      0xb6, 0xd7, 0x53, 0xa5, 0x25, 0xb8, 0xd6, 0x7b, 0x88, 0xce, 0xb7, 0x23,
      0x52, 0x6a, 0x3c, 0x4e, 0x02, 0xe6, 0x13, 0xa3, 0xb6, 0x0f, 0xb4, 0x5e,
      0x75, 0x10, 0xce, 0xd0, 0x4c, 0xf1, 0xa6, 0x1e, 0xbf, 0x15, 0xfe, 0x54,
      0x2a, 0xfa, 0xde, 0x7b, 0x82, 0x05, 0xdc, 0x75, 0x87, 0xd9, 0xd3, 0x4c,
      0xbc, 0xd4, 0x9e, 0xe2, 0x6b, 0x13, 0x86, 0x66, 0x7c, 0xc0, 0xf3, 0x16,
      0x0d, 0x82, 0x2c, 0x6b, 0x22, 0x47, 0xce, 0x0e, 0xbe, 0x4f, 0xce, 0xd8,
      0x05, 0x4f, 0x8c, 0xa2, 0xe8, 0x18, 0xfb, 0x5d, 0xc8, 0x46, 0x24, 0x00,
      0x53, 0xf1, 0xf0, 0x5a, 0x17, 0xd8, 0x8c, 0xa2, 0x11, 0x0d, 0x27, 0xf5,
      0xab, 0xfd, 0x19, 0x08, 0x55, 0xa5, 0xaa, 0x50, 0xb1, 0x71, 0xed, 0xd7,
      0xef, 0x63, 0x11, 0x45, 0x8f, 0x87, 0x8e, 0xc5, 0x20, 0x98, 0xb3, 0xc6,
      0x00, 0x7d, 0x72, 0xb5, 0x24, 0xac, 0x65, 0x97, 0xa2, 0xa0, 0x51, 0x54,
      0xaa, 0xd1, 0x8a, 0xcc, 0x2f, 0xf0, 0xc5, 0x30, 0xff, 0x52, 0x07, 0x34,
      0x56, 0x0b, 0x65, 0x28, 0xf7, 0x41, 0x40, 0x06, 0xf0, 0x59, 0xef, 0x46,
      0x06, 0x8e, 0x74, 0x4e, 0xc5, 0x8b, 0xe0, 0x3a, 0xd1, 0x6e, 0x2a, 0xf6,
      0x41, 0x43, 0x63, 0x5c, 0xf6, 0xd8, 0x3c, 0xb5, 0x0d, 0x2f, 0xe3, 0x85,
      0xf9, 0xd2, 0xc6, 0x4e, 0xd7, 0xde, 0xa6, 0x09, 0xa1, 0x0b, 0xf9, 0x69,
      0xc5, 0x96, 0x8c, 0xbf, 0xa6, 0xad, 0x1a, 0x9c, 0xa6, 0xe9, 0x3e, 0x71,
      0x03, 0xcc, 0x51, 0x44, 0x42, 0xe6, 0x7f, 0x9c, 0xda, 0x87, 0x60, 0x21,
      0x6e, 0x34, 0x5f, 0x94, 0x45, 0x7e, 0xb9, 0x3f, 0xc7, 0x2a, 0x64, 0x5d,
      0x81, 0x3c, 0x65, 0x96, 0xa4, 0x38, 0xa0, 0x87, 0xfd, 0x68, 0x69, 0xc4,
      0x68, 0xc0, 0xe3, 0xef, 0xec, 0x64, 0x96, 0xc5, 0xc9, 0x3e, 0xea, 0xe8,
      0x4d, 0x9c, 0xf3, 0x92, 0xe5, 0x61, 0x44, 0xbf, 0x87, 0x6b, 0xfa, 0x84,
      0xde, 0xac, 0xd3, 0xd1, 0x60, 0x88, 0x39, 0x94, 0x28, 0xf0, 0x72, 0x76,
      0x33, 0x5d, 0xcc, 0x04, 0x85, 0x3b, 0x60, 0xc4, 0xea, 0xbd, 0x19, 0xc2,
      0x3d, 0x84, 0xf1, 0x73, 0x9f, 0x0a, 0x20, 0x21, 0x7c, 0x83, 0xd7, 0x7a,
      0xde, 0x49, 0x03, 0xb0, 0x11, 0xfe, 0x68, 0x7e, 0x53, 0x62, 0x4b, 0x8d,
      0x28, 0xa4, 0x4e, 0xb7, 0x48, 0xd0, 0xfd, 0x76, 0x5c, 0xcf, 0xb9, 0x45,
      0x51, 0x30, 0xed, 0xee, 0xa7, 0x24, 0x0a, 0x18, 0xfa, 0x1d, 0xcf, 0x56,
      0xe0, 0xd5, 0xcd, 0x40, 0xcb, 0x39, 0xb4, 0x1e, 0x66, 0x44, 0xf2, 0xb1,
      0xfb, 0xd4, 0xf9, 0x35, 0x09, 0x8a, 0x1c, 0xff, 0xc7, 0xb6, 0x27, 0x81,
      0xd1, 0x25, 0xb4, 0x66, 0x56, 0x33, 0xa3, 0x58, 0xb2, 0x4a, 0x61, 0x79,
      0x98, 0x99, 0xe0, 0x1e, 0xb7, 0x9c, 0xef, 0xd4, 0x03, 0xea, 0xb1, 0x66,
      0x62, 0x23, 0xb4, 0xca, 0x76, 0x70, 0xcb, 0x22, 0x2e, 0x97, 0xba, 0x6f,
      0xc5, 0x95, 0x5f, 0xea, 0xa9, 0x6f, 0xef, 0x81, 0xcb, 0x77, 0x21, 0xf5,
      0xad, 0xf7, 0x00, 0x49, 0x53, 0x2f, 0x70, 0xd2, 0x37, 0x63, 0x60, 0x46,
      0x43, 0x14, 0x8c, 0xea, 0x07, 0x76, 0x34, 0xfe, 0xc6, 0x31, 0xe0, 0xbb,
      0x26, 0xb3, 0xb5, 0x32, 0x70, 0x9d, 0xb1, 0xea, 0xa5, 0x9f, 0xdd, 0xf9,
      0xb4, 0xad, 0xe6, 0x88, 0xf5, 0x85, 0xa6, 0x74, 0x8b, 0x03, 0x25, 0xb0,
      0xb5, 0x05, 0x19, 0x3b, 0xac, 0x63, 0x2a, 0x8f, 0x6b, 0x67, 0xa7, 0x7b,
      0x22, 0xc1, 0x19, 0x74, 0x59, 0x95, 0xfe, 0xf2, 0x3a, 0x26, 0x8f, 0x81,
      0xdc, 0xd2, 0x1d, 0xfd, 0x2f, 0x65, 0x07, 0xd3, 0x36, 0x2a, 0x17, 0x30,
      0xc8, 0xbe, 0x15, 0x0c, 0x4d, 0xc7, 0xbf, 0xa7, 0x4e, 0x2f, 0x0d, 0xc9,
      0x41, 0x49, 0xd9, 0x35, 0xba, 0x7f, 0xe3, 0xb7, 0x82, 0x8e, 0xb8, 0x33,
      0x68, 0x4d, 0x69, 0x30, 0x95, 0x99, 0xe4, 0xf4, 0xe3, 0x94, 0x4d, 0xf7,
      0xcd, 0x19, 0xdd, 0x86, 0xf9, 0xee, 0xcf, 0x1e, 0x7b, 0x2e, 0x83, 0xe1,
      0x05, 0x62, 0x82, 0x2c, 0x9f, 0xf3, 0x3a, 0x0f, 0xfe, 0xab, 0x04, 0x36,
      0x36, 0xfa, 0xcd, 0x63, 0x37, 0xb7, 0xc6, 0xd3, 0x90, 0x33, 0x4d, 0xa7,
      0x19, 0x33, 0x57, 0x10, 0x5d, 0xf4, 0xd1, 0x7d, 0xa4, 0x3f, 0x91, 0xd4,
      0xbe, 0x82, 0xef, 0x17, 0x86, 0xb3, 0xcd, 0x56, 0xc6, 0xaf, 0x7f, 0x61,
      0x94, 0xe4, 0x64, 0xc2, 0xf3, 0x0a, 0xa6, 0x04, 0xfe, 0x13, 0xf7, 0xe5,
      0x6b, 0x32, 0x88, 0xa0, 0x4c, 0xd2, 0x59, 0x62, 0x20, 0xe4, 0x30, 0x7a,
      0x82, 0x03, 0xaa, 0xad, 0xc2, 0x7b, 0x6e, 0x29, 0x09, 0xbf, 0x77, 0xc3,
      0x67, 0xc0, 0xe4, 0x5c, 0x06, 0x47, 0x27, 0x3f, 0xd1, 0xfe, 0x37, 0xbb,
      0xad, 0x65, 0x12, 0xf5, 0x8e, 0xcc, 0xf5, 0x9e, 0x71, 0x1d, 0xba, 0x1e,
      0x9a, 0xa5, 0xea, 0x03, 0x44, 0x90, 0x9d, 0x1f, 0x79, 0xeb, 0x28, 0xb2,
      0x3a, 0x5e, 0x8c, 0x8c, 0xf4, 0xb9, 0xfa, 0x60, 0x76, 0x84, 0x72, 0x08,
      0x73, 0xae, 0xd4, 0xba, 0xdf, 0x0c, 0x31, 0x80, 0x55, 0x9a, 0x3f, 0x92,
      0xdb, 0x4c, 0x90, 0x1a, 0x63, 0x2c, 0x97, 0x43, 0x93, 0xd7, 0xcc, 0xa5,
      0xe7, 0xb4, 0x6a, 0x1e, 0xd3, 0x23, 0x21, 0x32, 0xe1, 0xc7, 0x17, 0x1d,
      0xcd, 0x5b, 0x20, 0x9e, 0xe8, 0x70, 0x83, 0x91, 0x97, 0xd8, 0x91, 0xc3,
      0x14, 0xaa, 0x01, 0xbe, 0x86, 0x1d, 0x30, 0x50, 0x87, 0x90, 0xef, 0xb2,
      0x83, 0x0f, 0x37, 0xbf, 0x65, 0x5c, 0xe2, 0xa4, 0x81, 0xe5, 0x18, 0x51,
      0x14, 0x18, 0x1c, 0xb3, 0x30, 0x67, 0xf6, 0x5f, 0x81, 0xc0, 0xfc, 0xc2,
      0x47, 0x61, 0x83, 0x76, 0x63, 0x88, 0x8a, 0xf7, 0xa0, 0x3d, 0x42, 0x39,
      0xc8, 0xb9, 0x01, 0x91, 0xe9, 0x57, 0x98, 0x7f, 0x48, 0x20, 0xd3, 0xb1,
      0x8b, 0x6e, 0x0f, 0xcf, 0x9d, 0x6c, 0x6b, 0x44, 0x9c, 0x18, 0x2d, 0x92,
      0x90, 0xa4, 0x34, 0x68, 0xfc, 0x7f, 0x2b, 0x17, 0x27, 0x35, 0x47, 0x2a,
      0x20, 0xfa, 0x68, 0xe5, 0xdd, 0xec, 0xd3, 0xfb, 0x3a, 0x6d, 0x00, 0x68,
      0xcb, 0xb1, 0x8c, 0xa6, 0xd5, 0x73, 0xe1, 0x39, 0x8a, 0xe7, 0x3f, 0x06,
      0x44, 0x25, 0x8a, 0xd5, 0x6d, 0x51, 0x4f, 0x62, 0xf6, 0x16, 0xfb, 0x55,
      0x28, 0xad, 0x65, 0x84, 0xe3, 0x5c, 0x34, 0x2b, 0x2b, 0xe3, 0x78, 0xe8,
      0x29, 0xa3, 0x2a, 0xdd, 0x26, 0x34, 0x3a, 0x1f, 0xaf, 0xe6, 0x8a, 0x6e,
      0x55, 0x5a, 0xcb, 0x90, 0x24, 0x9d, 0x62, 0x2d, 0xb8, 0x0a, 0x96, 0x6c,
      0xef, 0xb8, 0xa3, 0xb0, 0x35, 0x48, 0x58, 0xff, 0x4b, 0x38, 0x83, 0xfe,
      0xa1, 0xc8, 0x91, 0xba, 0xd1, 0x35, 0xa5, 0xcb, 0xb6, 0x9e, 0x53, 0x80,
      0xa1, 0xc6, 0x52, 0x43, 0xf2, 0x53,
  };
  EXPECT_EQ(Bytes(ciphertext, sizeof(ciphertext)),
            Bytes(kExpectedCiphertext, sizeof(kExpectedCiphertext)));

  static const uint8_t kExpectedSharedKey[HRSS_KEY_BYTES] = {
      0xa0, 0xb5, 0x0e, 0x79, 0x54, 0xa4, 0x7d, 0xcb, 0x99, 0x01, 0x48,
      0x81, 0xb9, 0x42, 0xb2, 0xaf, 0x5d, 0xc1, 0x0d, 0x99, 0xf0, 0x83,
      0x6a, 0x82, 0x44, 0x23, 0xe8, 0xc5, 0xc1, 0xb4, 0x63, 0x9b,
  };
  EXPECT_EQ(Bytes(shared_key, sizeof(shared_key)),
            Bytes(kExpectedSharedKey, sizeof(kExpectedSharedKey)));
}
