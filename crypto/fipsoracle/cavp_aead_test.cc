/* Copyright (c) 2017, Google Inc.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE. */

// cavp_cipher_test processes a NIST CAVP test vector request file and emits the
// corresponding response. An optional sample vector file can be passed to
// verify the result.

#include <stdlib.h>

#include <openssl/cipher.h>
#include <openssl/crypto.h>
#include <openssl/err.h>

#include "../test/file_test.h"
#include "cavp_test_util.h"

typedef struct {
  const EVP_CIPHER *cipher;
  std::unique_ptr<FileTest> response_sample;
} TestCtx;

static bool TestAEADDecrypt(FileTest *t, void *arg) {
  TestCtx *ctx = reinterpret_cast<TestCtx *>(arg);

  const EVP_CIPHER *cipher = ctx->cipher;

  std::string key_len, iv_len, ct_len, aad_len, tag_len;
  if (!t->GetInstruction(&key_len, "Keylen") ||
      !t->GetInstruction(&iv_len, "IVlen") ||
      !t->GetInstruction(&ct_len, "PTlen") ||  // sic!
      !t->GetInstruction(&aad_len, "AADlen") ||
      !t->GetInstruction(&tag_len, "Taglen")) {
    t->PrintLine("Invalid instruction block.");
    return false;
  }

  std::string count;
  std::vector<uint8_t> key, iv, ct, aad, tag, result;
  if (!t->GetAttribute(&count, "Count") || !t->GetBytes(&key, "Key") ||
      !t->GetBytes(&aad, "AAD") || !t->GetBytes(&tag, "Tag") ||
      !t->GetBytes(&iv, "IV") || !t->GetBytes(&ct, "CT")) {
    t->PrintLine("Invalid test case A");
  }
  if (key.size() * 8 != strtoul(key_len.c_str(), nullptr, 0) ||
      iv.size() * 8 != strtoul(iv_len.c_str(), nullptr, 0) ||
      ct.size() * 8 != strtoul(ct_len.c_str(), nullptr, 0) ||
      aad.size() * 8 != strtoul(aad_len.c_str(), nullptr, 0) ||
      tag.size() * 8 != strtoul(tag_len.c_str(), nullptr, 0)) {
    t->PrintLine("Invalid test case");
    return false;
  }

  printf("%s", t->CurrentTestToString().c_str());
  bool cipher_op_result = CipherOperation(cipher, false /* decrypt */, key, iv,
                                          ct, aad, tag, &result, nullptr);
  if (cipher_op_result) {
    printf("PT = %s\n\n", EncodeHex(result.data(), result.size()).c_str());
  } else {
    printf("FAIL\n\n");
  }

  // Check if sample response file matches.
  // XXX
  if (ctx->response_sample) {
    ctx->response_sample->ReadNext();
    std::string expected_count;
    std::vector<uint8_t> expected_result;
    if (!ctx->response_sample->GetAttribute(&expected_count, "Count") ||
        count != expected_count ||
        // TODO(martinkr): Maybe check other fields and instructions too.
        (!cipher_op_result && (ctx->response_sample->HasAttribute("PT") ||
                               !ctx->response_sample->HasAttribute("FAIL"))) ||
        (cipher_op_result &&
         (ctx->response_sample->HasAttribute("FAIL") ||
          !ctx->response_sample->GetBytes(&expected_result, "PT") ||
          !t->ExpectBytesEqual(expected_result.data(), expected_result.size(),
                               result.data(), result.size())))) {
      t->PrintLine("result doesn't match");
      return false;
    }
  }

  return true;
}

int main(int argc, char **argv) {
  CRYPTO_library_init();

  if (argc < 4 || argc > 5) {
    fprintf(
        stderr,
        "usage: %s (enc|dec) <cipher> <test file> [<sample response file>]\n",
        argv[0]);
    return 1;
  }

  const EVP_CIPHER *cipher = GetCipher(argv[2]);
  if (cipher == nullptr) {
    fprintf(stderr, "invalid cipher: %s\n", argv[2]);
    return 1;
  }

  TestCtx ctx = {cipher, nullptr};

  const std::string mode(argv[1]);
  bool (*test_fn)(FileTest * t, void *arg);
  if (mode == "enc") {
    // XXX
  } else if (mode == "dec") {
    test_fn = &TestAEADDecrypt;
  } else {
    fprintf(
        stderr,
        "usage: %s (enc|dec) <cipher> <test file> [<sample response file>]\n",
        argv[0]);
    return 1;
  }

  if (argc == 5) {
    ctx.response_sample.reset(new FileTest(argv[4]));
    if (!ctx.response_sample->is_open()) {
      return 1;
    }
    ctx.response_sample->SetIgnoreUnusedAttributes(true);
  }

  printf("# Generated by");
  for (int i = 0; i < argc; i++) {
    printf(" %s", argv[i]);
  }
  printf("\n\n");

  return FileTestMainSilent(test_fn, (void *)(&ctx), argv[3]);
}

