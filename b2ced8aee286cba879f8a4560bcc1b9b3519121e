{
  "comments": [
    {
      "key": {
        "uuid": "a4d31695_07e7561a",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 2
      },
      "lineNbr": 633,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-09-11T19:26:34Z",
      "side": 1,
      "message": "list?",
      "range": {
        "startLine": 633,
        "startChar": 63,
        "endLine": 633,
        "endChar": 71
      },
      "revId": "b2ced8aee286cba879f8a4560bcc1b9b3519121e",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4d31695_87018647",
        "filename": "ssl/t1_lib.c",
        "patchSetId": 2
      },
      "lineNbr": 1548,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-09-11T19:26:34Z",
      "side": 1,
      "message": "Should this be in an _init function? parse_clienthello always runs, so it doesn\u0027t actually matter. We seem to be inconsistent about whether reset bits assume this. Notably, ext_sigalgs_parse_clienthello also makes this assumption, but some others use the _init function.\n\n(Hopefully someday it\u0027ll just be some handshake state object allocated and zeroed anew for each handshake and we won\u0027t care...)",
      "revId": "b2ced8aee286cba879f8a4560bcc1b9b3519121e",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4d31695_27f1bad0",
        "filename": "ssl/t1_lib.c",
        "patchSetId": 2
      },
      "lineNbr": 1564,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-09-11T19:26:34Z",
      "side": 1,
      "message": "Hrm. Is it possible for this to be false here? add_serverhello doesn\u0027t get called if the extension wasn\u0027t present. And so we could make the parse_clienthello hook\u0027s purpose in life just be to enforce the extension is empty.",
      "revId": "b2ced8aee286cba879f8a4560bcc1b9b3519121e",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c34e74_e828dbc7",
        "filename": "ssl/test/bssl_shim.cc",
        "patchSetId": 2
      },
      "lineNbr": 708,
      "author": {
        "id": 5645
      },
      "writtenOn": "2015-09-09T19:09:21Z",
      "side": 1,
      "message": "Interesting: I did this in |InstallCertificates|",
      "range": {
        "startLine": 708,
        "startChar": 2,
        "endLine": 708,
        "endChar": 3
      },
      "revId": "b2ced8aee286cba879f8a4560bcc1b9b3519121e",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4d31695_07ee36ee",
        "filename": "ssl/test/bssl_shim.cc",
        "patchSetId": 2
      },
      "lineNbr": 708,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-09-11T19:26:34Z",
      "side": 1,
      "message": "Probably doesn\u0027t matter much. I guess InstallCertificates will let us test if deferring it to one of the certificate callbacks works.\n\n(I guess it has to be combined with -async as things stand now. I dunno. We don\u0027t have a very good story right now I think for testing the combinatorially many ways there are to configure things. On the SSL_CTX. Switching the SSL_CTX. On the SSL. On the SSL, but deferred to a callback. Oh and the callback can be asynchronous.)",
      "parentUuid": "e4c34e74_e828dbc7",
      "range": {
        "startLine": 708,
        "startChar": 2,
        "endLine": 708,
        "endChar": 3
      },
      "revId": "b2ced8aee286cba879f8a4560bcc1b9b3519121e",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4c34e74_a822e3e1",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 5645
      },
      "writtenOn": "2015-09-09T19:09:21Z",
      "side": 1,
      "message": "Just to double-check: is this used?",
      "revId": "b2ced8aee286cba879f8a4560bcc1b9b3519121e",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4d31695_c7225ee3",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 2
      },
      "lineNbr": 193,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-09-11T19:26:34Z",
      "side": 1,
      "message": "It\u0027s used in test expectations. (Hrm, I should have probably put OCSPResponse here rather than as a new method. Oh well.)",
      "parentUuid": "e4c34e74_a822e3e1",
      "revId": "b2ced8aee286cba879f8a4560bcc1b9b3519121e",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4d31695_e71de2a3",
        "filename": "ssl/test/runner/handshake_messages.go",
        "patchSetId": 2
      },
      "lineNbr": 992,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-09-11T19:26:34Z",
      "side": 1,
      "message": "[Confirmed this matches BoringSSL\u0027s interpretation. The SCT includes the two-byte length header.]",
      "revId": "b2ced8aee286cba879f8a4560bcc1b9b3519121e",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}