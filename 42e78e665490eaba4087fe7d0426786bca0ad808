{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8c1812e9_77d55840",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-11-29T19:25:51Z",
      "side": 1,
      "message": "Mind tweaking the CL description? ðŸ˜Š\n\nIf you want to attach to a bug, the same `Bug: 12345` from Chromium works except that the default is the BoringSSL project, so just write `Bug: chromium:12345` for Chromium.",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60cfa787_a87946c4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 17561
      },
      "writtenOn": "2023-11-29T20:36:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c1812e9_77d55840",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5f8ad78_1fa498e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-11-29T19:25:51Z",
      "side": 1,
      "message": "Matt and Bob are probably better reviewers for this directory than me. I\u0027ve not spent a whole lot of time here.\n\n(In particular, we don\u0027t *strictly* need to do this in the library. We could just have Chromium implement whatever TrustStore it wants. No strong feelings as to which side of the divide would be most convenient here.)",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98da96ee_c49ebff1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 6700
      },
      "writtenOn": "2023-11-29T20:17:11Z",
      "side": 1,
      "message": "This seems like a generally useful enough thing so I\u0027m not opposed to putting it in the library.",
      "parentUuid": "e5f8ad78_1fa498e1",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26b0b5f1_c08c5162",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-12-06T19:04:04Z",
      "side": 1,
      "message": "And for the record, I agree with matt here, Explicit distrust is just useful.",
      "parentUuid": "98da96ee_c49ebff1",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed3a6dca_6594c552",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-11-29T19:25:51Z",
      "side": 1,
      "message": "Would it be better to take just the SPKI and leave it to the caller to extract it from the certificate? Then we can specify SPKIs not just by certificate.",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8d1a966_2a8dd32c",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 6700
      },
      "writtenOn": "2023-11-29T20:17:11Z",
      "side": 1,
      "message": "That seems reasonable to me too (though it intersects a bit with the other comment)",
      "parentUuid": "ed3a6dca_6594c552",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a821046_6a7f2f76",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 17561
      },
      "writtenOn": "2023-11-29T20:36:33Z",
      "side": 1,
      "message": "all the other Add* functions take in a ParsedCertificate, so I decided to just copy the same thing. This includes AddTrustAnchor() where we\u0027re also only using the SPKI and subject.\n\nI think? Now that i look at AddTrustAnchor i\u0027m not sure how only the SPKI and subject are used during verification.\n\nalso there are the lifetime issues with string_views. I could just make copies but figured there was a reason not to do that.",
      "parentUuid": "ed3a6dca_6594c552",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b2c0100_3f4e94b4",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 6700
      },
      "writtenOn": "2023-11-29T23:07:45Z",
      "side": 1,
      "message": "\u003e all the other Add* functions take in a ParsedCertificate, so I decided to just copy the same thing. This includes AddTrustAnchor() where we\u0027re also only using the SPKI and subject.\n\u003e \n\u003e I think? Now that i look at AddTrustAnchor i\u0027m not sure how only the SPKI and subject are used during verification.\n\nCould be worded better, but that is saying that during verification, the other parts of the certificate (like expiry and anchor constraints) won\u0027t be enforced. But the whole certificate is still used in path building and is returned as part of the cert chain, etc.\n\n\u003e also there are the lifetime issues with string_views. I could just make copies but figured there was a reason not to do that.",
      "parentUuid": "1a821046_6a7f2f76",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f3897d6_42c94063",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 17561
      },
      "writtenOn": "2023-11-30T20:23:15Z",
      "side": 1,
      "message": "I see two options:\n\n1) take in the string representation of the SPKI, mainly from der::Input.AsString()\n\n2) take in a der::Input spki_tlv, store the string representation (or maybe store a hash? feel like we shouldn\u0027t be getting too many spkis here that the hash would save us that much?)\n\nCoded up (1), though not sure that (2) isn\u0027t better. thoughts?",
      "parentUuid": "1b2c0100_3f4e94b4",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b1813e0_ec876777",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 6700
      },
      "writtenOn": "2023-12-05T23:47:11Z",
      "side": 1,
      "message": "I dunno, I guess this is okay for now? Unless David or Bob have other opinions.",
      "parentUuid": "1f3897d6_42c94063",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85dcc698_a6945872",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 17561
      },
      "writtenOn": "2023-12-06T18:47:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b1813e0_ec876777",
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55ff4c9e_4b67ac66",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-11-29T19:25:51Z",
      "side": 1,
      "message": "Do we actually need to retain the certs? It seems a `std::unordered_set\u003cstd::string_view\u003e` would be enough.",
      "range": {
        "startLine": 91,
        "startChar": 5,
        "endLine": 91,
        "endChar": 44
      },
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "023f7743_a5b49b16",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 6700
      },
      "writtenOn": "2023-11-29T20:17:11Z",
      "side": 1,
      "message": "If you make it a set of string_view than you\u0027re depending on the caller ensuring that the memory has the same lifetime, which is a bit of an iffy API.\n\nI guess you could have an API that takes a string_view for the SPKI and a CRYPTO_BUFFER handle for the backing memory, which the caller could then point at either a full cert or just a lone SPKI? (Perhaps with a helper function that takes a ParsedCertificate and extracts both.)\n\nOr could store a SPKI hash and compare based on that?",
      "parentUuid": "55ff4c9e_4b67ac66",
      "range": {
        "startLine": 91,
        "startChar": 5,
        "endLine": 91,
        "endChar": 44
      },
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8378b648_1044d58f",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 17561
      },
      "writtenOn": "2023-11-29T20:36:33Z",
      "side": 1,
      "message": "yeah I went with storing the certs because of the string_view ownership issues, plus i figured it was good for debugging (and it fit the pattern of everything else).\n\nHappy to entertain options, but I didn\u0027t see any reason to change this based on what the rest of the file\u0027s API looked like.",
      "parentUuid": "023f7743_a5b49b16",
      "range": {
        "startLine": 91,
        "startChar": 5,
        "endLine": 91,
        "endChar": 44
      },
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e17b9ed_98d14498",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 6700
      },
      "writtenOn": "2023-11-29T23:07:45Z",
      "side": 1,
      "message": "The other APIs actually need the whole certificate though, so matching it here isn\u0027t necessarily the right thing to do. There might be a case where the SPKIs to distrust are distributed only as the SPKI without the cert which would not be able to use this API.\n\nSince we\u0027re doing this in the library I think it makes more sense to think about the APIs more like a library would. If we were doing this in a separate TrustStore implementation in Chrome then just doing whatever minimum was needed at the moment and refactoring later could make more sense.\n\nAnd an option as I said you could still create a convenience wrapper that takes a ParsedCertificate...",
      "parentUuid": "8378b648_1044d58f",
      "range": {
        "startLine": 91,
        "startChar": 5,
        "endLine": 91,
        "endChar": 44
      },
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3a8b391_83726a3a",
        "filename": "pki/trust_store_in_memory.h",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 17561
      },
      "writtenOn": "2023-11-30T20:23:15Z",
      "side": 1,
      "message": "resolving in favor of other comment.",
      "parentUuid": "4e17b9ed_98d14498",
      "range": {
        "startLine": 91,
        "startChar": 5,
        "endLine": 91,
        "endChar": 44
      },
      "revId": "42e78e665490eaba4087fe7d0426786bca0ad808",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}