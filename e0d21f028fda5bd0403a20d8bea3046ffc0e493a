{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "69d82ba1_c7fa1c76",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-06-05T17:37:30Z",
      "side": 1,
      "message": "Ok, So at least for the moment you don\u0027t have a constant time memory comparison operation.  What I\u0027m not 100% sure about is from a rustyness perspective what\u0027s better for us here.  Yes indeed, we can bind BoringSSL\u0027s comparison operations directly here, and I\u0027m more or less fine with this, but before we do that, Are we certain we don\u0027t want to say \"no we should use something that is more normal is rust code like subtle (https://docs.rs/subtle/2.5.0/subtle/)\" - especially if we\nbelieve we are doing to be pulling in stuff that already has such dependencies? \n\n@danakaj - penny for your thoughts there please?",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b18a808_6b0ba252",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-05T18:46:36Z",
      "side": 1,
      "message": "FWIW, I think binding `CRYPTO_memcmp` is fine. I assume `subtle` works too, but if you want to use `bssl-crypto` without pulling in another crate to check HMACs, that seems fine.\n\n(I mean, ideally you could just use `Hmac::verify`, but I guess maybe that\u0027s not always possible?)\n\nWe shouldn\u0027t export all the random internal constant-time utilities, but we don\u0027t even export those to C.",
      "parentUuid": "69d82ba1_c7fa1c76",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94715ec2_6f60d64f",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 14726
      },
      "writtenOn": "2023-06-06T16:49:13Z",
      "side": 1,
      "message": "If we\u0027re okay with using subtle I would prefer that, I think?\n\nLess C++ code over time.",
      "parentUuid": "0b18a808_6b0ba252",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3964dfa3_1e341ab0",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-06T17:15:56Z",
      "side": 1,
      "message": "The other consideration is requirements around \"constant-time\". (Poorly named. It should have been called data-independent execution.) Cryptography is in this awkward position where we both need constant-time for security, but we have no sound mechanism in the compiler to get there. Instead, we have to play chicken with the compiler. The higher level the language, the more risk we incur. (One could argue we should write all constant-time code in assembly, but that\u0027s obviously impractical.)\n\nKeeping the constant-time code in BoringSSL lets us concentrate that investment in one place. We\u0027ve got valgrind-based tooling to help us catch when the compiler gets too smart, and this `value_barrier` hack we sprinkle in when it becomes a problem.\n\nThis is all unsound and the real answer is to put this in the language, but that won\u0027t happen without *significant* compiler investment. :-( (We\u0027d need every optimization pass in LLVM to be re-examined to limit what the transforms allowed on \"secret\" types.)",
      "parentUuid": "94715ec2_6f60d64f",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8fa2fa6_e53e9bf1",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 14726
      },
      "writtenOn": "2023-06-06T17:35:48Z",
      "side": 1,
      "message": "This reasoning is of the \"for security reasons we should have one impl\" and if that\u0027s the mood then we should expose boring SSLs, and ban subtle, I agree. For the same reason we\u0027re not using openssl or rustcrypto crates.",
      "parentUuid": "3964dfa3_1e341ab0",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1513b752_ca46e4fa",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-06-06T19:51:05Z",
      "side": 1,
      "message": "My only concern here is we end up picking up subtle as dependencies of higher level crates we use, and end up having both.. but (shrug) that may be inevitable?",
      "parentUuid": "e8fa2fa6_e53e9bf1",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02f7308e_e852b9b0",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-06T19:56:42Z",
      "side": 1,
      "message": "This is also not interesting enough of a function to be *that* worried about. :-)\n\nI think binding it from BoringSSL is fine for the sake of self-contained-ness. But also if some other library pulls in `subtle` and is otherwise okay (i.e. isn\u0027t a whole new parallel crypto impl), I don\u0027t think we need to be terribly upset about it for the sake of `subtle` alone.\n\nBut I suspect \"crates that want constant-time memory comparison\" will all either (a) pull in a cryptography crate, or (b) be implementing cryptography themselves. In both those cases, we\u0027ll have an opinion on this anyway.",
      "parentUuid": "1513b752_ca46e4fa",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2416f1f4_1c7aff07",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-06T19:58:32Z",
      "side": 1,
      "message": "For context, the functions we\u0027re discussing is just:\n\n```\n  uint8_t x \u003d 0;\n  for (size_t i \u003d 0; i \u003c len; i++) {\n    x |\u003d a[i] ^ b[i];\n  }\n  return x;\n```\n\nIt\u0027s interesting only in so far as we don\u0027t want the compiler to realize this is `memcmp` and transform it to something leaky. (But we usually do want the compiler to realize it can vectorize it and stuff.)",
      "parentUuid": "02f7308e_e852b9b0",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31d083a0_4ae816a3",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-06-06T19:58:49Z",
      "side": 1,
      "message": "Heh.. yeah, well, It\u0027s one of those things I wanted us to have a discussion about and I think it\u0027s landed in the right place, So  I think this makes sense. (as I mentioned before, I\u0027m more or less fine with it, as long as we\u0027re making a conscious decision to do it).",
      "parentUuid": "02f7308e_e852b9b0",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13fcef2b_dfcd73eb",
        "filename": "rust/bssl-crypto/src/lib.rs",
        "patchSetId": 6
      },
      "lineNbr": 47,
      "author": {
        "id": 14726
      },
      "writtenOn": "2023-06-06T19:59:21Z",
      "side": 1,
      "message": "This reads to me like we should use `subtle` then because we wouldn\u0027t want to ban its use elsewhere so let\u0027s just use that as the One True Constant Time thing?",
      "parentUuid": "2416f1f4_1c7aff07",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 57
      },
      "revId": "e0d21f028fda5bd0403a20d8bea3046ffc0e493a",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}