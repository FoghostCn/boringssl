{
  "comments": [
    {
      "key": {
        "uuid": "975b3a1a_feb88455",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 358,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-03T22:43:17Z",
      "side": 1,
      "message": "Nit: I think we usually don\u0027t put the parens after Push().\n\nMaybe also worth adding a sentence like:\n\n// Note, for simplicity, this class currently differs from |std::vector| in that |T| must be efficiently default-constructable. Allocated elements beyond the end of the array are constructed and destructed.",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e522dfb8_7f98ba8a",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 358,
      "author": {
        "id": 9581
      },
      "writtenOn": "2019-10-04T14:44:29Z",
      "side": 1,
      "message": "Added this note.\n\nIs efficiently default-constructible the same as is_trivially_default_constructible?  Should we add a static check?",
      "parentUuid": "975b3a1a_feb88455",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "363d989d_546a5ee1",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 358,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-04T15:39:05Z",
      "side": 1,
      "message": "I don\u0027t think so. I think that requires it to be really boring like int, but we\u0027re okay with unique_ptr\u0027s default state of nullptr and such.\n\nI just meant that your default ctor (and dtor from that state) shouldn\u0027t like allocate a giant object and then do a ton of work. Also that you actually need a default ctor.",
      "parentUuid": "e522dfb8_7f98ba8a",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f8d946a_1584d778",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 364,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-03T22:43:17Z",
      "side": 1,
      "message": "It might make sense to just omit this one, maybe adding a Reserve(size_t) if you need it. I think I\u0027d typically expect passing in a length to actually create an array of that length, whereas this is just reserves capacity. It\u0027s also kind of weird to call Init without checking the error.\n\nIf it\u0027s just to get the default size of 16, perhaps have MaybeGrow jump straight to 16 if the array is missing?\n\n(Also one-argument constructors should be explicit.)",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abcf4013_6842a1f7",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 364,
      "author": {
        "id": 9581
      },
      "writtenOn": "2019-10-04T14:44:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f8d946a_1584d778",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c62eb4ea_ba73c4fb",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 366,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-03T22:43:17Z",
      "side": 1,
      "message": "The default move constructor will move array_ but not reset count_ to zero. Hopefully no one\u0027s using a moved-from GrowableArray and the destructor still works, but we should maintain internal invariants correctly.",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e5f708c_d52c6412",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 366,
      "author": {
        "id": 9581
      },
      "writtenOn": "2019-10-04T14:44:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c62eb4ea_ba73c4fb",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f514fe3_a5f77a2a",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 386,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-03T22:43:17Z",
      "side": 1,
      "message": "Style: We always include the parentheses.",
      "range": {
        "startLine": 386,
        "startChar": 20,
        "endLine": 386,
        "endChar": 21
      },
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f93d08e3_36820348",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 386,
      "author": {
        "id": 9581
      },
      "writtenOn": "2019-10-04T14:44:29Z",
      "side": 1,
      "message": "I figure you meant curly braces here.",
      "parentUuid": "8f514fe3_a5f77a2a",
      "range": {
        "startLine": 386,
        "startChar": 20,
        "endLine": 386,
        "endChar": 21
      },
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c6c426b_d1d09e0d",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 393,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-03T22:43:17Z",
      "side": 1,
      "message": "Rather than including both of these, just do:\n\n  bool Push(T elem) {\n\nand then std::move out of elem. (Note this does mean the object is moved even if Push fails. But hopefully we don\u0027t care about that?)",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45732824_0090c94b",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 393,
      "author": {
        "id": 9581
      },
      "writtenOn": "2019-10-04T14:44:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c6c426b_d1d09e0d",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abe5eeb2_522f6316",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 393,
      "author": {
        "id": 9581
      },
      "writtenOn": "2019-10-04T15:22:39Z",
      "side": 1,
      "message": "Let me reopen this...\n\nIn the ESNI CL I am trying to make a GrowableArray of ESNI_KEYPAIR, each of which contains Arrays and GrowableArrays.\n\nSince I removed GrowableArray::Push(T \u0026\u0026elem), I have to use ESNI_KEYPAIR\u0027s copy constructor when I push an ESNI_KEYPAIR. The default copy constructor does not exist because Array\u0027s copy constructor has been deleted.\n\nThe way I see it, there are two solutions:\n1. Implement GrowableArray::Push(T \u0026\u0026elem)\n2. Manually implementing a copy constructor for ESNI_KEYPAIR.\n\nWhich one do you think is better?  I\u0027m going with #2 for now.",
      "parentUuid": "45732824_0090c94b",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c9618a2_13a450d4",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 393,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-04T15:37:14Z",
      "side": 1,
      "message": "Copy constructors are problematic because we currently believe in handling malloc failures. (We should stop believing in that at some point. It\u0027s nonsense...)\n\nBut I\u0027m confused why this is making a difference. If you were relying on Push(T\u0026\u0026), that means you were using ESNI_KEYPAIR\u0027s move constructor instead and calling Push(std::move(keypair)), right? Push(T) would then do the same thing.",
      "parentUuid": "abe5eeb2_522f6316",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7f78f48_14c36c6a",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 417,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-03T22:43:17Z",
      "side": 1,
      "message": "Check for overflow here.",
      "range": {
        "startLine": 417,
        "startChar": 38,
        "endLine": 417,
        "endChar": 42
      },
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c529e9f2_db48ef79",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 417,
      "author": {
        "id": 9581
      },
      "writtenOn": "2019-10-04T14:44:29Z",
      "side": 1,
      "message": "Will you check if I did this right?",
      "parentUuid": "d7f78f48_14c36c6a",
      "range": {
        "startLine": 417,
        "startChar": 38,
        "endLine": 417,
        "endChar": 42
      },
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28316d38_97f502f7",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 427,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-03T22:43:17Z",
      "side": 1,
      "message": "Nit: size_? Odd that everything calls it \"size\" but then it\u0027s stored as count_.",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9292af80_e176284b",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 427,
      "author": {
        "id": 9581
      },
      "writtenOn": "2019-10-04T14:44:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28316d38_97f502f7",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "459d6787_874fe111",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 428,
      "author": {
        "id": 5415
      },
      "writtenOn": "2019-10-03T22:43:17Z",
      "side": 1,
      "message": "Might be worth a comment that array_.size() is just the capacity of the array.",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c88fade5_6099f563",
        "filename": "ssl/internal.h",
        "patchSetId": 5
      },
      "lineNbr": 428,
      "author": {
        "id": 9581
      },
      "writtenOn": "2019-10-04T14:44:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "459d6787_874fe111",
      "revId": "6cd15ae481d77c278a416432e2f7247cbc860903",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}