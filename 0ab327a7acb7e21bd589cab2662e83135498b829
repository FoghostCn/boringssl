{
  "comments": [
    {
      "key": {
        "uuid": "4a5c2064_39294fbe",
        "filename": "crypto/bn/generic.c",
        "patchSetId": 3
      },
      "lineNbr": 1069,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-07-31T22:30:16Z",
      "side": 1,
      "message": "Aaaahhhhh. I really don\u0027t like this do/while fake for loop. I think the old one was clearer, despite the goto enter. MSVC\u0027s unreachable code check seems to have been fairly dumb thus far, so contortions to appease it don\u0027t seem very worthwhile. Though, honestly, both LHS and RHS are pretty bad what with the goto enter in there. This code can do with cleanup regardless.\n\nThis bit is *almost* the same as what\u0027s in the loop. I think you actually can just delete all this and replace it with initializing tp with 0. (Although the compiler won\u0027t be able to optimize that away, if we care. Probably not? We can see what bssl speed thinks. Otherwise, could also just stick an if in there. It seems to just be skipping the memset.)\n\n(It\u0027s also potentially different if num is 0, but that would break anyway due to line 1109 on the LHS.)",
      "range": {
        "startLine": 1053,
        "startChar": 0,
        "endLine": 1069,
        "endChar": 13
      },
      "revId": "0ab327a7acb7e21bd589cab2662e83135498b829",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2aa44cb9_90c11499",
        "filename": "crypto/bn/generic.c",
        "patchSetId": 3
      },
      "lineNbr": 1069,
      "author": {
        "id": 5525
      },
      "writtenOn": "2015-08-06T18:15:10Z",
      "side": 1,
      "message": "RE MSVC\u0027s unreachable code check: It is technically correct here, so it\u0027s hard to blame it. I personally do find that check useful. It is also a prerequisite for other static analysis stuff, so I\u0027d like to find a way to improve the readability of the code while also facilitating the static analysis. I think this new version does that.\n\nRe-reading your comment just now, I think you may be suggesting a more extensive change than what I made here. I think there are probably lots of ways to improve this code, but I think they are better deferred to later, if at all reasonable.",
      "parentUuid": "4a5c2064_39294fbe",
      "range": {
        "startLine": 1053,
        "startChar": 0,
        "endLine": 1069,
        "endChar": 13
      },
      "revId": "0ab327a7acb7e21bd589cab2662e83135498b829",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2aa44cb9_30814852",
        "filename": "crypto/bn/generic.c",
        "patchSetId": 3
      },
      "lineNbr": 1069,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-08-06T18:48:30Z",
      "side": 1,
      "message": "So, poking around some more, I\u0027m now fairly convinced that this code never runs. First, it\u0027s only defined if:\n\n #if defined(OPENSSL_NO_ASM) || (!defined(OPENSSL_ARM) \u0026\u0026 \\\n                                 !defined(OPENSSL_X86_64))\n\nNext, every caller seems to be guarded by either:\n\n #if !defined(OPENSSL_NO_ASM) \u0026\u0026 \\\n     (defined(OPENSSL_X86) || defined(OPENSSL_X86_64))\n #define OPENSSL_BN_ASM_MONT\n #endif\n\nOr:\n\n #if !defined(OPENSSL_NO_ASM) \u0026\u0026 defined(OPENSSL_X86_64)\n #define OPENSSL_BN_ASM_MONT5\n #define RSAZ_ENABLED\n \n #include \"rsaz_exp.h\"\n #endif\n\n\nThat leaves OPENSSL_X86 without OPENSSL_NO_ASM. However, in that case, bn_mont_mul is provided by x86-mont.pl.\n\n\nMoreover, that entire file is guarded by:\n\n #if defined(OPENSSL_NO_ASM) || \\\n     (!defined(OPENSSL_X86_64) \u0026\u0026 !defined(OPENSSL_X86)) || \\\n     (defined(OPENSSL_X86_64) \u0026\u0026 defined(OPENSSL_WINDOWS))\n\nSo this is really:\n\n #if defined(OPENSSL_NO_ASM) || \\\n   (!defined(OPENSSL_ARM) \u0026\u0026 !defined(OPENSSL_X86_64) \u0026\u0026 \\\n    !defined(OPENSSL_X86_64))",
      "parentUuid": "2aa44cb9_90c11499",
      "range": {
        "startLine": 1053,
        "startChar": 0,
        "endLine": 1069,
        "endChar": 13
      },
      "revId": "0ab327a7acb7e21bd589cab2662e83135498b829",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2aa44cb9_306a280a",
        "filename": "crypto/bn/generic.c",
        "patchSetId": 3
      },
      "lineNbr": 1069,
      "author": {
        "id": 5525
      },
      "writtenOn": "2015-08-06T18:57:46Z",
      "side": 1,
      "message": "That sounds about right to me. I found this when I had to temporarily -DOPENSSL_NO_ASM for some Windows builds.\n\nAre you suggesting that the code should just be removed? What about the MIPS build?\n\nThis code is used if you build on any platform with OPENSSL_NO_ASM. Removing the code completely would break all OPENSSL_NO_ASM builds. Right now, the code builds fine with OPENSSL_NO_ASM for arm7[e]-m, but it fails to build without OPENSSL_NO_ASM for that architecture.",
      "parentUuid": "2aa44cb9_30814852",
      "range": {
        "startLine": 1053,
        "startChar": 0,
        "endLine": 1069,
        "endChar": 13
      },
      "revId": "0ab327a7acb7e21bd589cab2662e83135498b829",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2aa44cb9_7064b03c",
        "filename": "crypto/bn/generic.c",
        "patchSetId": 3
      },
      "lineNbr": 1069,
      "author": {
        "id": 5075
      },
      "writtenOn": "2015-08-06T19:00:57Z",
      "side": 1,
      "message": "I don\u0027t think it breaks OPENSSL_NO_ASM builds. It true that the function is built in those cases, but, as far as I can tell, it has no callers. I just renamed it to bn_mul_montzzzz and OPENSSL_NO_ASM builds still linked. Does that not match what you\u0027re seeing?\n\nI was trying to test my \"we can just memset tp to 0 because mul(a, b) \u003d\u003d mul_add(0, a, b)\" theory and was unable to find a build configuration that would actually hit this codepath.",
      "parentUuid": "2aa44cb9_306a280a",
      "range": {
        "startLine": 1053,
        "startChar": 0,
        "endLine": 1069,
        "endChar": 13
      },
      "revId": "0ab327a7acb7e21bd589cab2662e83135498b829",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2aa44cb9_33e07209",
        "filename": "crypto/bn/generic.c",
        "patchSetId": 3
      },
      "lineNbr": 1069,
      "author": {
        "id": 5525
      },
      "writtenOn": "2015-08-06T19:42:32Z",
      "side": 1,
      "message": "Yes, you are right. I just uploaded a new changeset that just deletes this definition completely.\n\nI verified that the build succeeds with OPENSSL_NO_ASM and non-OPENSSL_NO_ASM builds:\nhttps://travis-ci.org/briansmith/ring/builds/74462777\nhttps://ci.appveyor.com/project/briansmith/ring/build/1.0.61",
      "parentUuid": "2aa44cb9_7064b03c",
      "range": {
        "startLine": 1053,
        "startChar": 0,
        "endLine": 1069,
        "endChar": 13
      },
      "revId": "0ab327a7acb7e21bd589cab2662e83135498b829",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}