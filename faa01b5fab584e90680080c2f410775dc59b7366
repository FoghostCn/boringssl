{
  "comments": [
    {
      "key": {
        "uuid": "2883f818_8557c052",
        "filename": "crypto/rand_extra/windows.c",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-01-22T22:11:28Z",
      "side": 1,
      "message": "What\u0027s the story here? We include windows.h elsewhere in BoringSSL and Chromium without this.",
      "range": {
        "startLine": 24,
        "startChar": 42,
        "endLine": 24,
        "endChar": 57
      },
      "revId": "faa01b5fab584e90680080c2f410775dc59b7366",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ff88bd5_bf024c59",
        "filename": "crypto/rand_extra/windows.c",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 9842
      },
      "writtenOn": "2020-01-22T23:11:44Z",
      "side": 1,
      "message": "BCryptGenRandom returns a NTSTATUS. This CL checks for STATUS_SUCCESS that is defined by ntstatus.h. However, ntstatus.h and windows.h commonly define the same 63 macros. WIN32_NO_STATUS has to be used to avoid the redefinition warnings. I\u0027m also not a fan of using this macro, specially because STATUS_SUCCESS value is 0, but this is actually a common practice. I couldn\u0027t find any use of STATUS_SUCCESS in BoringSSL code base.\nI\u0027ve found STATUS_SUCCESS being manually defined in chrome/browser/memory/swap_thrashing_monitor_delegate_win.cc (https://chromium.googlesource.com/chromium/src/+/HEAD/chrome/browser/memory/swap_thrashing_monitor_delegate_win.cc#37) and other places like chromium/chrome/chrome_cleaner/os/nt_internals.h.\nI\u0027m ok with redefining STATUS_SUCCESS here for the UWP code path since I don\u0027t see STATUS_SUCCESS changing from 0 any time soon (if ever).\n\nWhat solution works better for BoringSSL?",
      "parentUuid": "2883f818_8557c052",
      "range": {
        "startLine": 24,
        "startChar": 42,
        "endLine": 24,
        "endChar": 57
      },
      "revId": "faa01b5fab584e90680080c2f410775dc59b7366",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb80f533_189c6a2d",
        "filename": "crypto/rand_extra/windows.c",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-01-23T18:45:24Z",
      "side": 1,
      "message": "Wow. Lovely.\n\nI guess WIN32_NO_STATUS risks oddities if any of the previous headers include windows.h themselves (though hopefully none of them do). How does Windows expect one to call BCrypt functions? Is the expectation really that you carefully wrap all your windows.h calls with that #define?\n\nSearching around, I see there is also a BCRYPT_SUCCESS macro. It checks for \u003e\u003d 0 rather than !\u003d 0. I see both STATUS_INVALID_HANDLE and STATUS_INVALID_PARAMETER have the high bit set, so presuming NTSTATUS is indeed a LONG, that\u0027d work. I see other constants in nstatus.h don\u0027t have the high bit set, however. Is the expectation then that BCrypt never uses those constants since it\u0027s not a funny kernel driver thing?\n\nwfh, do you know much about this stuff? I figure BoringSSL should do whatever is most sensible + idiomatic here.",
      "parentUuid": "3ff88bd5_bf024c59",
      "range": {
        "startLine": 24,
        "startChar": 42,
        "endLine": 24,
        "endChar": 57
      },
      "revId": "faa01b5fab584e90680080c2f410775dc59b7366",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07342546_79a0cba6",
        "filename": "crypto/rand_extra/windows.c",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-01-23T19:11:36Z",
      "side": 1,
      "message": "Hah! And I see the example code in the docs uses an NT_SUCCESS macro which they defined themselves. Though that appears to match the BCRYPT_SUCCESS macro.\nhttps://docs.microsoft.com/en-us/windows/win32/seccng/signing-data-with-cng\n\nAnd I guess the issue is that you only can get STATUS_SUCCESS out of \u003cntstatus.h\u003e, despite that being the documented constant for BCrypt.\n\nMy inclination is that we should use the BCRYPT_SUCCESS macro. But someone who knows more about Windows should correct me if this is wrong. Looks like it\u0027s what ffmpeg does. And then there\u0027s abseil which uses it, but doesn\u0027t entirely trust it to be available so it redefines it as needed.\nhttps://source.chromium.org/search?q\u003dBCRYPT_SUCCESS\u0026ss\u003dchromium\n\nWhy is this so complicated?",
      "parentUuid": "fb80f533_189c6a2d",
      "range": {
        "startLine": 24,
        "startChar": 42,
        "endLine": 24,
        "endChar": 57
      },
      "revId": "faa01b5fab584e90680080c2f410775dc59b7366",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa0559ee_42ac1a6d",
        "filename": "crypto/rand_extra/windows.c",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-01-22T22:11:28Z",
      "side": 1,
      "message": "I think you may have lost the formatting changes AGL made here:\nhttps://boringssl-review.googlesource.com/c/boringssl/+/39584/4..5/crypto/rand_extra/windows.c\n\n(Gerrit can be confusing when other people modify your CL. :-) )",
      "range": {
        "startLine": 55,
        "startChar": 77,
        "endLine": 55,
        "endChar": 78
      },
      "revId": "faa01b5fab584e90680080c2f410775dc59b7366",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed34190d_4802e189",
        "filename": "crypto/rand_extra/windows.c",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 5005
      },
      "writtenOn": "2020-01-22T22:20:30Z",
      "side": 1,
      "message": "(Don\u0027t worry about this. I can reapply them when landing.)",
      "parentUuid": "fa0559ee_42ac1a6d",
      "range": {
        "startLine": 55,
        "startChar": 77,
        "endLine": 55,
        "endChar": 78
      },
      "revId": "faa01b5fab584e90680080c2f410775dc59b7366",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f829d263_9d1c2b38",
        "filename": "crypto/rand_extra/windows.c",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 9842
      },
      "writtenOn": "2020-01-22T23:11:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fa0559ee_42ac1a6d",
      "range": {
        "startLine": 55,
        "startChar": 77,
        "endLine": 55,
        "endChar": 78
      },
      "revId": "faa01b5fab584e90680080c2f410775dc59b7366",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}