{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "459dafd2_6a5b7a22",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06f99619_f23fbdbf",
        "filename": "ssl/handoff.cc",
        "patchSetId": 18
      },
      "lineNbr": 231,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "The interaction with \"capabilities\" and \"config\" and split handshakes is a giant mess. What we actually want is to serialize both codepoints. As this comment suggests, we want to serialize both codepoints and then filter what the handshaker might try to send.\n\nAlthough given ALPS might be configured late in the ALPN callback, I do wonder if this whole mechanism ever did anything useful in the first place...",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27910c81_78809068",
        "filename": "ssl/handoff.cc",
        "patchSetId": 18
      },
      "lineNbr": 231,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "do you mean instead of checking one codepoint based on the ssl config, we need to check something like below?\n\n```\n  if ((id \u003d\u003d TLSEXT_TYPE_application_settings \u0026\u0026\n         ssl-\u003econfig-\u003ealps_use_new_codepoint) ||\n        (id \u003d\u003d TLSEXT_TYPE_application_settings_old \u0026\u0026\n         !ssl-\u003econfig-\u003ealps_use_new_codepoint)) {\n      supports_alps \u003d true;\n      break;\n    }\n ```",
      "parentUuid": "06f99619_f23fbdbf",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b14bc762_dfa55582",
        "filename": "ssl/handoff.cc",
        "patchSetId": 18
      },
      "lineNbr": 231,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-09-01T18:59:16Z",
      "side": 1,
      "message": "Oof. The more I stare at this, the more I realize the ALPS + handback machinery just didn\u0027t work at all, because of when this would typically get configured. In fact, none of this works at all because the internal caller calls this before configuring *anything* on the SSL object. Wonderful.\n\nGood news is, the new handshake hints mechanism makes this moot, so we only care about this until the split handshakes folks stop using it.\n\nI will... stare at this and figure out what we want to do here. Apologies for the mess in this corner of the codebase. :-(",
      "parentUuid": "27910c81_78809068",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4430c35_75c9b801",
        "filename": "ssl/handoff.cc",
        "patchSetId": 18
      },
      "lineNbr": 231,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-09-05T19:39:36Z",
      "side": 1,
      "message": "sure, I will leave it for now. Do we have any information about when the split handshakes folks stop using it? let me know if there\u0027s any temp solutions to unblock it and we can move forward with this cl.",
      "parentUuid": "b14bc762_dfa55582",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "752d3ee9_5a20f0c2",
        "filename": "ssl/internal.h",
        "patchSetId": 18
      },
      "lineNbr": 3158,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "Looks like the rest of this sentence got mixed up between two versions. :-)",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0406f32_c3a51bfa",
        "filename": "ssl/internal.h",
        "patchSetId": 18
      },
      "lineNbr": 3158,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "update the comments .",
      "parentUuid": "752d3ee9_5a20f0c2",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7408584f_8e823716",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8001,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "\"Expecte\" looks like it should be \"Expect\" or \"Expected\".",
      "range": {
        "startLine": 8001,
        "startChar": 12,
        "endLine": 8001,
        "endChar": 19
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76b1d0b6_e1bb546e",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8001,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7408584f_8e823716",
      "range": {
        "startLine": 8001,
        "startChar": 12,
        "endLine": 8001,
        "endChar": 19
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40eff056_405e4402",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8039,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "ASSERT_TRUE on each of these and then ASSERT_NO_FATAL_FAILURES on the calls.",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8169982_51ba255a",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8039,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "not quite follow on `ASSERT_NO_FATAL_FAILURES`, do you mean check the the function calls on SetUpApplicationSetting. I think ASSERT_TRUE on each of these calls could be enough.",
      "parentUuid": "40eff056_405e4402",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f76b4a52_b673383b",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8077,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "It\u0027s unclear to me what these are testing, and what \"it would be fine\" refers too. Should these tests be checking whether ALPS was negotiated? That is, ultimately, what this change ends up doing.",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef74747d_d36a5236",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8077,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "I mean the client set the new codepoint while the server doesn\u0027t, the handshake should also complete successfully. This means the server might not understand the\nextension just ignore it. updated the comments.",
      "parentUuid": "f76b4a52_b673383b",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c6c1d56_fc3a12cb",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8077,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-09-01T18:59:16Z",
      "side": 1,
      "message": "But this doesn\u0027t actually test that the server ignored it. I.e., at no point does it assert on `SSL_has_application_settings`.",
      "parentUuid": "ef74747d_d36a5236",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc3e5e50_7fc47a21",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8077,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-09-05T19:39:36Z",
      "side": 1,
      "message": "I\u0027m not sure whether we can get the `SSL_has_application_settings` work correctly on the unit tests.  it seems need to duplicate most of the codes on integration tests `test_config.cc` and `runner.go`, to create the ssl, session, sss_ctx, here we only verify no handshake errors for the four different combinations, and the corresponding extension set correctly.",
      "parentUuid": "8c6c1d56_fc3a12cb",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7adf88a6_ad665b53",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8077,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-09-07T17:21:29Z",
      "side": 1,
      "message": "I\u0027m not following. I\u0027m just saying you should add `EXPECT_TRUE(SSL_has_application_settings(client_.get()));` or `EXPECT_FALSE(SSL_has_application_settings(client_.get()));` to each test based on what the test is expecting. That isn\u0027t duplicating integration test infrastructure.\n\nOtherwise these tests aren\u0027t doing anything and should just be removed. That said, even fixed, they are indeed redundant with the runner.go tests, so I think removing them is also fine.",
      "parentUuid": "dc3e5e50_7fc47a21",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6166da48_1352e99a",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8077,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-09-07T17:38:08Z",
      "side": 1,
      "message": "yea, with the existing CL test codes `SSL_has_application_settings` will be always false for all conditions since no sessions has been created. correct me if I\u0027m wrong, assume to make the ssl_has_application_settings works on the unit test, we need to setup sessions to work correctly which follows the necessary setup code in: https://source.chromium.org/chromium/chromium/src/+/main:third_party/boringssl/src/ssl/test/test_config.cc;l\u003d1415, I also have tried a couple of examples on the ssl_test.cc to create a session, all seems not working.",
      "parentUuid": "7adf88a6_ad665b53",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d6eb4ef_0cb87b4f",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 18
      },
      "lineNbr": 8077,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-09-07T17:45:36Z",
      "side": 1,
      "message": "Oh, I see. That means these tests truly aren\u0027t testing anything. No, you don\u0027t need to set up a session. You just need to select an ALPN on the server side.",
      "parentUuid": "6166da48_1352e99a",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aece6a30_41f1117c",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 18
      },
      "lineNbr": 409,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "Do we need an Neither option? Seems we could just not configure ALPS if that\u0027s what we\u0027re trying to test.",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d486b95_f05f67fa",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 18
      },
      "lineNbr": 409,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "neither option can help us avoid writes separate tests to verity the logics, prefer to leave for test coverages. I can remove it if you feel it\u0027s unnecessary",
      "parentUuid": "aece6a30_41f1117c",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5301659_f3bf160b",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 18
      },
      "lineNbr": 409,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-09-01T18:59:16Z",
      "side": 1,
      "message": "The \"neither\" cases aren\u0027t actually testing anything. Looking through your tests:\n\n* ALPS-Basic-Client: when server sends neither, you\u0027re just that the client doesn\u0027t crash when the server ignores your codepoint. Looks like there\u0027s a bigger problem with this one. Right now, clientConfig\u003dALPSUseCodepointNew, serverSends\u003dALPSUseCodepointOld and clientConfig\u003dALPSUseCodepointNew, serverSends\u003dALPSUseCodepointNeither test the exact same thing: server sending nothing. But given the variable name serverSends, I assume you meant to test that the server *actually* sends the wrong codepoint. For that, you need a protocol bug like AlwaysNegotiateApplicationSettingsNew. (I don\u0027t see another test that covers this case.)\n\n  Once you fix tha, \"neither\" is no longer redundant with codepoint mismatch, but it is redundant with ALPS-EarlyData-Client-ServerDecline, which tests this and more.\n\n* ALPS-Basic-Server: this is just testing that a server with ALPS enabled still works against clients that don\u0027t support ALPS. This is likewise redundant with ALPS-EarlyData-Server-ClientNoOffer, which tests this and more. (Also it\u0027s testing basically the same codepaths as codepoint mismatch.)\n\n* ALPS-Reject-Client: the neither case isn\u0027t doing anything because you\u0027re just forcing it to old via AlwaysNegotiateApplicationSettingsOld. This is also not a case that needs to be tested multi-version. The codepoint mismatch cases are just the generic \"you sent an extension I didn\u0027t offer\" code, which is amply tested, while the codepoint match cases are the interesting ones. This test only needs to consider the codepoint match case. \n\n* ALPS-Reject-Server: this is the same test as above and looks like a copy-paste error. I\u0027ve left a comment in runner.go about that.\n\n* ALPS-Decline-Server: the neither test isn\u0027t doing anything. It\u0027s identical to the neither case in ALPS-Basic-Server. In general, this test only needs to consider the codepoint match case because the mismatch case is uninteresting and redundant with ALPS-Basic-Server.",
      "parentUuid": "7d486b95_f05f67fa",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b1d5243_4d42a722",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 18
      },
      "lineNbr": 409,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-09-05T19:39:36Z",
      "side": 1,
      "message": "thanks for explaining this. Removed the neither options and added missing tests.\n* ALPS-Basic-Client: add a specific tests for mismatch codepoint test case. \n* ALPS-Reject-Server: as said in runner.go, actually it\u0027s origin test: ALPS-Reject-Client-Resume: https://source.chromium.org/chromium/chromium/src/+/main:third_party/boringssl/src/ssl/test/runner/runner.go;l\u003d7731",
      "parentUuid": "c5301659_f3bf160b",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d90eed98_1442757d",
        "filename": "ssl/test/runner/handshake_client.go",
        "patchSetId": 18
      },
      "lineNbr": 2095,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "Style nit: Give `go fmt` a run in this directory.",
      "range": {
        "startLine": 2095,
        "startChar": 0,
        "endLine": 2095,
        "endChar": 2
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de2cbc0e_47718e87",
        "filename": "ssl/test/runner/handshake_client.go",
        "patchSetId": 18
      },
      "lineNbr": 2095,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "done",
      "parentUuid": "d90eed98_1442757d",
      "range": {
        "startLine": 2095,
        "startChar": 0,
        "endLine": 2095,
        "endChar": 2
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6a12e03_a86ac3b5",
        "filename": "ssl/test/runner/handshake_client.go",
        "patchSetId": 18
      },
      "lineNbr": 2108,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "We don\u0027t expect the peer to ever negotiate both, so I think we can write this as:\n\n\n```\nif serverExtensions.hasApplicationSettings \u0026\u0026 serverExtensions.hasApplicationSettingsOld {\n  return errors.New(\"tls: server negotiated both old and new application settings together\")\n}\nif serverExtensions.hasApplicationSettings || serverExtensions.hasApplicationSettingsOld {\n   // all the various error checks\n}\n```",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed0e64d6_47643fdc",
        "filename": "ssl/test/runner/handshake_client.go",
        "patchSetId": 18
      },
      "lineNbr": 2108,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6a12e03_a86ac3b5",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "547d9278_f8e2fa89",
        "filename": "ssl/test/runner/handshake_server.go",
        "patchSetId": 18
      },
      "lineNbr": 914,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "If we\u0027re storing the two application settings separately, this should be `\u0026\u0026`, not `||`. The point if this check is so that connection state doesn\u0027t change in the middle.",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de7c8865_da1ba5c9",
        "filename": "ssl/test/runner/handshake_server.go",
        "patchSetId": 18
      },
      "lineNbr": 914,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "547d9278_f8e2fa89",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ba9a934_2cc7ddf7",
        "filename": "ssl/test/runner/handshake_server.go",
        "patchSetId": 18
      },
      "lineNbr": 1294,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "This shouldn\u0027t run twice. If we were to, hypothetically, negotiate both, the client should respond with a single EncryptedExtensions. (Except the client should never be in this situation so it\u0027s kind of moot.) The idea is that client EE is sent if and only if some extension forces it to exist.\n\nWe also should check that the extension we didn\u0027t expect isn\u0027t in there. I.e. if we requested the new one, the peer should not send an EncryptedExtensions message with both.\n\nLet\u0027s write this as something like...\n\n```\n\tif encryptedExtensions.extensions.hasApplicationSettings || encryptedExtensions.extensions.hasApplicationSettingsOld {\n\t\tmsg, err :\u003d c.readHandshake()\n\t\tif err !\u003d nil {\n\t\t\treturn err\n\t\t}\n\t\tclientEncryptedExtensions, ok :\u003d msg.(*clientEncryptedExtensionsMsg)\n\t\tif !ok {\n\t\t\tc.sendAlert(alertUnexpectedMessage)\n\t\t\treturn unexpectedMessageError(clientEncryptedExtensions, msg)\n\t\t}\n\t\ths.writeClientHash(clientEncryptedExtensions.marshal())\n\t\t\n\t\t...\n\t}\n\t\n\tif encryptedExtensions.extensions.hasEarlyData {\n\t\t// 0-RTT sessions carry application settings over.\n\t\tc.peerApplicationSettings \u003d hs.sessionState.peerApplicationSettings\n\t\tc.peerApplicationSettingsOld \u003d hs.sessionState.peerApplicationSettingsOld\n\t}\n```",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "510095a9_2ca8a1c2",
        "filename": "ssl/test/runner/handshake_server.go",
        "patchSetId": 18
      },
      "lineNbr": 1294,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "will refactor it to check corresponding application settings instead of both.",
      "parentUuid": "9ba9a934_2cc7ddf7",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f480c1e2_f309e1c2",
        "filename": "ssl/test/runner/handshake_server.go",
        "patchSetId": 18
      },
      "lineNbr": 1626,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "`var alpsAllowed, alpsAllowedOld bool`",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea565ffb_2d7495e8",
        "filename": "ssl/test/runner/handshake_server.go",
        "patchSetId": 18
      },
      "lineNbr": 1626,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f480c1e2_f309e1c2",
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c5cb08b_7bde0234",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7199,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "ALPS",
      "range": {
        "startLine": 7199,
        "startChar": 40,
        "endLine": 7199,
        "endChar": 44
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ea12887_d7350138",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7199,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c5cb08b_7bde0234",
      "range": {
        "startLine": 7199,
        "startChar": 40,
        "endLine": 7199,
        "endChar": 44
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b6a8462_2333e549",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7222,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "ALPS",
      "range": {
        "startLine": 7222,
        "startChar": 51,
        "endLine": 7222,
        "endChar": 55
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a504397_2e880116",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7222,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b6a8462_2333e549",
      "range": {
        "startLine": 7222,
        "startChar": 51,
        "endLine": 7222,
        "endChar": 55
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ada4e24_13d2821a",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7224,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "been negotiated,",
      "range": {
        "startLine": 7224,
        "startChar": 9,
        "endLine": 7224,
        "endChar": 17
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "397661a0_050edbdf",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7224,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ada4e24_13d2821a",
      "range": {
        "startLine": 7224,
        "startChar": 9,
        "endLine": 7224,
        "endChar": 17
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "efd1dc26_9d86347c",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7271,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "ALPS",
      "range": {
        "startLine": 7271,
        "startChar": 40,
        "endLine": 7271,
        "endChar": 44
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5ca5b3c_22fe575d",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7271,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "efd1dc26_9d86347c",
      "range": {
        "startLine": 7271,
        "startChar": 40,
        "endLine": 7271,
        "endChar": 44
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cc04f9e_6a3cebc2",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7294,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "ALPS",
      "range": {
        "startLine": 7294,
        "startChar": 51,
        "endLine": 7294,
        "endChar": 55
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da1c58b0_23f23e09",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7294,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6cc04f9e_6a3cebc2",
      "range": {
        "startLine": 7294,
        "startChar": 51,
        "endLine": 7294,
        "endChar": 55
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "736f6184_a20d02d2",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7296,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "been negotiated,",
      "range": {
        "startLine": 7296,
        "startChar": 9,
        "endLine": 7296,
        "endChar": 17
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b366305c_608c3499",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7296,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "736f6184_a20d02d2",
      "range": {
        "startLine": 7296,
        "startChar": 9,
        "endLine": 7296,
        "endChar": 17
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb67be36_a84a3cf5",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7341,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-22T00:03:55Z",
      "side": 1,
      "message": "alpsCodePoint\n\n(Local variables in Go are lowercase)",
      "range": {
        "startLine": 7341,
        "startChar": 11,
        "endLine": 7341,
        "endChar": 24
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0df1add3_20fa49be",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 18
      },
      "lineNbr": 7341,
      "author": {
        "id": 16391
      },
      "writtenOn": "2023-08-22T19:51:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb67be36_a84a3cf5",
      "range": {
        "startLine": 7341,
        "startChar": 11,
        "endLine": 7341,
        "endChar": 24
      },
      "revId": "dced92bf40fe73bb3cd52275b404965539c310c7",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}