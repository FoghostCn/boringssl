{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3828cb23_62ad212f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-25T19:19:09Z",
      "side": 1,
      "message": "I don\u0027t particularly mind after way, but what\u0027s the motivation for moving this inside the library instead of inside the Rust crate? For the moment, it seems this is exclusively a Rust limitiation. E.g. Python CFFI is perfectly capable of binding the function. And it seems there\u0027s some progress towards the Rust limitation getting addressed in https://github.com/rust-lang/rust-bindgen/pull/2335\n\n(This is a macro, not an inline function, but it\u0027s the same fundamental primitive. We might even be able to just make this an inline function rather than a macro.)",
      "revId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adb8d05c_f9b73cef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-01-25T19:53:48Z",
      "side": 1,
      "message": "My motivation is to reduce the reliance on `build.rs`, because its disruptive to a lot of the paths to make rust-openssl\u0027s BoringSSL support more transparent (wall of text available at https://github.com/sfackler/rust-openssl/issues/1768#issuecomment-1365402267)\n\nIf you think it\u0027s a better direction to make these inline functions, and then chase down the bindgen angle, I\u0027m happy to do a different CL that converts the macros to inline functions (which I think OpenSSL3 also did) and then we can wait for a bindgen release with that functionality to remove the build.rs stuff. Let me know if that\u0027s your preference.",
      "parentUuid": "3828cb23_62ad212f",
      "revId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f3495d2_1f658f46",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-26T15:23:16Z",
      "side": 1,
      "message": "Inline functions seem just generally preferable to macros (they\u0027re actually type-checked) so, whatever we do here, I\u0027m on board with making them inline regardless. That OpenSSL did this already bodes well for compatibility. I\u0027ve kicked off a build of the main monorepo to see if that causes any problems.\n\nIt does feel silly to me to have to define explicit out-of-line variants of any inline functions we might add. Or for converting an out-of-line function to an inline function to require a lot of fuss. When would you expect the bindgen issue to get resolved?\n\nI\u0027m also a little confused about the end goal... this is in service of (1) in the rust-openssl issue? I\u0027m not familiar very with Rust\u0027s build limitations, but saying bssl-sys doesn\u0027t participate in Rust compilation properly and instead is textually included seems odd. How would that work if we were to build a proper Rust API in the future? Surely that would need to actually be a crate, published or no. (I do not expect rust-openssl to be our long-term recommended path for Rust.)",
      "parentUuid": "adb8d05c_f9b73cef",
      "revId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f15ff6bb_71f91c36",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-01-26T17:14:29Z",
      "side": 1,
      "message": "Yes, I agree inline functions are better. If that path works for you, it certainly works for me.\n\nI\u0027ll check in with folks about that bindgen work, but my hope is that it\u0027ll ship in the near term (\u003c1 month), so just waiting on it may be fine!\n\nIn terms of the end goals: Yes, you have it right, raw bindings textually included. If you wanted to build a proper Rust API, _that_ would be a normal crate, which includes the raw bindings the same way openssl-sys would.",
      "parentUuid": "7f3495d2_1f658f46",
      "revId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d7f83ca_edb528ac",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-27T14:21:36Z",
      "side": 1,
      "message": "https://boringssl-review.googlesource.com/c/boringssl/+/56405 switches to inline functions.",
      "parentUuid": "f15ff6bb_71f91c36",
      "revId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e18d679_e034b612",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-01-27T20:11:15Z",
      "side": 1,
      "message": "Great! I\u0027ll test it out with the extern branch of bindgen, and if it\u0027s all good, I\u0027ll wontfix this and then plan to follow-up once that\u0027s released.",
      "parentUuid": "8d7f83ca_edb528ac",
      "revId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37ab612f_d3dc6ca1",
        "filename": "include/openssl/err.h",
        "patchSetId": 2
      },
      "lineNbr": 426,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-26T15:23:16Z",
      "side": 1,
      "message": "Why in the world is rust-openssl binding this function? Even upstream OpenSSL has retracted it. Can rust-openssl just be fixed to use OpenSSL\u0027s APIs correctly.",
      "revId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53811573_82886ef8",
        "filename": "include/openssl/err.h",
        "patchSetId": 2
      },
      "lineNbr": 426,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-01-26T17:14:29Z",
      "side": 1,
      "message": "What does correctly mean? https://github.com/sfackler/rust-openssl/blob/master/openssl/src/error.rs is the context its used, its entirely for modeling OpenSSL\u0027s error stack in Rust. If it\u0027s correct to always just assume that func is 0/null, that\u0027s easy enough I suppose.",
      "parentUuid": "37ab612f_d3dc6ca1",
      "revId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d71fe8c_602306df",
        "filename": "include/openssl/err.h",
        "patchSetId": 2
      },
      "lineNbr": 426,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-27T14:21:36Z",
      "side": 1,
      "message": "The use in `impl fmt::Display for Error` doesn\u0027t make sense as it\u0027ll just be func(0) in OpenSSL 3.0 (and BoringSSL). Though the library also already provides `ERR_error_string_n` so I\u0027m not sure why rust-openssl is reimplementing this.\n\nThe other use seems to be about putting errors back onto the OpenSSL error stack? I\u0027ve never seen any caller need to do this. Usually you consume OpenSSL errors and just act on them. Semantically, it\u0027s a bit off to claim an error came from some function when it came from Rust.\n\nLooks like it came from https://github.com/sfackler/rust-openssl/pull/850 with no explanation as to why.",
      "parentUuid": "53811573_82886ef8",
      "revId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "091ea8201cf8928cb71a8893b0fb39e28798092c",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}