{
  "comments": [
    {
      "key": {
        "uuid": "83a45619_33e1464d",
        "filename": "include/openssl/pool.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-06-13T19:12:45Z",
      "side": 1,
      "message": "Since this lets you get a mutable pointer to a CRYPTO_BUFFER\u0027s data, it might be worth including some more text about how to use this. Something about how you should write some data to the pointer, but once you\u0027ve set it up, throw away the pointer and treat it as immutable.",
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e88ba3bc_eecd10e8",
        "filename": "include/openssl/pool.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-17T17:13:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "83a45619_33e1464d",
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72a11ff3_164e8069",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 3964,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-06-13T19:12:45Z",
      "side": 1,
      "message": "Huh! I\u0027m actually kind of surprised that passed the CQ, but okay! Historically MSVC took a lot of offense at stuffing function pointers into void* because C doesn\u0027t promise they fit on all implementations. Apparently we\u0027re not all that confident about this von Neumann architecture idea yet.\n\nAmusingly GCC didn\u0027t care, and GCC is far more likely to run on platforms where they were different sizes.",
      "range": {
        "startLine": 3964,
        "startChar": 24,
        "endLine": 3964,
        "endChar": 39
      },
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65d50d9c_2c389f39",
        "filename": "ssl/ssl_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 3964,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-17T17:13:35Z",
      "side": 1,
      "message": "Seems to work so far. This only needs to be a unique identifier for the function and its address seemed reasonable. If it blows up down the line, it can be replaced with any other identifier.",
      "parentUuid": "72a11ff3_164e8069",
      "range": {
        "startLine": 3964,
        "startChar": 24,
        "endLine": 3964,
        "endChar": 39
      },
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cf0ba40_7d83f16d",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 1
      },
      "lineNbr": 2786,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-06-13T19:12:45Z",
      "side": 1,
      "message": "Nit: I expect that just doing first || CBB_flush(out) without the \u003d\u003d 1 works.",
      "range": {
        "startLine": 2786,
        "startChar": 33,
        "endLine": 2786,
        "endChar": 37
      },
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e663cc5_c6a8815a",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 1
      },
      "lineNbr": 2786,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-17T17:13:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8cf0ba40_7d83f16d",
      "range": {
        "startLine": 2786,
        "startChar": 33,
        "endLine": 2786,
        "endChar": 37
      },
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11f44730_4748ed47",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 14589,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-06-13T19:12:45Z",
      "side": 1,
      "message": "Shrinks",
      "range": {
        "startLine": 14589,
        "startChar": 33,
        "endLine": 14589,
        "endChar": 39
      },
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5c559f0_41fdbca3",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 1
      },
      "lineNbr": 14589,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-17T17:13:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "11f44730_4748ed47",
      "range": {
        "startLine": 14589,
        "startChar": 33,
        "endLine": 14589,
        "endChar": 39
      },
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0170dc4f_20283893",
        "filename": "ssl/tls13_both.cc",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-06-13T19:12:45Z",
      "side": 1,
      "message": "Should we sanity-check that CRYPTO_BUFFER_len(decompressed.get()) \u003d\u003d uncompressed_len? If the callback just ignores the length, we have worse problems, of course, but I could imagine someone doing the caching thing forgetting to check.",
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8371807_e189b47d",
        "filename": "ssl/tls13_both.cc",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-06-17T17:13:35Z",
      "side": 1,
      "message": "Yep, thanks.",
      "parentUuid": "0170dc4f_20283893",
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63653f04_f95d15c3",
        "filename": "ssl/tls13_both.cc",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-06-13T19:12:45Z",
      "side": 1,
      "message": "I\u0027m not sure why we had the message type checks in the handshake functions rather than here. They could just have been here. *shrug*",
      "revId": "b2c8703c419abf07468d99810bb86454f8450051",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}