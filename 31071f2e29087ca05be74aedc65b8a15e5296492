{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4120d3cc_febdae3e",
        "filename": "rust/bssl/build.rs",
        "patchSetId": 17
      },
      "lineNbr": 17,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-02-17T00:17:56Z",
      "side": 1,
      "message": "What do you mean trigger cmake? My understand is the goal is for cmake to drive the rust build, not the inverse?",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c05d22f_8fbde534",
        "filename": "rust/bssl/build.rs",
        "patchSetId": 17
      },
      "lineNbr": 17,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-02-17T00:48:30Z",
      "side": 1,
      "message": "cmake drives the building of boringssl c code + the generation of the `bssl-sys` low level bindgen generated rust bindings. This crate takes a dependency on that generated crate, so for convenience it might be nice to have `cargo build` from inside of this crate, also trigger generating the dependency.\n\nFor now I am just manually generating the bindings via the cmake command, and then depending on them from this crate",
      "parentUuid": "4120d3cc_febdae3e",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2559a1d4_c8a0b476",
        "filename": "rust/bssl/src/hmac.rs",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-02-17T00:17:56Z",
      "side": 1,
      "message": "WHat\u0027s teh advantage to Hmac being a trait, versus being a concrete struct, with the same parameters?",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e620c49f_dec5b676",
        "filename": "rust/bssl/src/hmac.rs",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-02-17T00:48:30Z",
      "side": 1,
      "message": "I guess the trait isn\u0027t technically needed, but I think it provides a nice way to define and document the HMAC operations in one place, that can then be implemented multiple times. It would also make adding future flavors easier",
      "parentUuid": "2559a1d4_c8a0b476",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73710fec_f1639c29",
        "filename": "rust/bssl/src/hmac.rs",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-02-22T22:44:32Z",
      "side": 1,
      "message": "On second thought, I agree that the trait isn\u0027t needed, since exposing a public trait might encourage users to implement it, which we don\u0027t want. I removed the trait and just directly implemented the structs",
      "parentUuid": "e620c49f_dec5b676",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92f88bae_6f8a567c",
        "filename": "rust/bssl/src/hmac.rs",
        "patchSetId": 17
      },
      "lineNbr": 248,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-02-17T00:17:56Z",
      "side": 1,
      "message": "Is there a reason to write it this way, instead of `if len \u003d\u003d 0 || len \u003e N`?",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c6d5d3f_5a2320b5",
        "filename": "rust/bssl/src/hmac.rs",
        "patchSetId": 17
      },
      "lineNbr": 248,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-02-17T00:48:30Z",
      "side": 1,
      "message": "good point, left over from a refactor, updated",
      "parentUuid": "92f88bae_6f8a567c",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7d12fa7_3d97aad2",
        "filename": "rust/bssl/src/lib.rs",
        "patchSetId": 17
      },
      "lineNbr": 46,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-02-17T00:17:56Z",
      "side": 1,
      "message": "BoringSSL pushes errors onto the stack for allocation failures (see https://boringssl.googlesource.com/boringssl/+/dcabfe2d8940529a69e007660fa7bf6c15954ecc). Simply panicing will leave those on the stack.",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5efceb97_69ec7637",
        "filename": "rust/bssl/src/lib.rs",
        "patchSetId": 17
      },
      "lineNbr": 46,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-02-17T00:54:38Z",
      "side": 1,
      "message": "the goal here is to not have rust libraries handle allocation failures and instead just panic/abort/crash, rather than continue to run and have an attacker potentially be able to exploit the malloc failures",
      "parentUuid": "e7d12fa7_3d97aad2",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c54118d_54b9f146",
        "filename": "rust/bssl/src/lib.rs",
        "patchSetId": 17
      },
      "lineNbr": 46,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-02-22T22:44:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5efceb97_69ec7637",
      "revId": "31071f2e29087ca05be74aedc65b8a15e5296492",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}