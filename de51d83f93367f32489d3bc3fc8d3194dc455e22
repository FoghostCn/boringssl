{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "41a0b48d_f75205a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-09T20:01:12Z",
      "side": 1,
      "message": "New patchset, PTAL!",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35b06216_70b95fb9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "cla",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f70659e_d50de95b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 24
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-13T19:38:40Z",
      "side": 1,
      "message": "(Oops, ignore this. Hotkeys get very confused while I was typing a word.)",
      "parentUuid": "35b06216_70b95fb9",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e9da6a9_06013dd5",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 24
      },
      "lineNbr": 4117,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Let\u0027s move this up a few sections. It\u0027s currently right under \"Obscure functions\". :-) Perhaps after \"Early Data\" since that\u0027s the last TLS feature.\n\nPerhaps also drop \"(ECH) functions\" for consistency. We don\u0027t have \"(ALPN)\" on the ALPN section, and we also don\u0027t have \"functions\" on most of the TLS feature sections. (Although it\u0027s not all that consistent. Ah well.)",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f575763_9023c05e",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 24
      },
      "lineNbr": 4117,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done. I also moved the function definition in ssl_lib.cc, but I wasn\u0027t 100% sure where to put it.",
      "parentUuid": "4e9da6a9_06013dd5",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cbcca6d4_23ed94e8",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 24
      },
      "lineNbr": 4121,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "This is a bit of a meme with me and Steven at this point. :-) I don\u0027t believe anything in TLS calls it the ServerName extension. The extensions are named like server_name, so that\u0027s one option. I\u0027ve also seen \"the SNI extension\". I\u0027d probably just go with \"the server_name extension\" to match https://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Server-name-indication.\n\nAmusingly, although everyone calls it \"SNI\" or \"the SNI extension\", the extension is not officially named SNI anywhere. SNI comes from the section heading in RFC6066. But RFC6066\u0027s section headings describe the purpose of extension, not the name. (E.g. the purpose of the max_fragment_length extension is maximum fragment length negotiation.) But somehow the name stuck so... okay.\nhttps://tools.ietf.org/html/rfc6066#section-3",
      "range": {
        "startLine": 4121,
        "startChar": 27,
        "endLine": 4121,
        "endChar": 37
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c65b78b6_cdfcd9b7",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 24
      },
      "lineNbr": 4121,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "We should probably include some text in here like:\n\nECH support in BoringSSL is still experimental and under development.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed8abfff_72278834",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 24
      },
      "lineNbr": 4121,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done! Thanks for the context.",
      "parentUuid": "cbcca6d4_23ed94e8",
      "range": {
        "startLine": 4121,
        "startChar": 27,
        "endLine": 4121,
        "endChar": 37
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d661200b_ddbe2e78",
        "filename": "include/openssl/ssl.h",
        "patchSetId": 24
      },
      "lineNbr": 4121,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c65b78b6_cdfcd9b7",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bcdb545a_b7cef942",
        "filename": "include/openssl/tls1.h",
        "patchSetId": 24
      },
      "lineNbr": 244,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "I am mildly annoyed that they didn\u0027t just pick a random number, but okay. :-)\n\nOh, let\u0027s use 0xffwhatever for experimental extensions. Oh, but lots of experimental extensions had this idea, so we\u0027ll use 0xfewhatever. The next step is that multiple experimental extensions will have idea too and we\u0027ll all conflict on fd, fb, fc, fa, etc., in sequence. Better to just pick random numbers and not think very hard about this, IMO.",
      "range": {
        "startLine": 244,
        "startChar": 43,
        "endLine": 244,
        "endChar": 49
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7360c53_e2278a71",
        "filename": "ssl/internal.h",
        "patchSetId": 24
      },
      "lineNbr": 1452,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Stray change?",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "067c36bd_1b86ac92",
        "filename": "ssl/internal.h",
        "patchSetId": 24
      },
      "lineNbr": 1452,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Yep, that slipped past me. Done.",
      "parentUuid": "d7360c53_e2278a71",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c367a470_f5333b84",
        "filename": "ssl/internal.h",
        "patchSetId": 24
      },
      "lineNbr": 1647,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "ECH doesn\u0027t call these key shares or public keys. It\u0027s enc.\n\nAlso both this and the value above should probably include \"grease\" in the name. They\u0027re not useful for non-GREASE stuff.\n\n(As an aside, Array\u003cT\u003e is... pretty wasteful. It\u0027s 16 bytes plus a malloc. But these values aren\u0027t that much better than 16 bytes to begin with! But this is on the handshake, so I don\u0027t care as much. And not storing it for things that don\u0027t need it is nice. Anyway probably not worth bothering much because we\u0027ll almost certainly target draft-09 and throw this code away.)",
      "range": {
        "startLine": 1647,
        "startChar": 17,
        "endLine": 1647,
        "endChar": 34
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24eb0f75_0ffe0f76",
        "filename": "ssl/internal.h",
        "patchSetId": 24
      },
      "lineNbr": 1647,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c367a470_f5333b84",
      "range": {
        "startLine": 1647,
        "startChar": 17,
        "endLine": 1647,
        "endChar": 34
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46e3c3e0_a8124785",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 595,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "This can be shortened to:\n\n// random_size returns a random value between |min| and |max|, inclusive.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c0a49da_f0e2ecff",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 595,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46e3c3e0_a8124785",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa769086_43496c4f",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 608,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Remove this, or fix it to match the style. (Though I don\u0027t think this comment is really explaining anything.)",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfbb8d5f_9889a4db",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 608,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa769086_43496c4f",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa6fddc0_39b9be60",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 621,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Check for malloc failure.",
      "range": {
        "startLine": 621,
        "startChar": 22,
        "endLine": 621,
        "endChar": 26
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfe713a3_5f440b35",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 621,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aa6fddc0_39b9be60",
      "range": {
        "startLine": 621,
        "startChar": 22,
        "endLine": 621,
        "endChar": 26
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15f5b329_9987029a",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 627,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Check for malloc failure. (My trick is to mentally keep track of whenever I allocate. In addition to helping me think about unnecessary allocations, it reminds me to include the error path. It\u0027s also especially important when working on libcrypto because every allocation must be balanced with some cleanup code.)",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d04be50c_0aa1794b",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 627,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15f5b329_9987029a",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44e1ef7a_f34a898c",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 631,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "encrypted_ch doesn\u0027t appear anywhere in the draft. I would say payload, but that\u0027s not right either. (Payload includes the tag.) How about we shorten both this and the following paragraph to:\n\n// To determine a plausible length for the payload, we first estimate the size of a typical EncodedClientHelloInner, with an expected use of outer_extensions. To limit the size, we only consider initial ClientHellos that do not offer resumption.\n\nI think this is enough to introduce the giant table and also explains why we\u0027re not including the PSK extension, which is the only \"why\" bit that we really should be mentioning.",
      "range": {
        "startLine": 631,
        "startChar": 31,
        "endLine": 631,
        "endChar": 43
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a1055de_47c88238",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 631,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44e1ef7a_f34a898c",
      "range": {
        "startLine": 631,
        "startChar": 31,
        "endLine": 631,
        "endChar": 43
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8385ab7b_9b713039",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 634,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "(n/a with comment above, but it\u0027s usually written TLS 1.3 in prose, not TLS1.3.)",
      "range": {
        "startLine": 634,
        "startChar": 27,
        "endLine": 634,
        "endChar": 33
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89265714_cb77fed9",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 646,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Did you mean to remove this?",
      "range": {
        "startLine": 646,
        "startChar": 51,
        "endLine": 646,
        "endChar": 53
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94ad3a3f_eb6dc35b",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 646,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Yes, good catch.",
      "parentUuid": "89265714_cb77fed9",
      "range": {
        "startLine": 646,
        "startChar": 51,
        "endLine": 646,
        "endChar": 53
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07a3a2db_ffd5d03d",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 647,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Missing a 2 on the side it seems.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2425191b_14840e02",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 647,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "07a3a2db_ffd5d03d",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6457421_2b086e7a",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 653,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "This is a bit inconsistent about when to number and when to use bullet points. (If you fix the extension overhead computation below, I think everything can be bullet points.)",
      "range": {
        "startLine": 653,
        "startChar": 10,
        "endLine": 653,
        "endChar": 12
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f03a225_7aaf2f5e",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 653,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "My convention was that I used numbers (starting at 1) when I need to know how many things there were in that list.  But I agree that inlining it is probably easier on the reader.",
      "parentUuid": "c6457421_2b086e7a",
      "range": {
        "startLine": 653,
        "startChar": 10,
        "endLine": 653,
        "endChar": 12
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8ad5a57_0b98ec49",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 669,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "I think you meant 12. Better yet, this strategy of splitting the extension overhead out seems to error-prone. Why not just stick a 4 next to each of the extensions. Ditto below.",
      "range": {
        "startLine": 669,
        "startChar": 52,
        "endLine": 669,
        "endChar": 53
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c62cf7d_c4061faa",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 669,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8ad5a57_0b98ec49",
      "range": {
        "startLine": 669,
        "startChar": 52,
        "endLine": 669,
        "endChar": 53
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f16f2f0_60dcd8a8",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 689,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Lines 674 through 689 can be trimmed down into some shorter prose (this comment is already rather long).\n\n// The server_name extension has an overhead of 9 bytes, plus up to an estimated 100 bytes of hostname. Rounding up to a multiple of 32, that gives a range of ??? to ???. Note this estimate does not fully capture optional extensions like GREASE, but the rounding gives some leeway.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "093d10dc_5c406bbb",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 689,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f16f2f0_60dcd8a8",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81cb869d_f909d0e1",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 693,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "This won\u0027t give the right range without rounding the values up to a multiple of 32 *first*.",
      "range": {
        "startLine": 693,
        "startChar": 53,
        "endLine": 693,
        "endChar": 61
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8caa2976_28f2fab7",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 693,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81cb869d_f909d0e1",
      "range": {
        "startLine": 693,
        "startChar": 53,
        "endLine": 693,
        "endChar": 61
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc7d8ef2_0e8d2437",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 697,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "When we need to suffix, we usually use _cbb, not _bb.",
      "range": {
        "startLine": 697,
        "startChar": 25,
        "endLine": 697,
        "endChar": 28
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f46f29f5_edbcbc36",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 697,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fc7d8ef2_0e8d2437",
      "range": {
        "startLine": 697,
        "startChar": 25,
        "endLine": 697,
        "endChar": 28
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3a30acb5_378f5f13",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 728,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "One too many spaces",
      "range": {
        "startLine": 728,
        "startChar": 37,
        "endLine": 728,
        "endChar": 38
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c78c20cf_29347935",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 24
      },
      "lineNbr": 728,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a30acb5_378f5f13",
      "range": {
        "startLine": 728,
        "startChar": 37,
        "endLine": 728,
        "endChar": 38
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7eb89957_c1362379",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 24
      },
      "lineNbr": 388,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "This flag seems redundant with all the other options. You can\u0027t enable ECH as a client without ECHConfigs and you can\u0027t enable ECH as a server without a []ECHConfigAndKey.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f55ec426_3baaacbf",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 24
      },
      "lineNbr": 388,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7eb89957_c1362379",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca862b32_6665da3a",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 24
      },
      "lineNbr": 391,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Let\u0027s just leave \"public API\" here (not that runner is well-split into a library right now) as just a byte string. Additionally, we ought to be testing things like... if the server gives us an ECHConfig of an unknown version, we don\u0027t explode. That means we need a []byte anyway.\n\nI would also suggest calling this SendECHRetryConfigs and maybe even putting it in ProtocolBugs, not Config. The server should never send retry configs that aren\u0027t its actual configs. But for now, because we\u0027re doing things in a funny order, we\u0027re in that state so it\u0027s a ProtocolBug. (Long-term, I dunno. I could see this going away in favor of the real one, or I could see us retaining this one because we need to test the unknown version.)",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33fbbaca_1f5584a2",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 24
      },
      "lineNbr": 391,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "I\u0027m adding ProtocolBugs.SendECHRetryConfigs.\n\nThis new SendECHRetryConfigs field means I won\u0027t have to abuse the echConfig.raw field anymore (yay!).\n\nHowever, it seems silly to get rid of the ECHConfigs field. Each test in runner would need to manually serialize its ECHConfigs.\n\nWDYT about keeping the ECHConfigs field?",
      "parentUuid": "ca862b32_6665da3a",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d3c176b_fb1cdc90",
        "filename": "ssl/test/runner/common.go",
        "patchSetId": 24
      },
      "lineNbr": 391,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-18T21:38:36Z",
      "side": 1,
      "message": "Yes, we\u0027ll need some ECHConfigs field. I don\u0027t think this is the one we need because the server configuration needs a private key. (And this particular echConfig structure isn\u0027t suitable for adding a private key because it represents a parsed ECHConfig, not a server ECH configuration.)\n\n\u003e Each test in runner would need to manually serialize its ECHConfigs.\n\nYou can always compute it once and save it somewhere. And later on when we have actual ECH configs, I imagine they\u0027ll be stashed somewhere and you can just pull off the fields you want. We\u0027ll need to do that anyway whether the thing you stash is a byte string or a more complex type.\n\nAlso remember that, in actual ECH tests, we need to pass the configuration to the client with a matching serialization. So we\u0027ll need the byte string version no matter what. But let\u0027s leave this CL with just the things you need for GREASE, get it landed, and then we can work through how to test the real thing. I don\u0027t think it\u0027s worth getting bogged down in speculation like this, when we can do this with a concrete design.",
      "parentUuid": "33fbbaca_1f5584a2",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94dd9ba1_9140d64e",
        "filename": "ssl/test/runner/handshake_messages.go",
        "patchSetId": 24
      },
      "lineNbr": 321,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "The spec calls this a ClientECH, so probably better to name based on that.",
      "range": {
        "startLine": 321,
        "startChar": 5,
        "endLine": 321,
        "endChar": 25
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5beeb87c_a67cb1d3",
        "filename": "ssl/test/runner/handshake_messages.go",
        "patchSetId": 24
      },
      "lineNbr": 321,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94dd9ba1_9140d64e",
      "range": {
        "startLine": 321,
        "startChar": 5,
        "endLine": 321,
        "endChar": 25
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7712f476_e25a5e06",
        "filename": "ssl/test/runner/handshake_messages.go",
        "patchSetId": 24
      },
      "lineNbr": 322,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "The business with the raw field is there for the handshake messages because the parse doesn\u0027t capture all the information. We don\u0027t need any of that for this structure. There\u0027s also no need to match the marshal/unmarshal interface because a ClientECH is never encoded standalone. It\u0027s only read from a byteReader and written to a byteBuilder.\n\nFor keyShareEntry and pskIdentity, we didn\u0027t even split them out into functions. Considering ClientECH is parsed in exactly one place and encoded in exactly one place and has just five fields, I think we can just inline it too.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b9925b30_01f135ce",
        "filename": "ssl/test/runner/handshake_messages.go",
        "patchSetId": 24
      },
      "lineNbr": 322,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Inlined.",
      "parentUuid": "7712f476_e25a5e06",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ca4cbaa_7f4f8dec",
        "filename": "ssl/test/runner/handshake_messages.go",
        "patchSetId": 24
      },
      "lineNbr": 1386,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Similar comment to the Config structure. This probably wants to be a []byte, so we can test unknown versions.\n\nEven for a real impl, we\u0027d want to return the ECHConfigs as a byte string anyway. Consider what the client caller would do with this information. They need to turn around and feed it back into the API for configuring the ECHConfigs. Those types should thus match, and we\u0027d probably just get the byte array from DNS and toss directly into TLS.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ef10931_9edcc693",
        "filename": "ssl/test/runner/handshake_messages.go",
        "patchSetId": 24
      },
      "lineNbr": 1386,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Part of the reason I want to keep the echConfig struct around is that the client and server both need to compute the configID, and it\u0027s slightly annoying to do twice.\n\nWDYT about keeping this []echConfig field and an additional []byte field that gets tacked onto the extension body?",
      "parentUuid": "6ca4cbaa_7f4f8dec",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be7afc01_e26de4f6",
        "filename": "ssl/test/runner/handshake_messages.go",
        "patchSetId": 24
      },
      "lineNbr": 1386,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-18T21:38:36Z",
      "side": 1,
      "message": "I\u0027m not following why it would need to be done twice. Both certainly need to compute it at different times, but that\u0027s what extracting it into a function is for. Or are you envisioning that it would be part of parsing?\n\nI don\u0027t think part of parsing would work anyway. Remember there isn\u0027t a single config_id in a fully general implementation. It depends on the KDF. (Although I think this is probably a mistake and we should fix that. Relatedly, you know how I said we should only support one KDF in an early comment? This is part of why.)\n\nLet\u0027s remove the things that aren\u0027t used by this CL, so that when we get to them, we\u0027ll have something concrete to discuss. I think this CL have gotten too bogged down in abstractions with hypothetical uses. The aim with doing GREASE first was just to plop in something very quick and simple that doesn\u0027t need the full thing. Otherwise, we\u0027d want to do it in the other order so that we have the abstractions already available.",
      "parentUuid": "2ef10931_9edcc693",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09616e8c_4f1bf59b",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 24
      },
      "lineNbr": 8291,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "ECH is complex enough of an extension that I think we should just pull it into its own group.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40ef68e2_2f1e2bd9",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 24
      },
      "lineNbr": 8291,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09616e8c_4f1bf59b",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82acacae_7ebb4a65",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 24
      },
      "lineNbr": 8304,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "We usually don\u0027t put quotes around the extension names in our comments, unlike the spec. Ditto with decode_error below.",
      "range": {
        "startLine": 8304,
        "startChar": 47,
        "endLine": 8304,
        "endChar": 71
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "962cc020_fd237dce",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 24
      },
      "lineNbr": 8304,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "82acacae_7ebb4a65",
      "range": {
        "startLine": 8304,
        "startChar": 47,
        "endLine": 8304,
        "endChar": 71
      },
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a5fa049_8a590687",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 24
      },
      "lineNbr": 8308,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "I think it\u0027s worth testing both valid with unknown version and a real one. Perhaps in the same message to make sure the client can iterate over them.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96de88da_cbbd8f02",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 24
      },
      "lineNbr": 8308,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a5fa049_8a590687",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d015ea47_4161f5ac",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 24
      },
      "lineNbr": 8348,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-12T23:12:39Z",
      "side": 1,
      "message": "Also add an expectedError with the shim-side error. That helps target the failure to the right part of the code because alerts are really generic.",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a15ed0a_791e5e45",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 24
      },
      "lineNbr": 8348,
      "author": {
        "id": 9581
      },
      "writtenOn": "2020-11-13T21:38:55Z",
      "side": 1,
      "message": "Just changed the alert from decode_error to illegal_parameter as draft-08 specifies and updated the expectedLocalError.\n\nI\u0027m not sure what to put in expectedError. I tried \":ILLEGAL_PARAMETER:\", but it didn\u0027t work. Is ShimConfiguration.ErrorMap never populated unless \"-shim-config\" is specified?\n\nI also tried \"illegal parameter\" hoping for the substring to match stderr, but that didn\u0027t work either.\n\nHow does this part of runTest() work? https://source.chromium.org/chromium/chromium/src/+/master:third_party/boringssl/src/ssl/test/runner/runner.go;l\u003d1584-1585;drc\u003daec1b62b07a4465c3b6747a09ad69c614bc5766b\n\nWhen I run the test, it looks like |stderr| is actually empty.",
      "parentUuid": "d015ea47_4161f5ac",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a96ef39c_bc599118",
        "filename": "ssl/test/runner/runner.go",
        "patchSetId": 24
      },
      "lineNbr": 8348,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-11-18T21:38:36Z",
      "side": 1,
      "message": "It\u0027s not supposed to be the alert name. It\u0027s the local error code on the BoringSSL side. If you don\u0027t see one, sometimes that\u0027s a bug and you forgot to add one. Though the callbacks should all push ERROR_PARSING_EXTENSION.\n\nAlerts are what you report to the peer. Local errors are what you report the caller. Alerts are limited to the enums the protocol defines. Local errors are what we want. We need to test both. Especially when, e.g., the ECH mismatch flow depends on a particular local error being returned out of the API.",
      "parentUuid": "0a15ed0a_791e5e45",
      "revId": "de51d83f93367f32489d3bc3fc8d3194dc455e22",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}