{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2dc67a42_266ca597",
        "filename": "rust/bssl-crypto/src/bn.rs",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-06-06T16:31:50Z",
      "side": 1,
      "message": "same here",
      "range": {
        "startLine": 48,
        "startChar": 41,
        "endLine": 48,
        "endChar": 46
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd6a1eb5_7b479bb4",
        "filename": "rust/bssl-crypto/src/bn.rs",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 15426
      },
      "writtenOn": "2023-06-07T01:41:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2dc67a42_266ca597",
      "range": {
        "startLine": 48,
        "startChar": 41,
        "endLine": 48,
        "endChar": 46
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b177a8e5_f5eeecc2",
        "filename": "rust/bssl-crypto/src/ec.rs",
        "patchSetId": 10
      },
      "lineNbr": 85,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-06-06T16:31:50Z",
      "side": 1,
      "message": "Rust slices aren\u0027t quite safe to use directly over FFI because Rust and C have different representations of empty slices, see: http://go/rust-empty-slice-ub for context, but instead you could use the `CSlice` helper struct from the root of this crate.\n\nSame comment for the rest of the slices passed over ffi as well",
      "range": {
        "startLine": 85,
        "startChar": 16,
        "endLine": 85,
        "endChar": 31
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4954f078_0c4b210b",
        "filename": "rust/bssl-crypto/src/ec.rs",
        "patchSetId": 10
      },
      "lineNbr": 85,
      "author": {
        "id": 15426
      },
      "writtenOn": "2023-06-07T01:41:41Z",
      "side": 1,
      "message": "Interesting read. Changed to `CSlice`.",
      "parentUuid": "b177a8e5_f5eeecc2",
      "range": {
        "startLine": 85,
        "startChar": 16,
        "endLine": 85,
        "endChar": 31
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "235ff1ee_298e70e2",
        "filename": "rust/bssl-crypto/src/ec.rs",
        "patchSetId": 10
      },
      "lineNbr": 132,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-06-06T16:31:50Z",
      "side": 1,
      "message": "Should this have an error type?",
      "range": {
        "startLine": 132,
        "startChar": 22,
        "endLine": 132,
        "endChar": 24
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90a1ebf2_db95d303",
        "filename": "rust/bssl-crypto/src/ec.rs",
        "patchSetId": 10
      },
      "lineNbr": 132,
      "author": {
        "id": 15426
      },
      "writtenOn": "2023-06-07T01:41:41Z",
      "side": 1,
      "message": "Oops, yes. Changed to `ConversionFailed`",
      "parentUuid": "235ff1ee_298e70e2",
      "range": {
        "startLine": 132,
        "startChar": 22,
        "endLine": 132,
        "endChar": 24
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f623da84_fbcf7301",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 22,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-06-06T16:31:50Z",
      "side": 1,
      "message": "nit: does this map to a `bssl_sys` constant that could be used?",
      "range": {
        "startLine": 22,
        "startChar": 6,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "947e0a56_6407ca1f",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 22,
      "author": {
        "id": 15426
      },
      "writtenOn": "2023-06-07T01:41:41Z",
      "side": 1,
      "message": "There is nothing `const` that I can find. The underlying representation seems to be BigNum and not fixed sized.",
      "parentUuid": "f623da84_fbcf7301",
      "range": {
        "startLine": 22,
        "startChar": 6,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a57ce20_4978e21f",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-06-05T17:55:49Z",
      "side": 1,
      "message": "IMO yes, can you do so?",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 102
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa2d6009_1b975a48",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-06-08T16:05:13Z",
      "side": 1,
      "message": "Is this also used in the consuming library, or can this one be cfg[test] ?",
      "parentUuid": "7a57ce20_4978e21f",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 102
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0067dc06_44297095",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 65,
      "author": {
        "id": 15426
      },
      "writtenOn": "2023-06-09T00:36:26Z",
      "side": 1,
      "message": "It is also used in the consuming library, the same way we use it in X25519",
      "parentUuid": "fa2d6009_1b975a48",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 102
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2769d97_825883a1",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-06-05T17:55:49Z",
      "side": 1,
      "message": "Davidben may have an opinion here, but IMO the horse left the barn long ago with the door open at \"PublicKey\".",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 42
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1772a70_249a52ee",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 15426
      },
      "writtenOn": "2023-06-09T00:36:26Z",
      "side": 1,
      "message": "Removed this comment from the code in the latest patch set, but @davidben please comment if you think we should rename this.",
      "parentUuid": "b2769d97_825883a1",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 42
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0ec4689_84f0c931",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-09T22:29:17Z",
      "side": 1,
      "message": "I haven\u0027t had time to look at this carefully yet, but I think there may be some bigger API questions to think about here:\n\nFirst, P-256 is a curve, not a Diffie-Hellman primitive. It is used to implement ECDH, ECDSA, and all manner of algorithms. In contrast, X25519 is a Diffie-Hellman primitive. (X25519\u0027s curve is curve25519, which is equivalent to edwards25519, the curve that underlies Ed25519. But as curves, those can be used to make other primitives.)\n\nSo while it is, IMO, nicer that we have APIs for ECDH-P256 instead of P-256 (elliptic curves are things you build cryptography out of), calling the module `p256` is weird.\n\nSecond, it\u0027s weird that you all call the private key an `EphemeralSecret`. While ECDH is typically used with ephemeral keypairs, it isn\u0027t always. You can have long-lived ECDH keypairs. It\u0027s possible that we make an API specifically tailored for ephemeral keys only (I see `diffie_hellman` consumes the object), but in that case, why is there a `from_private_bytes` API? If you believe you can serialize and deserialize the object, it\u0027s clearly not ephemeral anymore.\n\nIt\u0027s also weird to take an opinionated stance that ECDH with P-256 is ephemeral, but not X25519? They\u0027re the same kind of construct ultimately.\n\nFinally, although we haven\u0027t solved this problem in even the C API (sort of... there\u0027s the EVP Diffie-Hellman stuff, but it\u0027s tedious) and don\u0027t necessary have to at this iteration, it is a bit weird for X25519 and ECDH with P-256 to be so different in API. Go recently added `crypto/ecdh` to their standard library, which is a pretty nice abstraction.\nhttps://pkg.go.dev/crypto/ecdh",
      "parentUuid": "b1772a70_249a52ee",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 42
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6118c924_19cad7d1",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-06-09T22:34:10Z",
      "side": 1,
      "message": "Oh, scratch some of the comments on X25519. I misremembered and thought you all had already designed an X25519 API but actually that was Ed25519. I see X25519 is later in the stack. :-)\n\nThough I still am a little confused about the focus on `EphemeralSecret`. Our C API doesn\u0027t try to force that. Can you elaborate on the motivation here?",
      "parentUuid": "a0ec4689_84f0c931",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 42
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53650729_d4db2692",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 88,
      "author": {
        "id": 15426
      },
      "writtenOn": "2023-06-09T23:20:13Z",
      "side": 1,
      "message": "I might have been overindexing on the p256 Rust crate that provides the equivalent functionality. That was the reason why this module is `p256` and also why the private keys are called `EphemeralSecret`.\n\nFor our use case, `from_private_bytes` is used for testing only, but it sounds like the preference is to remove the \"ephemeral\" aspect from the naming.\n\nIt sounds like the direction I should go instead, is\n\n1. Rename `EphemeralSecret` to `PrivateKey`\n2. Rename the module to `ecdh`\n3. Introduce a trait `Curve`, and an impl `P256`\n4. Make PublicKey and PrivateKey generic over `Curve`\n5. Move X25519 to share this API surface\n\nThat\u0027ll get this pretty close to the Go package\u0027s API surface",
      "parentUuid": "6118c924_19cad7d1",
      "range": {
        "startLine": 88,
        "startChar": 0,
        "endLine": 88,
        "endChar": 42
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "286fec75_8676f55c",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 104,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-06-06T16:31:50Z",
      "side": 1,
      "message": "nit: does this map to a bssl_sys const that can be used?",
      "range": {
        "startLine": 104,
        "startChar": 6,
        "endLine": 104,
        "endChar": 29
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dc85241_105b8f03",
        "filename": "rust/bssl-crypto/src/p256.rs",
        "patchSetId": 10
      },
      "lineNbr": 104,
      "author": {
        "id": 15426
      },
      "writtenOn": "2023-06-07T01:41:41Z",
      "side": 1,
      "message": "There is nothing `const` that I can find. The underlying representation seems to be BigNum and not fixed sized.",
      "parentUuid": "286fec75_8676f55c",
      "range": {
        "startLine": 104,
        "startChar": 6,
        "endLine": 104,
        "endChar": 29
      },
      "revId": "f4c523193fb8f563e90dac384279ab5c74384283",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}