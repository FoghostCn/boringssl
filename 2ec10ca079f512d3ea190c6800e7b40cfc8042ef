{
  "comments": [
    {
      "key": {
        "uuid": "4ab94557_aa8b94f1",
        "filename": "crypto/cipher_extra/tls_cbc.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 5005
      },
      "writtenOn": "2018-10-22T17:14:01Z",
      "side": 1,
      "message": "I think it\u0027s worth commenting the \"+ 1\" at the end is there because the nine bytes of hash termination (0x80 + 64-bit length) might not fit in the final hash block.",
      "revId": "2ec10ca079f512d3ea190c6800e7b40cfc8042ef",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39507e45_6d07411f",
        "filename": "crypto/cipher_extra/tls_cbc.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-10-23T18:31:59Z",
      "side": 1,
      "message": "It\u0027s 17 bytes for SHA-384, right? SHA-384 and SHA-512 use a 16-byte length rather than an 8-byte one.\n\nThough, in that case, why isn\u0027t it (255 + 1 + md_size + md_length_size + 1 + md_block_size - 1) / md_block_size?",
      "parentUuid": "4ab94557_aa8b94f1",
      "revId": "2ec10ca079f512d3ea190c6800e7b40cfc8042ef",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71415996_ac34c9cf",
        "filename": "crypto/cipher_extra/tls_cbc.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 9253
      },
      "writtenOn": "2018-10-23T19:04:36Z",
      "side": 1,
      "message": "That formula gives kVarianceBlocks \u003d 5 for SHA-256, and kVarianceBlocks \u003d 3 for SHA-384; thus, how this matches with the previous assignment (kVarianceBlocks \u003d 6)?",
      "parentUuid": "4ab94557_aa8b94f1",
      "revId": "2ec10ca079f512d3ea190c6800e7b40cfc8042ef",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07f39579_fccf8919",
        "filename": "crypto/cipher_extra/tls_cbc.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-10-23T19:28:33Z",
      "side": 1,
      "message": "I dunno, that was largely a question for Adam, since he\u0027s most familiar with this code. Perhaps the old value of 6 was a little loose?\n\n(Note that we no longer support the SHA-2 CBC ciphers at all. Folks using them should switch to AEADs.)",
      "parentUuid": "71415996_ac34c9cf",
      "revId": "2ec10ca079f512d3ea190c6800e7b40cfc8042ef",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ff5ad69_067317c2",
        "filename": "crypto/cipher_extra/tls_cbc.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 5070
      },
      "writtenOn": "2018-10-26T16:46:17Z",
      "side": 1,
      "message": "I think six comes about from the maximum MAC size (48 bytes) + the maximum padding (256 bytes), which is five (SHA-256) blocks. Then +1 because of the hash termination, which can cause a full extra block.\n\nI think one can tighten this up in a few ways:\n\nFirstly, a 48-byte MAC can\u0027t happen with a SHA-256 block size. Secondly, (as highlighted here), when the block size is larger fewer blocks can vary. Thirdly, +1 is conservative for the termination.\n\nSo let\u0027s write it as:\n\n(md_size + 255 + 1 + 1 + md_length_size + md_block_size - 1) / md_block_size",
      "parentUuid": "07f39579_fccf8919",
      "revId": "2ec10ca079f512d3ea190c6800e7b40cfc8042ef",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c06a9a0_32d07d2e",
        "filename": "crypto/cipher_extra/tls_cbc.c",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 5415
      },
      "writtenOn": "2018-10-26T18:11:21Z",
      "side": 1,
      "message": "This might help verify whatever formula we use.\nhttps://boringssl-review.googlesource.com/c/boringssl/+/32724",
      "parentUuid": "5ff5ad69_067317c2",
      "revId": "2ec10ca079f512d3ea190c6800e7b40cfc8042ef",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    }
  ]
}