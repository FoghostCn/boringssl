{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "28b1162f_a201df29",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-09T23:10:27Z",
      "side": 1,
      "message": "Siiiiigh. :-(",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adea6d54_5fe0fcdb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-11T19:27:55Z",
      "side": 1,
      "message": "I think you forgot to upload the new revision. :-)",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0af2a40_69e69d93",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-03-15T20:14:17Z",
      "side": 1,
      "message": "Oops!",
      "parentUuid": "adea6d54_5fe0fcdb",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e15c1e2_ad74f4c4",
        "filename": "crypto/fipsmodule/fips.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-09T23:10:27Z",
      "side": 1,
      "message": "Probably should suitably synchronized with the increment.",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f104fb6_b17a3e1c",
        "filename": "crypto/fipsmodule/fips.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-09T23:18:44Z",
      "side": 1,
      "message": "Actually... would a thread-local satisfy this? (The monitoring would need to sample from a thread that was doing work.)",
      "parentUuid": "2e15c1e2_ad74f4c4",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3847d828_fdf127b0",
        "filename": "crypto/fipsmodule/fips.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5070
      },
      "writtenOn": "2021-03-11T18:30:34Z",
      "side": 1,
      "message": "I\u0027m not sure whether thread-locality is viable. A high-level API might do work in a worker thread.\n\nAs for synchronisation, since the increment is atomic, isn\u0027t reading an atomic going to give the correct value as long as the test has provided a happens-before relationship? (E.g. by having the worker thread signal that it\u0027s done.)\n\n(If it\u0027s literally racing with updates then the exact value may be non-deterministic, but that\u0027s an issue with the test then, I think.)",
      "parentUuid": "7f104fb6_b17a3e1c",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd082980_5cc18753",
        "filename": "crypto/fipsmodule/fips.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-11T19:27:55Z",
      "side": 1,
      "message": "I guess it\u0027s a question of what are the expectations on the test. Globals over thread locals make sense if the test isn\u0027t responsible for whether the API uses a worker thread. Is it responsible for ensuring that, after the test-level synchronization, *no* background thread calls into BoringSSL at all?\n\nIf we say no, the test will flakily pass when it should have failed, so saying yes isn\u0027t wrong. But being sure about random background work also seems hard for sufficiently high-level APIs. I dunno, maybe it makes a TLS server, knows a TLS connection happened, but isn\u0027t confident the server\u0027s not doing other work elsewhere?\n\nData races are UB, so my inclination would be to synchronize it. If leave it unsynchronized, probably mention in the docs that the caller is responsible for this.\n\n(Anecdotally, I\u0027ve had to add locks in Chromium code to fix TSan flakes where test wants to read a variable written by a callback on a worker thread. I was reasonably sure, at the point of the read, it was impossible to concurrently write. My guess was TSan couldn\u0027t see happens-before relationships that cross process boundaries.)",
      "parentUuid": "3847d828_fdf127b0",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1857c629_960ebb43",
        "filename": "crypto/fipsmodule/fips.c",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-03-15T20:14:17Z",
      "side": 1,
      "message": "Ok, have switched to thread locals. Lets see if that works out well enough.",
      "parentUuid": "bd082980_5cc18753",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f75105a_a93956fe",
        "filename": "crypto/fipsmodule/fips.c",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-09T23:10:27Z",
      "side": 1,
      "message": "Can we disable these outside of FIPS mode? It\u0027s more ifdefs, but it\u0027s pointless thread contention and probably especially painful on configurations where we\u0027re not using C11 atomics.\n\n(Separately, I\u0027ve been thinking we should just turn C11 atomics on by now for non-Windows and use the Windows-specific APIs for Windows. Or maybe gate on __STDC_VERSION__ version and just assume the libc has caught up to the compiler.)",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f348fae3_64165e3c",
        "filename": "crypto/fipsmodule/fips.c",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5070
      },
      "writtenOn": "2021-03-11T18:30:34Z",
      "side": 1,
      "message": "Separate #define added.",
      "parentUuid": "2f75105a_a93956fe",
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1584d3aa_7cb18e05",
        "filename": "include/openssl/crypto.h",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-09T23:10:27Z",
      "side": 1,
      "message": "Spaces",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 1
      },
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b49df253_691ef733",
        "filename": "include/openssl/crypto.h",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 5070
      },
      "writtenOn": "2021-03-11T18:30:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1584d3aa_7cb18e05",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 82,
        "endChar": 1
      },
      "revId": "2b4ef74ff9fc764cd84dc8d375d8aeafa6d2b6d4",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}