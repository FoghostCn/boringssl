{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "422c9c92_c4244dd8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-10-19T16:28:37Z",
      "side": 1,
      "message": "Annoyingly, I do see one user of it in the public API. Honestly, if `X509_ALGOR` were opaque (and once we\u0027d decoupled this from `crypto/asn1/tasn_*.c`... been 80% of the way to that for a while now), I\u0027d probably replace the `ASN1_TYPE *` with an embedded one and a boolean. Or maybe we use whether the `ASN1_TYPE` has type -1 or something gross like that.\n\nBut that would require the struct be opaque, and we\u0027re not quite there yet. (Upstream didn\u0027t make it opaque, so some 3p packages still reach in.)\n\nReally I\u0027d like us to stop believing in malloc failures at this layer, but we haven\u0027t worked through that yet.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ddc571f7_8b5aca6d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 15776
      },
      "writtenOn": "2023-10-19T16:50:24Z",
      "side": 1,
      "message": "What is that one 3p user? I did not find any on codesearch or our ports. I did find lua-openssl exposing a binding, but they target a very outdated version of LibreSSL anyway.",
      "parentUuid": "422c9c92_c4244dd8",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d16a7b5_43357466",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-10-19T20:58:05Z",
      "side": 1,
      "message": "Yeah where are you seeing use of X509_algor_set_md? I only see it in the usual suspects of the \"bind all the OpenSSL things\" and copies of OpenSSL/boringssl poorly forked and lurking under rocks.",
      "parentUuid": "ddc571f7_8b5aca6d",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a055542e_472f85cf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-10-19T21:01:52Z",
      "side": 1,
      "message": "Oh, the use isn\u0027t 3p, it\u0027s just external to BoringSSL. It\u0027s in Android.\nhttps://cs.android.com/android/platform/superproject/+/main:system/security/keystore2/src/crypto/certificate_utils.cpp;drc\u003d0da31150597c7c741e50f7b93ed07a2c46de6980;l\u003d436\n\nThe thing 3p packages do is reach into `X509_ALGOR` instead of calling the accessors, because OpenSSL didn\u0027t make it opaque. I\u0027ve been sending folks patches to fix those (we might be able to make it opaque anyway?). Without making it opaque, we\u0027re a bit more limited in the tricks we can play.",
      "parentUuid": "3d16a7b5_43357466",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dbc7f25_7f02ad27",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 15776
      },
      "writtenOn": "2023-10-19T21:07:45Z",
      "side": 1,
      "message": "Oh, I see. Yes I saw the one you sent to curl the other day...\nI just sent such a patch to the good people at Ruby and ran into a const conundrum because they still have 1.0.2 in their CI...\n\nOh well, it\u0027s too late to figure a nice solution for this one out before tomorrow ðŸ˜Š\nhttps://github.com/ruby/openssl/pull/687",
      "parentUuid": "a055542e_472f85cf",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecd62bf8_12b68081",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-10-19T21:09:27Z",
      "side": 1,
      "message": "Ah nice! Yeah, I think I did Node and Curl. IIRC, someone\u0027s R OpenSSL bindings are another culprit?",
      "parentUuid": "9dbc7f25_7f02ad27",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaff1673_b9b5e5f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 15776
      },
      "writtenOn": "2023-10-19T22:05:03Z",
      "side": 1,
      "message": "Very possible. Two more obvious candidates: rust-openssl and pyca/cryptography, and both are winners.\n\nIn rust-openssl\u0027s [types.rs](https://github.com/sfackler/rust-openssl/blob/master/openssl-sys/src/handwritten/types.rs#L332) we probably want `#[cfg(any(ossl110,boringssl,libressl350))]`.\n\nThis is obviously pulled into newer pyca/cryptography, who have their own [x509.py](https://github.com/pyca/cryptography/blob/main/src/_cffi_src/openssl/x509.py#L27-L30) where `typedef ... X509_ALGOR` passes regress.\n\nI\u0027ll send a mail or PR to Alex after sleep.",
      "parentUuid": "ecd62bf8_12b68081",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94d301ee_4f57d7b8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 5180
      },
      "writtenOn": "2023-10-19T22:15:38Z",
      "side": 1,
      "message": "https://github.com/pyca/cryptography/pull/9738 :-)\n\nFor rust-openssl, that binding is never used on boringssl, but I\u0027d happilly merge a PR to make it opaque on libressl",
      "parentUuid": "aaff1673_b9b5e5f3",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa2c00ff_67e46e5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 15776
      },
      "writtenOn": "2023-10-19T05:20:21Z",
      "side": 1,
      "message": "As mentioned in the commit message, this leaves out the instance in |X509_ALGOR_set_md|. I can send a diff for that but I\u0027d like to know which way you want to go before making such a change.",
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5794d0a5_66b85889",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-10-19T16:28:37Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d78f597_94f236e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 15776
      },
      "writtenOn": "2023-10-19T16:50:24Z",
      "side": 1,
      "message": "Thanks for the review. Yes, it would have been nice if the opaquification had been a bit more thorough in this part of the tree...",
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64aedda6_04873626",
        "filename": "crypto/x509/rsa_pss.c",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-10-19T16:28:37Z",
      "side": 1,
      "message": "Fallible `set0` functions are the worst. :-( I gotta redo this stuff at some point.",
      "revId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "7936e60c3753cc0790997cba20209d3cb1a5ac42",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}