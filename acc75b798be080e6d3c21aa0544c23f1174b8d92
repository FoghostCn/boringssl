{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9ed89977_231cc8a7",
        "filename": "rust/bssl/Cargo.toml",
        "patchSetId": 32
      },
      "lineNbr": 1,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-03-09T21:07:23Z",
      "side": 1,
      "message": "Since we are at least for testing going to be smoking from the cargo pipe, let\u0027s set this up properly from the first place.  Set up cargo deny and to a cargo deny init in here and commit the deny.toml as well.. It will show you a few interesting things and help keep this clean. (we can adjust the deny.toml after you add it, just add the default and note the warnings. not sure about that libc crate.",
      "revId": "acc75b798be080e6d3c21aa0544c23f1174b8d92",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "47530adb_fc387ac6",
        "filename": "rust/bssl/Cargo.toml",
        "patchSetId": 32
      },
      "lineNbr": 1,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-03-09T21:31:05Z",
      "side": 1,
      "message": "Got it, updated and added the default deny.toml. For the libc crate that is already used by bssl-sys even before this CL, its also already imported to Chromium: https://source.chromium.org/chromium/chromium/src/+/main:third_party/rust/libc/v0_2/;l\u003d1 and has MIT/Apache License so I think it should be good",
      "parentUuid": "9ed89977_231cc8a7",
      "revId": "acc75b798be080e6d3c21aa0544c23f1174b8d92",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ea82b9f_43ac328f",
        "filename": "rust/bssl/Cargo.toml",
        "patchSetId": 32
      },
      "lineNbr": 14,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-03-09T20:44:00Z",
      "side": 1,
      "message": "What\u0027s the rationale behind bringing this in here? Since this is a bindgen library and boringssl is already running these tests, does it make any sense to run this again?   I\u0027m thinking here that the tests need to be that yes indeed, the same input to boringssl HMAC gives you same in rust, but for example, we do not *re-do* the wycheproof tests in boringssl when calling HMAC through a c++ wrapper to the C funcitons....",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 20
      },
      "revId": "acc75b798be080e6d3c21aa0544c23f1174b8d92",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dbf2445a_fea31652",
        "filename": "rust/bssl/Cargo.toml",
        "patchSetId": 32
      },
      "lineNbr": 14,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-03-09T20:51:06Z",
      "side": 1,
      "message": "That\u0027s a good point, I guess I agree that they are not needed, but it was just the easiest way to verify that the bindings were still working correctly, and that there weren\u0027t any issues with how the types and bytes were passed across the boundary. Given they are already implemented, is there any harm in leaving them? If not, what would be the best approach to testing, just a couple of main test cases and edge cases instead of the whole list of vectors?",
      "parentUuid": "1ea82b9f_43ac328f",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 20
      },
      "revId": "acc75b798be080e6d3c21aa0544c23f1174b8d92",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52a6cfce_6ece78dc",
        "filename": "rust/bssl/Cargo.toml",
        "patchSetId": 32
      },
      "lineNbr": 14,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-03-09T21:36:24Z",
      "side": 1,
      "message": "All this does is eventually make test runs more onerous.. I\u0027d skip the crate dependency and put a few edge cases in your own tests.",
      "parentUuid": "dbf2445a_fea31652",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 20
      },
      "revId": "acc75b798be080e6d3c21aa0544c23f1174b8d92",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77cce4cf_f17ff0ae",
        "filename": "rust/bssl/Cargo.toml",
        "patchSetId": 32
      },
      "lineNbr": 14,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-03-09T21:44:01Z",
      "side": 1,
      "message": "Okay removed, I think the existing test cases are already covered by the other existing tests as well",
      "parentUuid": "52a6cfce_6ece78dc",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 14,
        "endChar": 20
      },
      "revId": "acc75b798be080e6d3c21aa0544c23f1174b8d92",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f34b6ab6_a8a0fccf",
        "filename": "rust/bssl/README.md",
        "patchSetId": 32
      },
      "lineNbr": 13,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-03-09T20:49:47Z",
      "side": 1,
      "message": "bss-sys",
      "revId": "acc75b798be080e6d3c21aa0544c23f1174b8d92",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53e07874_f0182e63",
        "filename": "rust/bssl/README.md",
        "patchSetId": 32
      },
      "lineNbr": 13,
      "author": {
        "id": 15751
      },
      "writtenOn": "2023-03-09T21:40:00Z",
      "side": 1,
      "message": "I think bssl is right here. There are now 2 crates hosted here, `bssl` and `bssl-sys` and this is the README for the former",
      "parentUuid": "f34b6ab6_a8a0fccf",
      "revId": "acc75b798be080e6d3c21aa0544c23f1174b8d92",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}