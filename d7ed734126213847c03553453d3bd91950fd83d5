{
  "comments": [
    {
      "key": {
        "uuid": "17727a20_88d737cf",
        "filename": "ssl/s3_clnt.c",
        "patchSetId": 3
      },
      "lineNbr": 1145,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-05-19T01:31:51Z",
      "side": 1,
      "message": "(Nit: trailing space)",
      "revId": "d7ed734126213847c03553453d3bd91950fd83d5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17727a20_c8e12fb0",
        "filename": "ssl/s3_clnt.c",
        "patchSetId": 3
      },
      "lineNbr": 1639,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-05-19T01:31:51Z",
      "side": 1,
      "message": "I\u0027m not sure how well this works, but if you instead added a flag to SSL_ECDH_METHOD, you could probably fold the DHE and CECPQ1 special-cases together.",
      "revId": "d7ed734126213847c03553453d3bd91950fd83d5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7fc06c7_840a6610",
        "filename": "ssl/s3_clnt.c",
        "patchSetId": 3
      },
      "lineNbr": 1639,
      "author": {
        "id": 5645
      },
      "writtenOn": "2016-05-19T17:01:13Z",
      "side": 1,
      "message": "You know, it *almost* works to have the |offer|, |accept|, and |finish| methods take care of the length prefix.\n\nThe fly in the ointment is in s3_clnt.c: unfortunately, ssl3_get_server_hello has to read the server\u0027s offer without accepting it.  That\u0027s done later, in ssl3_send_client_key_exchange.\n\nAs far as adding a flag goes, it only helps in the cases where SSL_kDHE and SSL_kECDHE are handled by the same branch, which is only half the cases.\n\nThoughts?",
      "parentUuid": "17727a20_c8e12fb0",
      "revId": "d7ed734126213847c03553453d3bd91950fd83d5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "172c3a2d_35f2d0a9",
        "filename": "ssl/s3_clnt.c",
        "patchSetId": 3
      },
      "lineNbr": 1639,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-05-19T19:02:06Z",
      "side": 1,
      "message": "I was thinking that, where they\u0027re not handled by the same branch, you could do something like:\n\n  if (alg_k \u0026 (SSL_kECDHE|SSL_kDHE)) {\n    if (alg_k \u0026 SSL_kECDHE) {\n      // Parse ECDHE group.\n    } else {\n      // Parse DHE group.\n    }\n\n    // Common stuff.\n  }\n\nMaybe this isn\u0027t actually worth it. *shrug* Whatever you think is cleanest. Though extracting the curve_id or boolean from the SSL_ECDH_METHOD may still be worthwhile just do you don\u0027t need to go muck about with ssl-\u003esession-\u003ekey_exchange_info.\n\nMoving the CBS/CBB stuff into offer/accept/finish would also work... and it even translates to TLS 1.3 as-is. Except I\u0027m hoping to take it out of TLS 1.3 (will be sending them a PR in not too long) because it\u0027s a completely redundant length prefix.\n\n(TLS 1.3 replaces ServerKeyExchange with KeyShareEntry which s a type followed by a u16-prefixed opaque byte string. The outer one is always u16, but then they currently put the old u8- or u16- (for FFDHE) prefix inside the opaque string which is totally pointless. I want them to get rid of it.)",
      "parentUuid": "f7fc06c7_840a6610",
      "revId": "d7ed734126213847c03553453d3bd91950fd83d5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17727a20_e8deebe6",
        "filename": "ssl/ssl_ecdh.c",
        "patchSetId": 3
      },
      "lineNbr": 230,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-05-19T01:31:51Z",
      "side": 1,
      "message": "Is NEWHOPE_POLY intended to be a heap- or stack-allocated type? From the public API, it seems to be heap-allocated, but this is using it as if it were stack-allocated.",
      "revId": "d7ed734126213847c03553453d3bd91950fd83d5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7fc06c7_a470c295",
        "filename": "ssl/ssl_ecdh.c",
        "patchSetId": 3
      },
      "lineNbr": 230,
      "author": {
        "id": 5645
      },
      "writtenOn": "2016-05-19T17:01:13Z",
      "side": 1,
      "message": "When I added NEWHOPE_POLY_new it was only so that one could call NEWHOPE_keygen without having the definition of NEWHOPE_POLY available.  I didn\u0027t have a lot of intent about stack vs. heap allocation.\n\nIf it\u0027s important to be consistent about that, I can change to heap-allocate here, though that is yucky.\n\nMaybe it is cleaner to simply define NEWHOPE_POLY in a public header?",
      "parentUuid": "17727a20_e8deebe6",
      "revId": "d7ed734126213847c03553453d3bd91950fd83d5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "172c3a2d_15f55490",
        "filename": "ssl/ssl_ecdh.c",
        "patchSetId": 3
      },
      "lineNbr": 230,
      "author": {
        "id": 5415
      },
      "writtenOn": "2016-05-19T19:02:06Z",
      "side": 1,
      "message": "Yeah, maybe we should just define it in a public header. Being allowed to stack-allocate it (or embed it in a struct) if you\u0027re okay with something that large seems quite reasonable.\n\nStrictly speaking, we\u0027re okay using internal headers between libcrypto and libssl, but it doesn\u0027t seem necessary to break that boundary here.",
      "parentUuid": "f7fc06c7_a470c295",
      "revId": "d7ed734126213847c03553453d3bd91950fd83d5",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}