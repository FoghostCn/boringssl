{
  "comments": [
    {
      "key": {
        "uuid": "76c53378_f94557d7",
        "filename": "crypto/bytestring/cbb.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 5005
      },
      "writtenOn": "2014-08-11T19:06:33Z",
      "side": 1,
      "message": "I think out_data and out_len should only be allowed to be NULL if the CBB is fixed. Otherwise it\u0027s clearly a memory leak.",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d9576f_970f2e03",
        "filename": "crypto/bytestring/cbb.c",
        "patchSetId": 1
      },
      "lineNbr": 141,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-08-12T19:11:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76c53378_f94557d7",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76c53378_d9797348",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 5005
      },
      "writtenOn": "2014-08-11T19:06:33Z",
      "side": 1,
      "message": "This breaks a future TLS 2.0, right? (It might already be broken, but no point making it worse.)",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d9576f_d7ab7674",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-08-12T19:11:16Z",
      "side": 1,
      "message": "Done. (Yeah, I think OpenSSL currently doesn\u0027t accept such a thing. I couldn\u0027t find any useful text in the spec for whether major version bumps are supposed to be okay.)\n\nAdded tests for version tolerance.",
      "parentUuid": "76c53378_d9797348",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76c53378_99b09bcb",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 5005
      },
      "writtenOn": "2014-08-11T19:06:33Z",
      "side": 1,
      "message": "Doesn\u0027t the initial value of s-\u003eversion come into play? I.e. if I use an SSLv3 method, then I don\u0027t have to set SSL_OP_NO_TLSv1_2 but TLS 1.2 is still disabled.\n\nLater: I see that this was based on existing code. Hmm. I guess it\u0027s that this code is only run for SSLv23_method and that method implicitly enables all TLS versions?",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d9576f_ceb1a319",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-08-11T20:34:14Z",
      "side": 1,
      "message": "Yeah, if I\u0027m understanding this correctly, all the other methods are specific to a version and this method, while I suppose was originally responsible for dispatching between SSLv2 and SSLv3, also dispatches between SSLv3 through TLSv1.2. Note s3_srvr.c\u0027s line 936 and s3_clnt.c\u0027s 919. By the time we get to one of the normal methods, the version is already set.\n\nFor more fun, the newly-added DTLS 1.2 has a completely different mechanism with the special DTLS_ANY_VERSION version that does the version in the ClientHello/ServerHello state machine. I do wonder if it\u0027s worth rejiggering this at some point... maybe even instead of this CL which is already rewriting much of this file? We could replace those fatal checks with the actual version negotiation logic which is what the DTLS code is doing. Then SSLv23_client_method becomes the same as TLSv${HIGHEST}_client_method while SSLv23_server_method\u0027s only purpose in life is to sniff for V2ClientHello, rewrite it, and call it a day. And then no one has to sniff the version or do anything absurd like that. And we don\u0027t have this silliness with s23_clnt.c and s3_clnt.c duplicate ClientHello logic.\n\nThen again, the DTLS version is probably much less tested[*]. I don\u0027t know how it interacts with say, session resumption. I believe right now session resumption has to resume at the same version because SSL_set_session will call SSL_set_ssl_method. Probably also has ramifications for renego as changing version during a renego[**] would be rather bad manners...\n\nIt would also change the meaning of SSLv3_method through TLSv1_2_method which currently specify a specific version. Maybe make yet another one or something, I dunno, or still call it SSLv23_method but implement the check inline. It\u0027s sort of weird how those are redundant with SSL_OP_NO_*. Which are, in turn, weird for not specifying a contiguous range.\n\nAlso means that the record-layer implementation has to be okay with the version changing underneath it while the null cipher is set. It doesn\u0027t seem like it should be a problem, but, this new DTLS_ANY_VERSION thing aside, I don\u0027t believe this is something that can happen in OpenSSL today.\n\n[*] Actually, I\u0027m pretty sure DTLS 1.2 doesn\u0027t work in BoringSSL right now. Some version checks that should be converted to SSL_IS_DTLS. Eh, we\u0027ll see what happens when I finally get those tests finished.\n\n[**] Speaking of DTLS and renego, I doubt WebRTC cares about it. Maybe worth forcing that off so we never have to support it.",
      "parentUuid": "76c53378_99b09bcb",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d9576f_ce92c3d8",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-08-12T02:01:33Z",
      "side": 1,
      "message": "\u003e Then again, the DTLS version is probably much less tested[*]. I don\u0027t know how it interacts with say, session resumption [...] renego [...]\n\nActually, looking at it, that looks reasonably sane. After the version is determined, s-\u003eversion is no longer DTLS_ANY_VERSION, so renego should be fine. And session resumption goes through get_ssl_method, so it hits the version-specific methods. It does more strongly require that all the methods be compatible than the SSLv23 sniff-based mechanism, but that seems a pretty sound assumption. If anything, I think it\u0027d be nice to try to merge all these version-specific methods and, for SSL_set_session, have it set s-\u003eversion rather than the method altogether.\n\nThoughts? I guess most of this CL would actually still be applicable in the other version because the sniff is still necessary for V2ClientHello. It\u0027d just lose the version negotiation bits. I can push through with this CL or experiment with the even more aggressive one.",
      "parentUuid": "16d9576f_ceb1a319",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76c53378_b9c47f21",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 336,
      "author": {
        "id": 5005
      },
      "writtenOn": "2014-08-11T19:06:33Z",
      "side": 1,
      "message": "Ditto about breaking TLS 2.0.",
      "range": {
        "startLine": 336,
        "startChar": 12,
        "endLine": 336,
        "endChar": 30
      },
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d9576f_17d9fe2c",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 336,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-08-12T19:11:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76c53378_b9c47f21",
      "range": {
        "startLine": 336,
        "startChar": 12,
        "endLine": 336,
        "endChar": 30
      },
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6e5ebf4_8a101327",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 364,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-08-08T20:00:41Z",
      "side": 1,
      "message": "This line is different from the original and is the broken invariant. If I\u0027m understanding s3_pkt.c correctly, we want buf + offset \u003d\u003d packet + packet_length. This resets to a state where we\u0027ve read ahead 11 extra bytes and the current packet is empty.",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76c53378_99fe5b44",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 364,
      "author": {
        "id": 5005
      },
      "writtenOn": "2014-08-11T19:06:33Z",
      "side": 1,
      "message": "Of course, there\u0027s no comment in the old code about this, but this seems right.",
      "parentUuid": "b6e5ebf4_8a101327",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76c53378_59dc43f6",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 369,
      "author": {
        "id": 5005
      },
      "writtenOn": "2014-08-11T19:06:33Z",
      "side": 1,
      "message": "Check these first? (And CONNECT)",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d9576f_77d2820f",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 369,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-08-12T19:11:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76c53378_59dc43f6",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76c53378_19eb6b81",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 407,
      "author": {
        "id": 5005
      },
      "writtenOn": "2014-08-11T19:06:33Z",
      "side": 1,
      "message": "Comment here about the state of things, i.e. that we have read 11 bytes.",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d9576f_57cf8661",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 407,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-08-12T19:11:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76c53378_19eb6b81",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76c53378_b9123fee",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 459,
      "author": {
        "id": 5005
      },
      "writtenOn": "2014-08-11T19:06:33Z",
      "side": 1,
      "message": "It seems that this would fit on a single line.",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16d9576f_37dcfa1c",
        "filename": "ssl/s23_srvr.c",
        "patchSetId": 1
      },
      "lineNbr": 459,
      "author": {
        "id": 5075
      },
      "writtenOn": "2014-08-12T19:11:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76c53378_b9123fee",
      "revId": "0fc39144bbbbb3c9210b43ff21a573d1fca839b6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    }
  ]
}