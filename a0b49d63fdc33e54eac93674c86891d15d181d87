{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8071edb4_cf4d505c",
        "filename": "crypto/fipsmodule/modes/asm/ghashv8-armx.pl",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 5525
      },
      "writtenOn": "2020-10-20T02:34:11Z",
      "side": 1,
      "message": "It seems to me like it would make more sense to ensure that `AARCH64_VALID_CALL_TARGET` and friends are defined to be no-ops on 32-bit targets, and then avoid guarding all these blocks with `if ($flavour \u003d~ /64/);`",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 35
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44e0230e_18990b44",
        "filename": "crypto/fipsmodule/modes/asm/ghashv8-armx.pl",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 10416
      },
      "writtenOn": "2020-10-20T08:51:35Z",
      "side": 1,
      "message": "I didn\u0027t want to alter generated code other than Armv8.",
      "parentUuid": "8071edb4_cf4d505c",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 35
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee054841_41a6ffec",
        "filename": "crypto/fipsmodule/modes/asm/ghashv8-armx.pl",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 5525
      },
      "writtenOn": "2020-10-20T17:15:29Z",
      "side": 1,
      "message": "\u003e I didn\u0027t want to alter generated code other than Armv8.\n\nUnderstandable. It isn\u0027t a huge deal either way.\n\nI think that if we had:\n```\n#if !defined(AARCH64_VALID_CALL_TARGET)\n#define AARCH64_VALID_CALL_TARGET\n#endif\n```\nand the like in the arm_arch.h file, then it would work just fine, and wouldn\u0027t change any non-ARMv8 code gen, while making things easier to read.\n\nLike I said, not a huge deal either way.",
      "parentUuid": "44e0230e_18990b44",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 35
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5dd25d01_e0ccf4fe",
        "filename": "crypto/fipsmodule/modes/asm/ghashv8-armx.pl",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 5415
      },
      "writtenOn": "2020-10-20T17:26:50Z",
      "side": 1,
      "message": "I don\u0027t feel super strongly about this either way. I think we only have two \"armx\" files that try to abstract AArch32 and AArch64. (I\u0027m kind of impressed/scared that they manage it. There are a lot of differences.) I think they mostly do it ad-hoc rather than relying on support in arm-xlate.pl and arm_arch.h. But I guess it would be less code.\n\nAnother option could be to put the empty #define in the two armx files, which I guess would be somewhere in between. Or we could put it in arm_arch.h with a comment as Brian suggests. Or we could stick with what this CL does. *shrug*",
      "parentUuid": "ee054841_41a6ffec",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 35
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a515fa00_cc4d372f",
        "filename": "crypto/fipsmodule/modes/asm/ghashv8-armx.pl",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 10416
      },
      "writtenOn": "2020-10-21T06:59:19Z",
      "side": 1,
      "message": "AARCH64_VALID_CALL_TARGET and friends are always defined, even if they are defined to \u003cempty\u003e because the generated code snippets have these inserted unconditionally by the perl scripts for Armv8. I thought it would look odd to have AARCH64_* in files targeting 32-bit.\n\nI believe the current state is such that simply removing the flavour guards would result in the behaviour described by Brian Smith.\n\nWould removal of the flavour guards be acceptable then?",
      "parentUuid": "5dd25d01_e0ccf4fe",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 35
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "51e97cbf_26755da0",
        "filename": "crypto/fipsmodule/modes/asm/ghashv8-armx.pl",
        "patchSetId": 5
      },
      "lineNbr": 90,
      "author": {
        "id": 5525
      },
      "writtenOn": "2020-10-21T20:41:33Z",
      "side": 1,
      "message": "Yes, I think it would be better to remove the flavour guards. The reason is DRY: There\u0027s no need to repeat the guard logic over and over when it is inherent in the definitions of the macros.\n\nI don\u0027t think there will be any confusion of whether/how they\u0027d affect the 32-bit versions since they\u0027re named \"AARCH64_*\"",
      "parentUuid": "a515fa00_cc4d372f",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 35
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d486291a_210ff7a2",
        "filename": "include/openssl/arm_arch.h",
        "patchSetId": 5
      },
      "lineNbr": 129,
      "author": {
        "id": 5525
      },
      "writtenOn": "2020-10-20T02:45:13Z",
      "side": 1,
      "message": "My setup is a bit different than what\u0027s normal for BoringSSL, but for me this triggers `-Wundef` when `__ARM_FEATURE_BTI_DEFAULT` isn\u0027t defined, which seems to be the case often.",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 129,
        "endChar": 36
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6c0e4c3_6424358a",
        "filename": "include/openssl/arm_arch.h",
        "patchSetId": 5
      },
      "lineNbr": 129,
      "author": {
        "id": 10416
      },
      "writtenOn": "2020-10-20T08:51:35Z",
      "side": 1,
      "message": "Hi Brian,\n\nSorry for the inconvenience.\nI had the impression that -Wall and friends enabled this check too.\nTrying to fix it in https://boringssl-review.googlesource.com/c/boringssl/+/43524",
      "parentUuid": "d486291a_210ff7a2",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 129,
        "endChar": 36
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef2ed948_1b4d787f",
        "filename": "include/openssl/arm_arch.h",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 5525
      },
      "writtenOn": "2020-10-20T02:45:13Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 137,
        "endChar": 64
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5489d29b_ac0bf6cb",
        "filename": "include/openssl/arm_arch.h",
        "patchSetId": 5
      },
      "lineNbr": 137,
      "author": {
        "id": 10416
      },
      "writtenOn": "2020-10-20T08:51:35Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "ef2ed948_1b4d787f",
      "range": {
        "startLine": 137,
        "startChar": 0,
        "endLine": 137,
        "endChar": 64
      },
      "revId": "a0b49d63fdc33e54eac93674c86891d15d181d87",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}