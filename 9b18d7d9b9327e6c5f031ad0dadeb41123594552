{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1fdead7e_74a41fc4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7650
      },
      "writtenOn": "2020-12-21T22:27:13Z",
      "side": 1,
      "message": "Hi, is there any interest in this one?",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91d718c0_b681c8db",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-02-02T23:24:20Z",
      "side": 1,
      "message": "Beep boop",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32127d29_ca040955",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2021-02-09T22:51:47Z",
      "side": 1,
      "message": "David got some internal organisation stuff sorted out recently so this is now clearly for him ðŸ˜Š",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d1726191_0dd219f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "Got partway through this. Flushing comments now, but I\u0027ll pick this back up tomorrow.",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e2d54b5_8b749482",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-03T21:47:20Z",
      "side": 1,
      "message": "Thank you David, I was on vacation and then swamped with a backlog at work. Will address your comments soon.",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34775d61_167dc507",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "Mostly for my own curiosity: I gather tbl is more efficient than ushr + sli, and the others use shifts because they don\u0027t preserve byte boundaries? Or is to to avoid having to renumber registers?\n\nEdit: Ah yeah I see in x3 and x5, renumbering would be extra annoying.",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44dd0f88_f2acc4eb",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "Mind bringing over the comments from the x86_64 version of this?",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40ef1c6c_d6bc528f",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-25T12:35:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "44dd0f88_f2acc4eb",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c082fc62_56c95ce0",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "For aarch64, we care about our asm being compatible with XOM in some configurations. That means this would need to go in .section .rodata and the ADRs would need an ADRP/pg_hi21/lo12 thing.\n\nhttps://boringssl-review.googlesource.com/c/boringssl/+/35284 is an example.\n\n(I\u0027ve filed https://crbug.com/boringssl/396 to make sure we have test coverage for this. I\u0027m not sure if we\u0027d have noticed...)",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9bbd2e1_a3187b15",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 310,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-25T12:35:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c082fc62_56c95ce0",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6faf4e3_9ec01700",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "Just plain sub here? Doesn\u0027t look like you use the flag, since the branch is handled by cbz above.",
      "range": {
        "startLine": 335,
        "startChar": 4,
        "endLine": 335,
        "endChar": 8
      },
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88af3dbe_ee30105a",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 335,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-25T12:35:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b6faf4e3_9ec01700",
      "range": {
        "startLine": 335,
        "startChar": 4,
        "endLine": 335,
        "endChar": 8
      },
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cc7bed6_d96cd2d3",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 342,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "Huh. I\u0027m kind of amazed that\u0027s the best way to load a variable number of bytes into registers...",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9f28de6_a1bee3dc",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 349,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "I guess this works, but any reason not to just do usual BL / LR thing? The other functions have .cfi_* annotations, but I think this code won\u0027t work with them.\n\nI also assume the branch predictor will get confused if RET isn\u0027t paired with BL. Alternatively, I suppose you could use a non-RET B, but BL with LR seems clearer and probably something the CPU is better at dealing with.",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e51ee2c_aacb9c8b",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 349,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-25T12:35:56Z",
      "side": 1,
      "message": "I completely agree that BL/LR is so much better, the reason I\u0027m avoiding it is that I don\u0027t understand the ARMv8 calling conventions well enough to generate the required .cfi_* annotations, and it looks like it also requires storing the stack pointer.\n\nI don\u0027t think branch predictors should have any troubles here TBH.",
      "parentUuid": "a9f28de6_a1bee3dc",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86a6cdc1_b54da519",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 362,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "Looking at other files, they tend to fold these to together into\n\n  stp d8, d9, [sp, #-64]!",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1dc9f05_1734a248",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 362,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-25T12:35:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "86a6cdc1_b54da519",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d954b6ef_84a3e74d",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 374,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "I\u0027m a little surprised these assemble on Windows ARM, but clang assembler seems to tolerate them so... okay! I wonder if it crashes on them or ignores it.\n\n(We don\u0027t actually have CFI annotations or tests for any of our other files, but CFI for aarch64 sounds reasonable. I should get the tester to work...)\n\nWe also lack CI for Windows/ARM, so I\u0027ve filed https://crbug.com/boringssl/397 to finish that up.",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0c5b36d_31795ce1",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 385,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-13T04:10:01Z",
      "side": 1,
      "message": "This is not a request to change anything for this CL (we\u0027d need to rework the x86_64 and non-asm paths too), just wanted to know your thoughts. I\u0027ve been wondering whether our extra_in goofiness is the best way to do this.\n\nOne idea I had was maybe something like this:\n\n  // Computes (R, S) along with however many blocks of (in, len) fit in the\n  // same batch. Returns the number of bytes consumed.\n  //\n  // Alternative: init also consumes all its input and jumps in the middle of\n  // update. Reason to consider this design is, if we have any hope of using\n  // formal verification tools on our asm, I expect they\u0027ll be opinionated\n  // about control flow and get offended by cross-function jumps.\n  size_t chacha20_poly1305_init(ctx, key, out, in, len, ad, ad_len);\n\n  // Consumes all of (in, len). May assume that only a multiple of 64\n  // bytes have been consumed so far.\n  void chacha20_poly1305_update(ctx, key, out, in, len);\n\n  // Incorporates the length block and writes out the tag. (Should we pass\n  // in ad_len and total_len, just to save asm from the bother of computing\n  // it?)\n  void chacha20_poly1305_finish(ctx, out);\n\nSince in/extra_in may not split at a block boundary, it\u0027s C\u0027s responsibility to buffer up a block at the boundary. Something like:\n\n  size_t todo \u003d len;\n  if (extra_in_len !\u003d 0) {\n     todo \u003d len \u0026 -64;\n  }\n  todo \u003d chacha20_poly1305_init(\u0026ctx, key, out, in, todo, ad, ad_len);\n  in +\u003d todo;\n  out +\u003d todo;\n  len -\u003d todo;\n  \n  todo \u003d len;\n  if (extra_in_len !\u003d 0) {\n    todo \u003d len - (len % 320);\n  }\n  todo \u003d chacha20_poly1305_update(\u0026ctx, key, out, in, todo);\n  in +\u003d todo;\n  out +\u003d todo;\n  len -\u003d todo;\n  \n  if (len !\u003d 0) {\n    char buf[320];\n    memcpy(buf, in, len);\n    todo \u003d min(sizeof(buf) - len, extra_in_len);\n    memcpy(buf + len, extra_in, todo);\n    chacha20_poly1305_update(\u0026ctx, key, buf, buf, len + todo);\n    memcpy(out, buf, len);\n    memcpy(out_tag, buf + len, todo);\n    extra_in +\u003d todo;\n    out_tag +\u003d todo;\n    extra_in_len -\u003d todo;\n  }\n  \n  if (extra_in_len !\u003d 0) {\n    chacha20_poly1305_update(\u0026ctx, out_tag, extra_in, extra_in_len);\n    out_tag +\u003d extra_in_len;\n  }\n\n  chacha20_poly1305_finish(\u0026ctx, out_tag);\n\nOr maybe there\u0027s a better strategy? I figure it saves asm from dealing with block misalignment in poly1305, and might be more efficient us recomputing the block outside. On the other hand, it does add some buffering and transits across the C ABI more. (Might also give room for an IOV-like API later?) And I\u0027m generally a fan of shifting complexity to C if it doesn\u0027t cost us much.\n\nWhat do you think?",
      "range": {
        "startLine": 385,
        "startChar": 69,
        "endLine": 385,
        "endChar": 81
      },
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ee7f3681_ab566b47",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 385,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-13T04:20:28Z",
      "side": 1,
      "message": "\u003e Alternative: init also consumes all its input and jumps in the middle of\n\u003e update. Reason to consider this design is, if we have any hope of using\n\u003e formal verification tools on our asm, I expect they\u0027ll be opinionated\n\u003e about control flow and get offended by cross-function jumps.\n\nOh, I guess the return value idea still doesn\u0027t save us from wanting to share code between init/update because of short inputs. Plus the jump can always be modeled as a tail call if we have a fussy verification tool. So, yeah, probably better to just have init consume all its input?\n\n(I don\u0027t actually have a path towards getting a verification story, so no need to put much thought towards those constraints right now. There\u0027s one candidate I\u0027m idly trying to sniffing at, but it\u0027s unlikely I\u0027ll get anything. These sorts of tools tend not to be usable.)",
      "parentUuid": "e0c5b36d_31795ce1",
      "range": {
        "startLine": 385,
        "startChar": 69,
        "endLine": 385,
        "endChar": 81
      },
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6796aa2_77bee241",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 395,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "Nit: it\u0027s a little unclear from this comment that it\u0027s the 5th block (which also comes first in counter order) that encrypts R and S and while [A-D][0-3] encrypt plaintext. Maybe:\n\nInitially we prepare 5 ChaCha20 blocks. Four to encrypt up to 4 blocks (256 bytes) of plaintext, and one for the Poly1305 R and S keys. The first four blocks (A0-A3..D0-D3) are computed vertically, the fifth block (A4-D4) horizontally.",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34b4add3_823d8223",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 395,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-25T12:35:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a6796aa2_77bee241",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "80f1d88d_baf02b5f",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-11T23:07:46Z",
      "side": 1,
      "message": "(Note to self: continue from here tomorrow.)",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "676d78e0_88f5856e",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 532,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-13T04:10:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "80f1d88d_baf02b5f",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1234421_f7d88fde",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 556,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-13T04:10:01Z",
      "side": 1,
      "message": "Hehe. This is mildly goofy, but I don\u0027t see a smaller alternative without transiting through GPRs, which I assume would be slower.",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "750f7917_078764d1",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 699,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-13T04:10:01Z",
      "side": 1,
      "message": "Minor nitpick: it\u0027s possible that only A0-A3 hold 256 bytes, but that\u0027s fine because inl will be in [0, 320) in that case.",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "898fe45f_6ca6bbe7",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 699,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-25T12:35:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "750f7917_078764d1",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea3b247d_b40464b2",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 723,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-13T04:10:01Z",
      "side": 1,
      "message": "iteration",
      "range": {
        "startLine": 723,
        "startChar": 53,
        "endLine": 723,
        "endChar": 63
      },
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4f236b3_cb6b992d",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 723,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-25T12:35:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ea3b247d_b40464b2",
      "range": {
        "startLine": 723,
        "startChar": 53,
        "endLine": 723,
        "endChar": 63
      },
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f72ef1d_367aecff",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-13T04:10:01Z",
      "side": 1,
      "message": "iteration",
      "range": {
        "startLine": 763,
        "startChar": 53,
        "endLine": 763,
        "endChar": 63
      },
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a904215a_d673f49e",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 763,
      "author": {
        "id": 7650
      },
      "writtenOn": "2021-03-25T12:35:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4f72ef1d_367aecff",
      "range": {
        "startLine": 763,
        "startChar": 53,
        "endLine": 763,
        "endChar": 63
      },
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc5f41cb_e4f5b855",
        "filename": "crypto/cipher_extra/asm/chacha20_poly1305_armv8.pl",
        "patchSetId": 2
      },
      "lineNbr": 770,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-02-13T04:10:01Z",
      "side": 1,
      "message": "Note to self: continue from here next time.",
      "revId": "9b18d7d9b9327e6c5f031ad0dadeb41123594552",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}