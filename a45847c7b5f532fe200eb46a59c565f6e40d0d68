{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2167f149_072a8758",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-04-05T13:52:44Z",
      "side": 1,
      "message": "Are you confident that all current users of BoringSSL in the Zephyr context will have this define already set? (I.e. if any users are only setting the existing define then this change would break them.)",
      "revId": "a45847c7b5f532fe200eb46a59c565f6e40d0d68",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4bf572c_44da1c16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 16191
      },
      "writtenOn": "2024-04-05T14:00:37Z",
      "side": 1,
      "message": "\u003e Are you confident that all current users of BoringSSL in the Zephyr context will have this define already set?\n\nYes. [Release notes](https://docs.zephyrproject.org/latest/releases/release-notes-3.2.html) mentions that build system always defines it.\n```\ninclude/zephyr/zephyr.h no longer defines __ZEPHYR__. This definition can be used\nby third-party code to compile code conditional to Zephyr. The definition is\nalready injected by the Zephyr build system. Therefore, any third-party code\nintegrated using the Zephyr build system will require no changes. External build\nsystems will need to inject the definition by themselves, if they did not already.\n```",
      "parentUuid": "2167f149_072a8758",
      "revId": "a45847c7b5f532fe200eb46a59c565f6e40d0d68",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f71203f6_31652b02",
        "filename": "include/openssl/target.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-06T02:09:36Z",
      "side": 1,
      "message": "IIRC, this was because your build would define `CROS_ZEPHYR` when actually building for Linux, in some sort of not-actually-Zephyr-but-built-like-Zephyr testing mode.\n\nSince `__ZEPHYR__` comes from Zephyr itself, does that still apply, or is this no longer needed?",
      "range": {
        "startLine": 98,
        "startChar": 34,
        "endLine": 98,
        "endChar": 44
      },
      "revId": "a45847c7b5f532fe200eb46a59c565f6e40d0d68",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e201e6e_e2d5fce6",
        "filename": "include/openssl/target.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 16191
      },
      "writtenOn": "2024-04-08T08:37:44Z",
      "side": 1,
      "message": "Good point. It\u0027s no longer needed.",
      "parentUuid": "f71203f6_31652b02",
      "range": {
        "startLine": 98,
        "startChar": 34,
        "endLine": 98,
        "endChar": 44
      },
      "revId": "a45847c7b5f532fe200eb46a59c565f6e40d0d68",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9535dcfb_00d77eb7",
        "filename": "include/openssl/target.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-09T20:56:14Z",
      "side": 1,
      "message": "Of note this will mean that if you have __linux__ defined, and you also have ZEPHYR defined, prior to this change you would obtain entropy using the urandom, and related linux style system calls. you\u0027ll now use getentropy() (which as I recall I think you have,but please make sure.)\n\nAlso (and this may matter for you) Can you tell me if it is possible for ZEPHYR to do any sort of address space duplication, like clone() or fork(). \n\nIf you are positive it can never do that, we should probably indicate that with boringssl as it will prevent it from drawing entropy all the time to avoid duplicate entropy being used in a forked process.   Alternatively if you *do* fork but you have a working pthread_atfork() implementation, we can do fork detection using pthread_atfork().",
      "parentUuid": "3e201e6e_e2d5fce6",
      "range": {
        "startLine": 98,
        "startChar": 34,
        "endLine": 98,
        "endChar": 44
      },
      "revId": "a45847c7b5f532fe200eb46a59c565f6e40d0d68",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b2030bd_80efa940",
        "filename": "include/openssl/target.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 16191
      },
      "writtenOn": "2024-04-10T09:19:03Z",
      "side": 1,
      "message": "\u003e this will mean that if you have linux defined, and you also have ZEPHYR defined, prior to this change you would obtain entropy using the urandom, and related linux style system calls.\n\nI never used `/dev/urandom`, because it doesn\u0027t exist on Zephyr. Previously `!defined(CROS_ZEPHYR)` define was used, to prevent from defining `OPENSSL_LINUX`, but now we don\u0027t need it, because `__linux__` is not defined.\n\nTo be honest, I\u0027m not sure if this was ever needed, because on Zephyr we build BoringSSL as a part of Zephyr firmware, by Zephyr build system, because I\u0027ve integrated BoringSSL CMakeLists to Zephyr. And I think `__linux__` was never defined (on Zephyr).\n\nOn CrOS EC things are different, BoringSSL build is triggered by EC Makefile, but it\u0027s built outside of that build system, so it\u0027s possible that `__linux__` was defined.\n\n\u003e you\u0027ll now use getentropy() (which as I recall I think you have,but please make sure.)\n\nYes, we provide `getentropy()`.\n\n\u003e Can you tell me if it is possible for ZEPHYR to do any sort of address space duplication, like clone() or fork().\n\nNo. It\u0027s RTOS for embedded systems -\u003e no `fork()` and no `clone()`.\n\n\u003e we should probably indicate that with boringssl as it will prevent it from drawing entropy all the time\n\nSounds like good improvement. How can I do that?",
      "parentUuid": "9535dcfb_00d77eb7",
      "range": {
        "startLine": 98,
        "startChar": 34,
        "endLine": 98,
        "endChar": 44
      },
      "revId": "a45847c7b5f532fe200eb46a59c565f6e40d0d68",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4c085fe_dc94755c",
        "filename": "include/openssl/target.h",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-10T16:06:51Z",
      "side": 1,
      "message": "\u003e Sounds like good improvement. How can I do that?\n\nAdd something to crypto/fipsmodule/rand/fork_detect.h. (Same CL or separate CL, whichever.)",
      "parentUuid": "1b2030bd_80efa940",
      "range": {
        "startLine": 98,
        "startChar": 34,
        "endLine": 98,
        "endChar": 44
      },
      "revId": "a45847c7b5f532fe200eb46a59c565f6e40d0d68",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}