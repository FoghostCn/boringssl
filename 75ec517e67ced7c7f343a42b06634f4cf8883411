{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fea57b55_3f4c989b",
        "filename": ".gitignore",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 3514953
      },
      "writtenOn": "2024-08-02T18:28:23Z",
      "side": 1,
      "message": "this file is autogenerated by Bazel since I\u0027m using Bazel 7.2.1 locally and Bazel ueses bzlmod by default after 6.3",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 15,
        "endChar": 18
      },
      "revId": "75ec517e67ced7c7f343a42b06634f4cf8883411",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "95f54ddb_a70a6239",
        "filename": "rust/WORKSPACE",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-02T18:31:30Z",
      "side": 1,
      "message": "Forgive me because I know nothing of Bazel. (David, who is more familiar, will be back next week.) But we have people building the C parts of BoringSSL with Bazel and all we have in that WORKSPACE file is `workspace(name \u003d \"boringssl\")`.\n\nThis file is specifying specific versions of the Rust toolchain, and that\u0027s a) not something that we\u0027re expected to have to keep up to date, and thus will rot and b) not something that a leaf-dependency would normally specify. Surely the top-level project would define things like this?",
      "revId": "75ec517e67ced7c7f343a42b06634f4cf8883411",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39afbe59_1da4f1e8",
        "filename": "rust/WORKSPACE",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 3514953
      },
      "writtenOn": "2024-08-06T17:31:12Z",
      "side": 1,
      "message": "It seems like the external repositories (@googletest, @rules_cc) you need are pulled in from the MODULE.bazel file. That\u0027s why the workspace files are empty. I can pull in rust_rules and zlib through the top level MODULE.bazel file, but we still need to use the workspace files for the remaining configuration (rust_register_toolchains etc)\n\nI could add instructions in the readme to have the user setup the rust toolchain (and keep up to date) instead to be able to use the crate (with Bazel)?",
      "parentUuid": "95f54ddb_a70a6239",
      "revId": "75ec517e67ced7c7f343a42b06634f4cf8883411",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9a3a256_7187b6f5",
        "filename": "rust/WORKSPACE",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 3514953
      },
      "writtenOn": "2024-08-07T18:35:04Z",
      "side": 1,
      "message": "I updated the readme with instructions for setting up the rust toolchain needed to generate the bindgen bindings. \n\nIt does make more sense for the top-level project to setup the rust toolchain as they likely will already have one setup and the additional configuration will come from setting up bindgen. \n\nBuilding llvm and bindgen takes a couple of minutes on the first build, we have a patch in Oak right now where we use a pre-generated bindgen file. \n\nAny thoughts on setting up the Bazel BUILD this way? It would require the Boringssl team to keep the bindgen file up to date as bssl-crypto is updated.",
      "parentUuid": "39afbe59_1da4f1e8",
      "revId": "75ec517e67ced7c7f343a42b06634f4cf8883411",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "913f1544_ade0be99",
        "filename": "rust/WORKSPACE",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 3514953
      },
      "writtenOn": "2024-08-07T19:19:59Z",
      "side": 1,
      "message": "http://shortn/_FzLOwocGU9 - patch in Oak",
      "parentUuid": "f9a3a256_7187b6f5",
      "revId": "75ec517e67ced7c7f343a42b06634f4cf8883411",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fb4d78e_475cc052",
        "filename": "rust/bssl-sys/BUILD.bazel",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-02T18:31:30Z",
      "side": 1,
      "message": "nit: trailing whitespace.",
      "revId": "75ec517e67ced7c7f343a42b06634f4cf8883411",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f57567d_f6747e4d",
        "filename": "rust/bssl-sys/BUILD.bazel",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 3514953
      },
      "writtenOn": "2024-08-06T17:31:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1fb4d78e_475cc052",
      "revId": "75ec517e67ced7c7f343a42b06634f4cf8883411",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21739438_c7774120",
        "filename": "rust/bssl-sys/CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 5005
      },
      "writtenOn": "2024-08-02T18:31:30Z",
      "side": 1,
      "message": "nit: trailing whitespace.",
      "revId": "75ec517e67ced7c7f343a42b06634f4cf8883411",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1077a66_2142a3a6",
        "filename": "rust/bssl-sys/CMakeLists.txt",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 3514953
      },
      "writtenOn": "2024-08-06T17:31:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21739438_c7774120",
      "revId": "75ec517e67ced7c7f343a42b06634f4cf8883411",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}