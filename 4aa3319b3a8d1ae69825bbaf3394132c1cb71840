{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1320484c_bd4a6d5e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 15571
      },
      "writtenOn": "2023-01-10T17:46:06Z",
      "side": 1,
      "message": "Adam: Thanks for adopting those changes! Should we push those changes upstream?",
      "revId": "4aa3319b3a8d1ae69825bbaf3394132c1cb71840",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a25fb92f_5b17a63f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 15571
      },
      "writtenOn": "2023-01-11T10:29:10Z",
      "side": 1,
      "message": "For future reference, if we ever need to push this upstream and people ask us about performance:\n\n* cl/489413618 has some benchmark number from this simple encryption benchmarker:\nhttp://cs/file:openssl_benchmark.cc. It shows that we save one instruction and very marginally improve performance.\n* llvm-mca shows a nice uOps reduction. movq seems to be much better than pushq. \n  - https://paste.googleplex.com/4959844292362240?raw old prelude/postlude requires 27 uOps.\n  - https://paste.googleplex.com/5260631891509248?raw new prelude/postlude requires\n15 uOps.",
      "revId": "4aa3319b3a8d1ae69825bbaf3394132c1cb71840",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f3dec29_23ef2a9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-19T00:22:57Z",
      "side": 1,
      "message": "Okay! Here\u0027s a reworked version that correctly unwinds on Windows. I made it a separate CL because otherwise Gerrit will be very unhappy about the approvals required. :-)\nhttps://boringssl-review.googlesource.com/c/boringssl/+/56128",
      "revId": "4aa3319b3a8d1ae69825bbaf3394132c1cb71840",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07fe9f54_2737415a",
        "filename": "crypto/fipsmodule/modes/asm/aesni-gcm-x86_64.pl",
        "patchSetId": 3
      },
      "lineNbr": 444,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-18T01:41:05Z",
      "side": 1,
      "message": "Oh, this relies on a red zone, which is not true on Windows, so that\u0027s another blocker here. :-)\n\n(I\u0027ll upload a new version of this CL with the prolog fixed.)",
      "revId": "4aa3319b3a8d1ae69825bbaf3394132c1cb71840",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "184f396b_1c6b52a5",
        "filename": "crypto/fipsmodule/modes/asm/aesni-gcm-x86_64.pl",
        "patchSetId": 3
      },
      "lineNbr": 444,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-18T22:35:06Z",
      "side": 1,
      "message": "Also not sure that does what we want. The usually frame pointer scheme is that rbp points at a 16-byte block containing `[prev_rbp | return_address]`. The standard prolog to set this up is:\n\n```\n  PUSH RBP\n  MOV RBP, RSP\n```\n  \nAt the time we save the stack pointer, RSP (and thus RBP) points to this. (Will fix this in new version.)",
      "parentUuid": "07fe9f54_2737415a",
      "revId": "4aa3319b3a8d1ae69825bbaf3394132c1cb71840",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7fac018_756f35c5",
        "filename": "crypto/fipsmodule/modes/asm/aesni-gcm-x86_64.pl",
        "patchSetId": 3
      },
      "lineNbr": 1050,
      "author": {
        "id": 15571
      },
      "writtenOn": "2023-01-10T17:46:06Z",
      "side": 1,
      "message": "Adam: This is an untested offset adjustment based off of:\nhttps://learn.microsoft.com/en-us/windows/win32/api/winnt/ns-winnt-context\nInstead of pulling offset 120, which is supposably \"DWORD64 Rax\" I am pulling offset 160, which is right \"DWORD64 Rbp\" which sits right next to \"DWORD Rsp\". This looks fine to me, but should be tested. Is there a Windows-backed unittest to exercise this handler?",
      "range": {
        "startLine": 1050,
        "startChar": 5,
        "endLine": 1050,
        "endChar": 8
      },
      "revId": "4aa3319b3a8d1ae69825bbaf3394132c1cb71840",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fb3be33_6a7f6a65",
        "filename": "crypto/fipsmodule/modes/asm/aesni-gcm-x86_64.pl",
        "patchSetId": 3
      },
      "lineNbr": 1050,
      "author": {
        "id": 5005
      },
      "writtenOn": "2023-01-11T01:15:54Z",
      "side": 1,
      "message": "We sadly don\u0027t have an SEH unittest like we have a CFI one. David knows the most about SEH and I rather hoping that the SEH here is already broken and thus we\u0027re not making it worse, but perhaps David knows if that\u0027s true.",
      "parentUuid": "c7fac018_756f35c5",
      "range": {
        "startLine": 1050,
        "startChar": 5,
        "endLine": 1050,
        "endChar": 8
      },
      "revId": "4aa3319b3a8d1ae69825bbaf3394132c1cb71840",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8cad1f2_101139d6",
        "filename": "crypto/fipsmodule/modes/asm/aesni-gcm-x86_64.pl",
        "patchSetId": 3
      },
      "lineNbr": 1050,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-01-11T04:39:26Z",
      "side": 1,
      "message": "We actually do for SEH, but it\u0027s disabled for most functions, including this one because OpenSSL doesn\u0027t quite do it right. :-) I think what OpenSSL has might work for actual exception delivery (it\u0027s a fake language handler and also does some other goofy things IIRC... it\u0027s been a while), but doesn\u0027t work for profilers. You\u0027re *supposed* to use these rather restrictive unwind codes. I\u0027ve been hoping to redo things to get it right, but it hasn\u0027t bubbled up in priority yet.\n\nSince this CL is changing the prolog/epilog for this function with this CL anyway, rather than hope the redone wrong way still works, I\u0027ll take a stab at making this function do it right.",
      "parentUuid": "c7fac018_756f35c5",
      "range": {
        "startLine": 1050,
        "startChar": 5,
        "endLine": 1050,
        "endChar": 8
      },
      "revId": "4aa3319b3a8d1ae69825bbaf3394132c1cb71840",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}