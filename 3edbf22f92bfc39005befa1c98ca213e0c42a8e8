{
  "comments": [
    {
      "key": {
        "uuid": "b5c143c9_01351da7",
        "filename": "crypto/fipsmodule/aes/asm/aes-armv4.pl",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 5415
      },
      "writtenOn": "2017-06-12T23:28:17Z",
      "side": 1,
      "message": "Any files with #undef like this are to counter the change in arm-xlate.pl.",
      "revId": "3edbf22f92bfc39005befa1c98ca213e0c42a8e8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abef427d_b6bf945e",
        "filename": "crypto/fipsmodule/aes/asm/aes-armv4.pl",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 5005
      },
      "writtenOn": "2017-06-12T23:43:25Z",
      "side": 1,
      "message": "You mean, with this change, if we\u0027re building for Thumb2, arm-xlate.pl will emit .thumb_func for each function. But, if we don\u0027t want that, we #undef __thumb2__?\n\n(.thumb_func tells the assembler to emit Thumb instructions for the function? Which doesn\u0027t work if the function hasn\u0027t been updated to be compatible?)",
      "parentUuid": "b5c143c9_01351da7",
      "revId": "3edbf22f92bfc39005befa1c98ca213e0c42a8e8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a95e7c0_afa425ad",
        "filename": "crypto/fipsmodule/aes/asm/aes-armv4.pl",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 5415
      },
      "writtenOn": "2017-06-13T15:23:00Z",
      "side": 1,
      "message": "I would have expected it to fail to assemble because the instruction stream doesn\u0027t work for Thumb, but that doesn\u0027t seem to be what\u0027s happening with this CL: https://boringssl-review.googlesource.com/c/17113/\n\nI\u0027ll toy with Apple\u0027s tools to understand what\u0027s going on before landing this tower.",
      "parentUuid": "abef427d_b6bf945e",
      "revId": "3edbf22f92bfc39005befa1c98ca213e0c42a8e8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb8f18e6_95dc86f9",
        "filename": "crypto/fipsmodule/aes/asm/aes-armv4.pl",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 5415
      },
      "writtenOn": "2017-06-13T17:39:06Z",
      "side": 1,
      "message": "Okay, I figured it out. So LLVM and GNU disagree on what .thumb_func foo means. GNU believes it means tag foo as being thumb, so the linker can sort out calls, and also emit an implicit .thumb.\n\nLLVM only believes it\u0027s the former. So if the .thumb/.code/.arm prologues ever mismatch against the __thumb2__ preprocessor symbol on iOS, we will assemble the function in ARM mode, but tell the linker it is Thumb, and all calls to it will explode.\n\nSo before https://boringssl-review.googlesource.com/c/17113/, any functions in those two files indeed did not work at all. I\u0027m guessing no one noticed because Apple believes in compile-time hardware capabilities, which means to get AES and PMULL instructions, you must be targeting AArch64, where Thumb mode doesn\u0027t exist.",
      "parentUuid": "1a95e7c0_afa425ad",
      "revId": "3edbf22f92bfc39005befa1c98ca213e0c42a8e8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    }
  ]
}