{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "61b9d01a_2d934c43",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-18T01:09:07Z",
      "side": 1,
      "message": "Context: https://chromium-review.googlesource.com/c/chromium/src/+/5463898",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 30
      },
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af8eac9b_28c72aa3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-22T20:46:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61b9d01a_2d934c43",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 18,
        "endChar": 30
      },
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "663162b5_28584396",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-18T14:41:48Z",
      "side": 1,
      "message": "Hmm. The goal of the change makes sense, but reading just this method on its own, it\u0027s suuuuuper confusing that things which should decidedly be fatal are called with `AddWarning`. I.e. without global context, this CL reads like a bug.\n\nI\u0027m actually curious what @mattm@google.com\u0027s take on this is. The documentation currently says:\n\n```\n  // Implementations should return true if |public_key| is acceptable. This is\n  // called for each certificate in the chain, including the target certificate.\n  // When returning false implementations can optionally add high-severity\n  // errors to |errors| with details on why it was rejected.\n```\n\nThis isn\u0027t *inconsistent*, but it does add to our general headache where functions that return both `bool` and add to `CertErrors` are super confused.\n\nThe call site just unconditionally adds an error, so in principle the `CertErrors` output isn\u0027t needed. It was just, at one point, helpful for adding extra errors.\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/boringssl/src/pki/verify_certificate_chain.cc;drc\u003d9e110c64fee9c391021dc81944912f906e6ba5d5;l\u003d1451\n\nBut now extra errors are bad because we\u0027re trying to get a better handle on what we return out of the public API. That means that actually we *never* want this method to add a high-severity error.\n\nWhich means we could just remove the `CertErrors` mailbox entirely. Except the debug information is kinda nice... does that mean the only remaining use for this is to add to the debug information? Do we have an internal convention for a function that wants to return success/failure and optionally add debug info somewhere?",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70224590_8e2f513d",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-18T15:01:18Z",
      "side": 1,
      "message": "Well I definately pondered \"Are these even useful\"- because basically it just adds some goo.  I think they sort of are for two reasons:\n\n1) it exposes the configured minium in the RSA case in the diagnostic, so if someone looks at the diagnostic string, they can tell why. \n\n2) it adds useful information to the diagnostic that is also not \"predictable\" making the adage of \"don\u0027t parse the diagnostic use the error codes\" more effective. \n\nTBH, I think this is resolvable by adding a comment that a false return always adds a high severity error to the top of the function.",
      "parentUuid": "663162b5_28584396",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f811172_6fea7c81",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-18T15:29:33Z",
      "side": 1,
      "message": "\"Warning\" could possibly be renamed as \"Diagnostic\" but I think that\u0027s for another cl.",
      "parentUuid": "70224590_8e2f513d",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8c65dfd_073df8e1",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 6700
      },
      "writtenOn": "2024-04-18T18:28:50Z",
      "side": 1,
      "message": "I guess another option, since the caller doesn\u0027t do anything with the return value than add an error, would just be to have the method return void and add the error itself. Though that would make it inconsistent with the other delegate method IsSignatureAlgorithmAcceptable which the caller does use the bool return for something other than adding the error. I dunno.",
      "parentUuid": "3f811172_6fea7c81",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf2e88b7_ccadc2ac",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-18T18:45:00Z",
      "side": 1,
      "message": "I\u0027m kind of ok with the caller deciding decide what error to add, and to do the\nright thing to ensure failure. \n\nI have scars on me from the OpenSSL verify callback returning false but not setting the correct error code and having silly things happen, so I think the caller deciding that false means failure and to do \"whatever is necessary to ensure a failure\" is probably right.",
      "parentUuid": "c8c65dfd_073df8e1",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee67886b_da7d8f5c",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-26T19:24:49Z",
      "side": 1,
      "message": "The nuisance is that we\u0027d need the error to be mapped to `CERTIFICATE_UNSUPPORTED_KEY` and these errors are private to SimplePathBuilderDelegate.\n\nAlthough... can we just make them not private to it? Like move them into the more general set and then add the mappings we want? Then we don\u0027t have the weirdness of an error being called a warning. (I mean, we\u0027ll need to overhaul this whole thing and anyway, but this way it\u0027s a bit more analogous to how we\u0027ve been doing everything else thus far.)",
      "parentUuid": "cf2e88b7_ccadc2ac",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52d4f40d_30b3a07f",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-26T19:28:30Z",
      "side": 1,
      "message": "I don\u0027t understand.  Warnings are not errors - we don\u0027t need to map them to anything. they can just exist and be private to whatever has decided to toss them on there. We don\u0027t need to map these to anything.",
      "parentUuid": "ee67886b_da7d8f5c",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34d5a567_a43881bf",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-26T19:30:57Z",
      "side": 1,
      "message": "as far as the \"weirdness\" of an error being called a warning - that is how the internal system is today - all the things can be added as either an error or a warning.  there is no such thing that is \"just an error\" or \"just a warning\" - they are a thing, and we choose to add them as either. \n\n(and at least at the moment I am not trying to boil that ocean, just make the external view of this consistent)",
      "parentUuid": "52d4f40d_30b3a07f",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7776a9c_358eecd0",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-26T19:38:39Z",
      "side": 1,
      "message": "Oh I meant that we could either turn the warnings into errors, or we could keep them as errors and just map them to the same thing. (Since two internal errors that map to the same external error still works smoothly.)\n\nBut yeah, either option is fine with me. Really what I want is to unwind this whole mess and remove the notion of warnings. 😊",
      "parentUuid": "34d5a567_a43881bf",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "588cf4f6_0b06962a",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-26T19:39:28Z",
      "side": 1,
      "message": "\u003e Oh I meant that we could either turn the warnings into errors, or we could keep them as errors and just map them to the same thing.\n\nTypo. Let me try that again.\n\nOh I meant that we could either turn the errors into warnings (what this CL does), or we could keep them as errors and just map the extra errors to the same thing as the main one.",
      "parentUuid": "c7776a9c_358eecd0",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39293a31_1cc8f665",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-26T20:37:37Z",
      "side": 1,
      "message": "Yesh, I don\u0027t think the latter is really viable.  Most of these appear to be\ninformational, so would best be dealt with like this, (or changed to some other\nway for external code to add a diagnostic rather than defining a custom \"error\")\n\nThere are a few cases where external code really wants to add an actual error, \nand this would mean We would also potentially end up adding \"things\" for things the path builder is *not* doing which were sort of called \"path builder errors\". I\u0027d rather just push those things to be handled separately rather than mapped to something that appears to be something from path building when it is not.",
      "parentUuid": "588cf4f6_0b06962a",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "939224cd_665b4f0a",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-04-18T14:41:48Z",
      "side": 1,
      "message": "While we ponder all of the above, another option is just to map kRsaModulusTooSmall and kUnacceptableCurveForEcdsa to the same public error as kUnacceptablePublicKey. 😊",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00cb5648_23174e0e",
        "filename": "pki/simple_path_builder_delegate.cc",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-04-18T15:01:18Z",
      "side": 1,
      "message": "No, I don\u0027t think so, that\u0027s effectively like removing them.  \"Warning\" in our sense has effectively become \"add some diagnostic\".",
      "parentUuid": "939224cd_665b4f0a",
      "revId": "f6491abd0df8391ca43a39faea4a404ed994f5d9",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}