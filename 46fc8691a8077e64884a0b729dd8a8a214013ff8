{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "26083b88_b3db2b75",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1256,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-08-22T20:13:42Z",
      "side": 1,
      "message": "We should really just call it anyway, even if it is defined, and override the return value, that way we can guarantee CRYPTO_library_init() has happened as soon as these are called, even in the case where it has been defined. \n\nI mean we could just put the CRYPTO_library_init right at the top of each of these functions, before any of the ifdef override.  it\u0027s only going to \ndo anything once in any case.",
      "range": {
        "startLine": 1252,
        "startChar": 0,
        "endLine": 1256,
        "endChar": 6
      },
      "revId": "46fc8691a8077e64884a0b729dd8a8a214013ff8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e473aed7_01bfd11b",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1256,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-23T21:14:57Z",
      "side": 1,
      "message": "Hmm. That does mean we can\u0027t as easily squirrel it behind `OPENSSL_ia32cap_has_bit` and `OPENSSL_get_armcap` functions, but we can always just stick the line in every function, so that\u0027s not that strong of an argument against it.\n\nSince `CRYPTO_library_init` *only* initializes the CPU vector, I think adding extra calls can only help for assembly. I believe this is the list of asm functions that care:\nhttps://paste.googleplex.com/5556261343985664\n\nIt would definitely help with the `aes_hw_*` case. I think the others would still need their own calls though.\n\nThis also precludes us from marking these functions as `const` and allow the compiler to delete duplicate calls. Although it is *slightly* unclear to what extent this is valid:\nhttps://stackoverflow.com/questions/6867696/gcc-attributes-for-init-on-first-use-functions\n\nNot that this CL currently achieves it. Looks like we actually need to make an out-of-line function that combines CRYPTO_library_init and reading the value:\nhttps://godbolt.org/z/ohzrxY8e3\n\nI\u0027m slightly tempted to do that though. It\u0027s not uncommon for us to call these in series. WDYT?\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/openscreen/src/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c;drc\u003d5fdc03f74adfd3d270aa6f64b3f3050c19e52e49;l\u003d158",
      "parentUuid": "26083b88_b3db2b75",
      "range": {
        "startLine": 1252,
        "startChar": 0,
        "endLine": 1256,
        "endChar": 6
      },
      "revId": "46fc8691a8077e64884a0b729dd8a8a214013ff8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d01aac2_98ef6791",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1256,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-08-23T22:12:31Z",
      "side": 1,
      "message": "I\u0027m pondering how you legitimately get into there via public API without hitting something like EVP, i.e. If we ensured that the entry points into EVP called it, what\u0027s left.",
      "parentUuid": "e473aed7_01bfd11b",
      "range": {
        "startLine": 1252,
        "startChar": 0,
        "endLine": 1256,
        "endChar": 6
      },
      "revId": "46fc8691a8077e64884a0b729dd8a8a214013ff8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fa512881_dcea8254",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1256,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-08-23T22:13:18Z",
      "side": 1,
      "message": "(and I was sort of thinging, we care about this for public api ways, if we\u0027re doing stuff internally ensuring it has been called is on us)",
      "parentUuid": "5d01aac2_98ef6791",
      "range": {
        "startLine": 1252,
        "startChar": 0,
        "endLine": 1256,
        "endChar": 6
      },
      "revId": "46fc8691a8077e64884a0b729dd8a8a214013ff8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a1201be_45fcb84c",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1256,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-08-23T22:17:52Z",
      "side": 1,
      "message": "similar to something like https://boringssl-review.googlesource.com/c/boringssl/+/62605",
      "parentUuid": "fa512881_dcea8254",
      "range": {
        "startLine": 1252,
        "startChar": 0,
        "endLine": 1256,
        "endChar": 6
      },
      "revId": "46fc8691a8077e64884a0b729dd8a8a214013ff8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5593e00_8ac3b09a",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1256,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-08-24T00:16:24Z",
      "side": 1,
      "message": "The public API is pretty big. E.g. `EVP_get_cipherbynid` doesn\u0027t cover folks calling `EVP_aes_128_cbc` directly, which is our preferred API anyway. `EVP_get_cipherbynid` is hard to grep for and breaks dead code elimination.\n\nAnd then there\u0027s folks calling into `AES_set_encrypt_key` and friends directly. We could do it this way, but I figure a strategy like this is easier to be sure we\u0027ve gotten it all. (It also helps that, unlike upstream, our init function truly is just CPU capabilities. We don\u0027t need to add algorithms to a giant in-memory table or anything.)",
      "parentUuid": "0a1201be_45fcb84c",
      "range": {
        "startLine": 1252,
        "startChar": 0,
        "endLine": 1256,
        "endChar": 6
      },
      "revId": "46fc8691a8077e64884a0b729dd8a8a214013ff8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58533f2c_a87b434b",
        "filename": "crypto/internal.h",
        "patchSetId": 1
      },
      "lineNbr": 1256,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-09-07T21:57:33Z",
      "side": 1,
      "message": "Yeah, I guess we can\u0027t really get away with just coming in from the theortical entry points like that.\n\nIt seems hacky to have to do it that way, but godbolt probably is not lying - and so since this will get called \"frequently\" we should probably make the out of line version of the init and read value that will optimize..\n\nI just realized this was sitting there in draft for a week, because I had ht the save button. but not the send button.. sigh.",
      "parentUuid": "b5593e00_8ac3b09a",
      "range": {
        "startLine": 1252,
        "startChar": 0,
        "endLine": 1256,
        "endChar": 6
      },
      "revId": "46fc8691a8077e64884a0b729dd8a8a214013ff8",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "46fc8691a8077e64884a0b729dd8a8a214013ff8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "46fc8691a8077e64884a0b729dd8a8a214013ff8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}