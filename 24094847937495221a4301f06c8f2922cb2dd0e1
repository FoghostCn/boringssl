{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4fab8e9a_d645c01d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 9581
      },
      "writtenOn": "2021-03-18T20:56:12Z",
      "side": 1,
      "message": "New patchset, hopefully won\u0027t collide with your in-progress review :)",
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ae4e93c_102baaab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 21
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "I haven\u0027t looked at the test code (will finish that up tomorrow), but I\u0027ve looked at all the non-test code and the non-test code LGTM with these comments! :-D",
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2f3710d_e22eafdf",
        "filename": "fuzz/decode_client_hello_inner.cc",
        "patchSetId": 21
      },
      "lineNbr": 48,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "Nit: No need to check the result or anything. :-)",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 7
      },
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e9397a1_9017ef55",
        "filename": "fuzz/decode_client_hello_inner.cc",
        "patchSetId": 21
      },
      "lineNbr": 50,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "No need for std::move now that it\u0027s a span.",
      "range": {
        "startLine": 50,
        "startChar": 10,
        "endLine": 50,
        "endChar": 20
      },
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "be0e1b0b_7289e7eb",
        "filename": "ssl/encrypted_client_hello.cc",
        "patchSetId": 21
      },
      "lineNbr": 41,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "Optional: These all work, since we know that they fit but I usually prefer to write use CBB_add_uN_length_prefixed even when I know the size. The length prefixed helpers not only fill in the length for you but also check that the length fits in uN, rather than silently wrapping around.\n\n(This applies here and to rewriting the extensions down below. In both cases, it doesn\u0027t actually matter because we get the sizes from parsing another structure so the lengths had to have fit. But not having to think about it is also nice. If you do this, you can reuse CBBs rather than making lots of them, so just one CBB child is enough.)",
      "range": {
        "startLine": 41,
        "startChar": 23,
        "endLine": 41,
        "endChar": 51
      },
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d569cb7c_8ad82ae1",
        "filename": "ssl/encrypted_client_hello.cc",
        "patchSetId": 21
      },
      "lineNbr": 412,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "Nit: 80 chars",
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89753b0b_cde112d4",
        "filename": "ssl/internal.h",
        "patchSetId": 21
      },
      "lineNbr": 1560,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "It looks like we somewhat messed this up with DCs, but the header does try to section things a bit. Can you move this along with the other functions defined in encrypted_client_hello.cc into their own \"Encrypted ClientHello\" section.\n\nNo strong feelings about the ordering. Feel free to forward declare types as needed.",
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75f1fff8_ddb358f0",
        "filename": "ssl/internal.h",
        "patchSetId": 21
      },
      "lineNbr": 2083,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "Looks like this sentence needs to be updated for the new fuzzer-friendly version.",
      "range": {
        "startLine": 2081,
        "startChar": 42,
        "endLine": 2083,
        "endChar": 8
      },
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab2df758_f3231488",
        "filename": "ssl/ssl_lib.cc",
        "patchSetId": 21
      },
      "lineNbr": 2196,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "The null check actually doesn\u0027t do anything, but neither does the UniquePtr. Maybe even just:\n\n  return New\u003cSSL_ECH_SERVER_CONFIG_LIST\u003e()\n\n(Gosh it fields weird to do a bare new...)",
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48d1ffb1_f81b7393",
        "filename": "ssl/t1_lib.cc",
        "patchSetId": 21
      },
      "lineNbr": 788,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "I have seen compilers get upset about unused variables because, in release mode, asserts are removed altogether. If the CQ is happy, awesome. If it gets upset, I\u0027d just remove the assert and not worry about it too much.",
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9be9278d_3cb78b0a",
        "filename": "tool/server.cc",
        "patchSetId": 21
      },
      "lineNbr": 279,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "Oh interesting. Probably should document this. (I prefer things be explicit, so I probably would have just made missing the other config be an error, but I\u0027m also fine with .public if documented. Is this a convention from the interop runner or just something you\u0027ve been doing locally?)",
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d43b33f_1a691178",
        "filename": "tool/server.cc",
        "patchSetId": 21
      },
      "lineNbr": 359,
      "author": {
        "id": 5415
      },
      "writtenOn": "2021-03-18T22:24:28Z",
      "side": 1,
      "message": "Rather than check this in two places, just move this logic into line 298. Then we also can declare echconfig_key and echconfig where they\u0027re first used.",
      "revId": "24094847937495221a4301f06c8f2922cb2dd0e1",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}