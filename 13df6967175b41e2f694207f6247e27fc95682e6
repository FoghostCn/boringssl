{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "5d0096df_3291bc36",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 15,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "We\u0027re kind of all over the place when it comes to putting BoringSSL vs OpenSSL in headers. But perhaps `OPENSSL_HEADER_PKI_CERTIFICATE_H` just to match all our other ones? I figure:\n\n1. We probably should have `PKI` in there.\n\n2. Well, one way or another, we\u0027ve squatted `OPENSSL_HEADER_..._H` as the include guard throughout the project. May as well only squat the one namespace.",
      "range": {
        "startLine": 15,
        "startChar": 8,
        "endLine": 15,
        "endChar": 27
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b26cbf62_87b8007e",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 15,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-19T23:36:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d0096df_3291bc36",
      "range": {
        "startLine": 15,
        "startChar": 8,
        "endLine": 15,
        "endChar": 27
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "434ce235_a3d15da8",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 26,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "Oh hmm. This is probably a separate change, but we should replace both this and the ones inside pki/ into `BSSL_NAMESPACE_BEGIN` and `BSSL_NAMESPACE_END`. That way they can get an `inline namespace` when symbol prefixing is on. (Not that symbol prefixing works, but...)",
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "151d9d8b_0276ade0",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 26,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-29T21:09:42Z",
      "side": 1,
      "message": "Filed https://bugs.chromium.org/p/boringssl/issues/detail?id\u003d687",
      "parentUuid": "434ce235_a3d15da8",
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1aed80f_fbe6e0cb",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 28,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "This does mean we\u0027re handing back `Box\u003cArc\u003cT\u003e\u003e`, which is mildly silly. But I guess we want to keep `ParsedCertificate` out of the header for now. :-/\n\nThough I do wonder if, long term, we\u0027ll just morph this and `ParsedCertificate` into each other...",
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5f72600_9dd9d297",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 28,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-19T23:36:37Z",
      "side": 1,
      "message": "Yeah, I do expect this to change, right now it\u0027s just \"let\u0027s do something we can use in google3 - and this is effectively, google3",
      "parentUuid": "c1aed80f_fbe6e0cb",
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c53750d7_41d77eef",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 28,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-29T21:09:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "b5f72600_9dd9d297",
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1f827b0_d1686d0d",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 43,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "`optional\u003cunique_ptr\u003cT\u003e\u003e` is kinda goofy. First it costs two words. Second, `unique_ptr\u003cT\u003e` is already nullable, so now there\u0027s actually two distinct missing states: `std::nullopt` and `nullptr`.",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 53
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2892d810_9b4b98c2",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 43,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-20T00:05:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1f827b0_d1686d0d",
      "range": {
        "startLine": 43,
        "startChar": 9,
        "endLine": 43,
        "endChar": 53
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22114fd8_b8a0e51d",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 44,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "Nit: I think we usually right-align all the `*`s and `\u0026`s. (clang-format should have rewritten that.)",
      "range": {
        "startLine": 44,
        "startChar": 39,
        "endLine": 44,
        "endChar": 41
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fe089d9_e292cbd3",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 44,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "Do we want to take `bssl::Span\u003cconst uint8_t\u003e`, since this is binary data?\n\nIf we do that, but have a function to go from `Span\u003cconst char\u003e` to `Span\u003cconst uint8_t\u003e` in `openssl/span.h`, that could help out people who have a `string_view`. Also aligns nicely with getting rid of `der::Input`.",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 22
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d8828e9_a04add07",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 44,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-19T23:36:37Z",
      "side": 1,
      "message": "The problem with changing these here now, is that they turn around and call other\nlibpki parsers (as in the pem tokenizer) which have come from chrome converted all into std::string_view because they used absl::string_view before... \n\nSo without wholesale changes underneath this today, I have to then convert the bssl:Span\u003cconst uint8_t\u003e back into an std::string_view all the time which seems\nmore trouble than it\u0027s worth, at least until the underlying stuff changes and\nwe conver this along with it.",
      "parentUuid": "9fe089d9_e292cbd3",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 22
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62931847_29e88632",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 44,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-19T23:36:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22114fd8_b8a0e51d",
      "range": {
        "startLine": 44,
        "startChar": 39,
        "endLine": 44,
        "endChar": 41
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1eafb9b_fc995d86",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 44,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-29T21:09:42Z",
      "side": 1,
      "message": "It\u0027s a bit easier to change internals than public APIs, so I\u0027m inclined to say we should do the API we want and sort out the internals. As for what we want...\n\nDo you need to do it with `FromDER`? That seems like it would prefer a span anyway, to avoid a cast.\n\n`FromPEM` would require a conversion, yeah. That one I\u0027m less clear what the right type is. PEM is an ASCII format and all. Keeping that as `std::string_view` seems... not necessarily wrong?? I dunno, what do you think?",
      "parentUuid": "4d8828e9_a04add07",
      "range": {
        "startLine": 44,
        "startChar": 6,
        "endLine": 44,
        "endChar": 22
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "660bd4a0_6aca0400",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 55,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "I think \"self-signed\" means you are actually signing yourself. And yeah I don\u0027t know if that\u0027s super well-defined.\n\nSelf-issued just means the names match and is used throughout path verification because they\u0027re treated kinda funny. I think they\u0027re meant to be used for same-name key transitions (yuck). That one is quite well-defined, apart from canonicalization variations. It\u0027s not meant to check AKID/SKID.\n\nBut since this is mostly a path-builder notion, I\u0027m a little confused why we want to export this. Looking at the two internal callers, both of them seem to actually want a self-signed check anyway.",
      "range": {
        "startLine": 55,
        "startChar": 22,
        "endLine": 55,
        "endChar": 58
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a1d3352_4ecaa79f",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 65,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "Oh this gets into the mess about whether X.509 deals in instants of time or second-resolution chunks of time. I\u0027m pretty sure it\u0027s always the latter in practice, and it\u0027s the only plausible interpretation of \"inclusive\".\n\nThat is, `t \u003c\u003d not_after` for *instants* `t` would suggest to me that it is valid at exactly `not_after` but not at `not_after + epsilon`. But in practice we compare POSIX timestamps rounded down to seconds, which would make it valid up to `not_after + 1 second - epsilon`.",
      "range": {
        "startLine": 65,
        "startChar": 14,
        "endLine": 65,
        "endChar": 22
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9aa30f2_8a32d4a8",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 65,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-19T23:36:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a1d3352_4ecaa79f",
      "range": {
        "startLine": 65,
        "startChar": 14,
        "endLine": 65,
        "endChar": 22
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88c3f5a3_2d162141",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 75,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "Since the certificate is immutable and all, any reason not to just return a `bssl::Span\u003cconst uint8_t\u003e`?",
      "range": {
        "startLine": 75,
        "startChar": 1,
        "endLine": 75,
        "endChar": 22
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fcaba44a_d5c10790",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 75,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-19T23:36:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "88c3f5a3_2d162141",
      "range": {
        "startLine": 75,
        "startChar": 1,
        "endLine": 75,
        "endChar": 22
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "feaa2981_73711815",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 83,
      "author": {
        "id": 5415
      },
      "writtenOn": "2024-01-17T23:08:54Z",
      "side": 1,
      "message": "bssl?",
      "range": {
        "startLine": 83,
        "startChar": 16,
        "endLine": 83,
        "endChar": 22
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "505d8677_a8e9cedb",
        "filename": "include/openssl/pki/certificate.h",
        "patchSetId": 15
      },
      "lineNbr": 83,
      "author": {
        "id": 14196
      },
      "writtenOn": "2024-01-19T23:36:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "feaa2981_73711815",
      "range": {
        "startLine": 83,
        "startChar": 16,
        "endLine": 83,
        "endChar": 22
      },
      "revId": "13df6967175b41e2f694207f6247e27fc95682e6",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}