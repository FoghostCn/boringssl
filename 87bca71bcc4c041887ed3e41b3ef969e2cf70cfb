{
  "comments": [
    {
      "key": {
        "uuid": "ae7811e2_86b06b86",
        "filename": "crypto/fipsmodule/bcm.c",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 9681
      },
      "writtenOn": "2019-08-22T14:18:29Z",
      "side": 1,
      "message": "I guess this means that delocate.go needs to be run as part of the (in my case, Android) build?\n\nWhen I add #define BORINGSSL_FIPS just before bash.c:152, I get linked errors in the Android build because the above symbols aren\u0027t found.\n\ndelocate doesn\u0027t seem part of inject_hash.go, which you linked to in a comment thread elsewhere.",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 107,
        "endChar": 47
      },
      "revId": "87bca71bcc4c041887ed3e41b3ef969e2cf70cfb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee32a916_82feff70",
        "filename": "crypto/fipsmodule/bcm.c",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 9681
      },
      "writtenOn": "2019-08-22T19:00:11Z",
      "side": 1,
      "message": "For reference, my Android build errors were because the linker script that injects the above symbols is not yet present. On Android a shared library is built so delocate.go is unrelated. Closing this thread.",
      "parentUuid": "ae7811e2_86b06b86",
      "range": {
        "startLine": 105,
        "startChar": 0,
        "endLine": 107,
        "endChar": 47
      },
      "revId": "87bca71bcc4c041887ed3e41b3ef969e2cf70cfb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47d323e6_14713992",
        "filename": "crypto/fipsmodule/bcm.c",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 9681
      },
      "writtenOn": "2019-08-22T12:38:01Z",
      "side": 1,
      "message": "Perhaps we should call a new no-arg BORINGSSL_self_test() method here which can then be implemented on top of the other one:\n\n BORINGSSL_self_test(BORINGSSL_bcm_text_hash)\n\n? That way, we wouldn\u0027t break any code that currently calls BORINGSSL_self_test() and which may not have access to BORINGSSL_bcm_text_hash itself (I\u0027m not familiar with how symbol visibility  works in .c land but at least the calling code shouldn\u0027t have any business knowing about that constant).\n\nFor example, AOSP\u0027s\n\nframeworks/base/services/core/jni/com_android_server_devicepolicy_CryptoTestHelper.cpp\n\ncontains such a call (perhaps it shouldn\u0027t, because the self-test runs anyway when the library is loaded)?",
      "range": {
        "startLine": 166,
        "startChar": 27,
        "endLine": 166,
        "endChar": 50
      },
      "revId": "87bca71bcc4c041887ed3e41b3ef969e2cf70cfb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c001e79_798926a8",
        "filename": "crypto/fipsmodule/bcm.c",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 9681
      },
      "writtenOn": "2019-08-22T12:47:39Z",
      "side": 1,
      "message": "Apparently C doesn\u0027t even allow overloading methods. I\u0027ll try to work around it for now by letting callers pass in a zero hash.",
      "parentUuid": "47d323e6_14713992",
      "range": {
        "startLine": 166,
        "startChar": 27,
        "endLine": 166,
        "endChar": 50
      },
      "revId": "87bca71bcc4c041887ed3e41b3ef969e2cf70cfb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2502d3ae_06696f70",
        "filename": "crypto/fipsmodule/self_check/self_check.c",
        "patchSetId": 5
      },
      "lineNbr": 254,
      "author": {
        "id": 9681
      },
      "writtenOn": "2019-08-22T13:28:18Z",
      "side": 1,
      "message": "Is my understanding correct that the self test needs to be run separately for 32bit and 64bit ABIs?\n\nIf so, wouldn\u0027t we need to include something in flag_path that is indicative of the ABI? E.g.\n\n/dev/boringssl/selftest/32/[hash]\nvs.\n/dev/boringssl/selftest/64/[hash]\n\n?",
      "range": {
        "startLine": 254,
        "startChar": 0,
        "endLine": 254,
        "endChar": 39
      },
      "revId": "87bca71bcc4c041887ed3e41b3ef969e2cf70cfb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63eb259e_88a5c3ff",
        "filename": "crypto/fipsmodule/self_check/self_check.c",
        "patchSetId": 5
      },
      "lineNbr": 254,
      "author": {
        "id": 9681
      },
      "writtenOn": "2019-08-22T14:18:29Z",
      "side": 1,
      "message": "Adam responded to this elsewhere: \"A 32-bit build of BoringSSL will have a different hash: the hash is over the code and data of the module.\"\n\nThat resolves my question.",
      "parentUuid": "2502d3ae_06696f70",
      "range": {
        "startLine": 254,
        "startChar": 0,
        "endLine": 254,
        "endChar": 39
      },
      "revId": "87bca71bcc4c041887ed3e41b3ef969e2cf70cfb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e09e775_35b4b483",
        "filename": "crypto/fipsmodule/self_check/self_check.c",
        "patchSetId": 5
      },
      "lineNbr": 257,
      "author": {
        "id": 9680
      },
      "writtenOn": "2019-08-22T10:03:04Z",
      "side": 1,
      "message": "F_OK, since this is an existence test ?",
      "range": {
        "startLine": 257,
        "startChar": 43,
        "endLine": 257,
        "endChar": 47
      },
      "revId": "87bca71bcc4c041887ed3e41b3ef969e2cf70cfb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "337be579_095d0e2f",
        "filename": "crypto/fipsmodule/self_check/self_check.c",
        "patchSetId": 5
      },
      "lineNbr": 615,
      "author": {
        "id": 9682
      },
      "writtenOn": "2019-08-22T16:36:31Z",
      "side": 1,
      "message": "missing O_CLOEXEC?",
      "range": {
        "startLine": 615,
        "startChar": 35,
        "endLine": 615,
        "endChar": 63
      },
      "revId": "87bca71bcc4c041887ed3e41b3ef969e2cf70cfb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31684d7e_e4e58442",
        "filename": "include/openssl/crypto.h",
        "patchSetId": 5
      },
      "lineNbr": 65,
      "author": {
        "id": 9681
      },
      "writtenOn": "2019-08-22T12:47:39Z",
      "side": 1,
      "message": "may be worth specifying that the self test will still be run in that case?",
      "range": {
        "startLine": 65,
        "startChar": 35,
        "endLine": 65,
        "endChar": 76
      },
      "revId": "87bca71bcc4c041887ed3e41b3ef969e2cf70cfb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212",
      "unresolved": true
    }
  ]
}