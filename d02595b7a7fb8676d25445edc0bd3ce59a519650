{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "724f392e_95c92972",
        "filename": "crypto/mem.c",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 14196
      },
      "writtenOn": "2022-09-06T19:02:12Z",
      "side": 1,
      "message": "I kinda think this should just return (and be documented to return) NULL, not call malloc anyway.",
      "range": {
        "startLine": 252,
        "startChar": 0,
        "endLine": 252,
        "endChar": 71
      },
      "revId": "d02595b7a7fb8676d25445edc0bd3ce59a519650",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66bfd5c9_22266c2f",
        "filename": "crypto/mem.c",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-09-06T19:06:13Z",
      "side": 1,
      "message": "The upstream semantics are that, if the secure heap isn\u0027t initialized, OPENSSL_secure_malloc and friends just act as if you called OPENSSL_malloc. I think the idea is you can just write code that calls these functions without thinking too hard about whether the secure heap is there.\n\nNode seems to do this to allocate, of all things, some buffers for random UUIDs?? And then they either initialize the secure heap or not based on some off-by-default command-line flag.",
      "parentUuid": "724f392e_95c92972",
      "range": {
        "startLine": 252,
        "startChar": 0,
        "endLine": 252,
        "endChar": 71
      },
      "revId": "d02595b7a7fb8676d25445edc0bd3ce59a519650",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92422e7a_516af631",
        "filename": "crypto/mem.c",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 14196
      },
      "writtenOn": "2022-09-06T19:11:44Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "66bfd5c9_22266c2f",
      "range": {
        "startLine": 252,
        "startChar": 0,
        "endLine": 252,
        "endChar": 71
      },
      "revId": "d02595b7a7fb8676d25445edc0bd3ce59a519650",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "d02595b7a7fb8676d25445edc0bd3ce59a519650",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "d02595b7a7fb8676d25445edc0bd3ce59a519650",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}