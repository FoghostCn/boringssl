{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d6d77bd0_38ca69a4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-30T18:02:09Z",
      "side": 1,
      "message": "Oh, mind adding \u0027Bug: 505\u0027 on a line here? That\u0027ll associate the change with the bug you filed.",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25f443c6_daf8bfe1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-29T13:49:50Z",
      "side": 1,
      "message": "Thanks!",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c1c6ddf3_b5892e88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14881
      },
      "writtenOn": "2022-08-30T16:04:01Z",
      "side": 1,
      "message": "For the AArch64 code you should be able to use HWCAPS in a similar way to the 32-bit Arm code. The kernel will set them based on the ID registers in such a way that the register userspace can see and the HWCAP are consistent.",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c2cd48e_a0bf9b60",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-30T16:29:42Z",
      "side": 1,
      "message": "Ah, thanks! Is there a preferred one to use from the FreeBSD side? It seems NSS\u0027s FreeBSD support uses the register, but I don\u0027t have any particular preference.",
      "parentUuid": "c1c6ddf3_b5892e88",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f09fa0a_750891b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14886
      },
      "writtenOn": "2022-08-30T17:35:02Z",
      "side": 1,
      "message": "Added a review.  I am the author of the cpu_arm_freebsd.c part of the patch set.",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25dea1ba_a5913c8a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14886
      },
      "writtenOn": "2022-08-30T17:35:02Z",
      "side": 1,
      "message": "FreeBSD traps and emulates accesses to the normally privileged CPU feature registers on AArch64.  This permits user space applications to directly query for CPU features through the registers.  The main advantage of this approach is that it is forwards compatible, being able to detect presence of CPU features even if the kernel does not yet provide a HWCAP feature bit for the presence.\n\nI personally prefer to use the registers as that eliminates the variable of how the kernel has mangled the presence of features into HWCAP feature bits, but if you have a different preference in your project, this can be changed.",
      "parentUuid": "2c2cd48e_a0bf9b60",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73ef8ef7_95dea55e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-30T18:02:09Z",
      "side": 1,
      "message": "Ah, I suppose Sergey should probably have checked with you before uploading this then. :-) I\u0027ll leave this thread unresolved so we remember to get a CLA on file from you before landing this.\n\nSergey, are you the author of cpu_aarch64_freebsd.c?",
      "parentUuid": "2f09fa0a_750891b5",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2a763517_1c74cdf3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-30T18:02:09Z",
      "side": 1,
      "message": "Sounds good. Let\u0027s stick with registers then! No preference here. Since AArch64 believes this is the OS\u0027s responsibility, I\u0027m happy to defer to what the OS thinks is the preferred mechanism.\n\nWe use getauxval on Linux because, until recently[0], it was the only way to query it. Were we to switch to the register, we\u0027d have to figure out when it\u0027s available relative to getauxval and it seems easier to just stick with the thing that we know works. Though, yeah, life sure would have been simpler if everyone just trapped the register access.\n\n[0] https://docs.kernel.org/arm64/cpu-feature-registers.html",
      "parentUuid": "25dea1ba_a5913c8a",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a6cdaaa_399c2eef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14851
      },
      "writtenOn": "2022-08-31T00:05:45Z",
      "side": 1,
      "message": "David, actually I\u0027m not the author, but I have https://bugs.freebsd.org/bugzilla/show_bug.cgi?id\u003d242388",
      "parentUuid": "73ef8ef7_95dea55e",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e8aa5422_dd7c31f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13321
      },
      "writtenOn": "2022-08-31T07:27:13Z",
      "side": 1,
      "message": "I wonder why https://boringssl-review.googlesource.com/c/boringssl/+/49425 was rejected and this review accepted?",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91705624_036821a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-08-31T19:01:58Z",
      "side": 1,
      "message": "It has become more likely that FreeBSD on Aarch64 will become a pertinent OS for us, although it remains the case that we have no builders for this platform and so we want to keep the code commitment minimal because we don\u0027t want to be breaking any supported platforms.",
      "parentUuid": "e8aa5422_dd7c31f9",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17700ad6_c1cc3492",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-08-31T19:01:58Z",
      "side": 1,
      "message": "I think it\u0027s clear from the comments that this submission, while submitted under the CLA, might not have met point (4): https://cla.developers.google.com/about/google-individual\n\nWe do need CLAs for submissions, however! It provides provide legal clarity and our lawyers are firm about this. We would not be able to move forward here unless the authors have signed the CLA and comment on this CL clearly expressing their desire that the code is submitted under the CLA. (I.e. the code must be \"intentionally submitted by You to Google\".)\n\nSorry about the paperwork, but I\u0027ve no ability to be flexible on these points.",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dabe2488_1d7b41fc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14851
      },
      "writtenOn": "2022-08-31T19:18:32Z",
      "side": 1,
      "message": "I believe that everybody on this review has already submitted the CLA, Mikaël Urankar has done that in https://boringssl-review.googlesource.com/c/boringssl/+/49425, Robert has done also, and I\u0027m done.  Does anybody else need to submit the CLA?",
      "parentUuid": "17700ad6_c1cc3492",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3004e7ad_b8bb2698",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-08-31T19:21:57Z",
      "side": 1,
      "message": "Mikaël: confirmed CLA, but no comments here to indicate intentional submission yet.\nRobert: no CLA under the email address currently cc\u0027ed (fuzxxl@gmail.com)",
      "parentUuid": "dabe2488_1d7b41fc",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9f9ffd3_d46bbd99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14886
      },
      "writtenOn": "2022-09-01T00:40:48Z",
      "side": 1,
      "message": "I have not filed a CLA yet.  I\u0027m current on the road and can file a CLA once I\u0027m back (in about a week).",
      "parentUuid": "3004e7ad_b8bb2698",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "537b1356_2a5dd464",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14886
      },
      "writtenOn": "2022-09-11T02:18:48Z",
      "side": 1,
      "message": "I have now filed a CLA with Google.  I hope that was the right one.",
      "parentUuid": "a9f9ffd3_d46bbd99",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "251dde2b_d5c9087f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14851
      },
      "writtenOn": "2022-09-11T14:25:23Z",
      "side": 1,
      "message": "Thank you, Robert!",
      "parentUuid": "537b1356_2a5dd464",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f9c76b78_14e54eab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5005
      },
      "writtenOn": "2022-09-12T16:56:22Z",
      "side": 1,
      "message": "CLA confirmed. Could Mikaël comment to confirm their intent to submit under the CLA?",
      "parentUuid": "251dde2b_d5c9087f",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8312bd2d_49248bf6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 13321
      },
      "writtenOn": "2022-09-15T16:30:11Z",
      "side": 1,
      "message": "I don\u0027t understand what I have to do. I\u0027ve already signed a CLA for my golang contribution many years ago.",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ff5efff_6c6bb551",
        "filename": "crypto/cpu_aarch64_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-29T13:49:50Z",
      "side": 1,
      "message": "Since it\u0027s a new file, probably should use the current year",
      "range": {
        "startLine": 1,
        "startChar": 17,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef6d7729_af923cdf",
        "filename": "crypto/cpu_aarch64_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-29T13:49:50Z",
      "side": 1,
      "message": "I believe this\u0027ll break all non-FreeBSD platforms because you\u0027re defining OPENSSL_cpuid_setup on all OPENSSL_AARCH64 targets, not just OPENSSL_FREEBSD. Also, to be consistent with the other platforms, we ought to honor OPENSSL_STATIC_ARMCAP. So:\n\n```\n#include \"internal.h\"\n\n#if defined(OPENSSL_AARCH64) \u0026\u0026 defined(OPENSSL_FREEBSD) \u0026\u0026 \\\n    !defined(OPENSSL_STATIC_ARMCAP)\n    \n#include \u003csys/types.h\u003e\n#include \u003cmachine/_stdint.h\u003e\n#include \u003cmachine/armreg.h\u003e\n\n#include \u003copenssl/arm_arch.h\u003e\n\n\n#ifndef ID_AA64ISAR0_AES_VAL\n#define ID_AA64ISAR0_AES_VAL ID_AA64ISAR0_AES\n#endif\n#ifndef ID_AA64ISAR0_SHA1_VAL\n#define ID_AA64ISAR0_SHA1_VAL ID_AA64ISAR0_SHA1\n#endif\n#ifndef ID_AA64ISAR0_SHA2_VAL\n#define ID_AA64ISAR0_SHA2_VAL ID_AA64ISAR0_SHA2\n#endif\n\nextern uint32_t OPENSSL_armcap_P;\n\nvoid OPENSSL_cpuid_setup(void) {\n  ...\n```",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3fd3860_aaba9654",
        "filename": "crypto/cpu_aarch64_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-29T13:49:50Z",
      "side": 1,
      "message": "Are these compatibility defines for older versions of FreeBSD? Do you have a pointer to what versions introduced the new ones and whether the old ones are deprecated?",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c35b653e_707b7310",
        "filename": "crypto/cpu_aarch64_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 14851
      },
      "writtenOn": "2022-08-31T00:05:45Z",
      "side": 1,
      "message": "There are three versions are supported at the moment: 12.3, 13.0 (till the end of August), 13.1, and FreeBSD-CURRENT (aka upcoming 14.0).",
      "parentUuid": "b3fd3860_aaba9654",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f06412a_7e846643",
        "filename": "crypto/cpu_aarch64_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-29T13:49:50Z",
      "side": 1,
      "message": "Style nit: We do C99-style variable declarations, so this can just be:\n\n  uint64_t id_aa64isar0 \u003d READ_SPECIALREG(id_aa64isar0_el1);",
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "394414dd_59a1ee71",
        "filename": "crypto/cpu_aarch64_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-29T13:49:50Z",
      "side": 1,
      "message": "I don\u0027t suppose there\u0027s documentation on how you\u0027re intended to use this? Based on the names, I\u0027m guessing FreeBSD\u0027s API is just the Arm registers. In that case, this check should be a \u003e\u003d, in case Arm introduces a new level of AES support.\n\nSee discussion at:\nhttps://bugs.fuchsia.dev/p/fuchsia/issues/detail?id\u003d90759#c1\nhttps://bugs.fuchsia.dev/p/fuchsia/issues/detail?id\u003d93666",
      "range": {
        "startLine": 51,
        "startChar": 41,
        "endLine": 51,
        "endChar": 43
      },
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8651097d_eb5dd1e3",
        "filename": "crypto/cpu_aarch64_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-29T13:49:50Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 54,
        "startChar": 42,
        "endLine": 54,
        "endChar": 44
      },
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7bff8e0_482ddbe6",
        "filename": "crypto/cpu_arm_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-29T13:49:50Z",
      "side": 1,
      "message": "Ditto about current year.",
      "range": {
        "startLine": 1,
        "startChar": 17,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85372c49_91ef6e56",
        "filename": "crypto/cpu_arm_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-29T13:49:50Z",
      "side": 1,
      "message": "Style nit: We usually write `sizeof(hwcap)`. Ditto below.",
      "range": {
        "startLine": 30,
        "startChar": 33,
        "endLine": 30,
        "endChar": 39
      },
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3af80b96_90370e48",
        "filename": "crypto/cpu_arm_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 14886
      },
      "writtenOn": "2022-08-30T17:35:02Z",
      "side": 1,
      "message": "Will change that in a revision of the patch.  Please note two subtle details: (a) elf_aux_info can fail in which case the buffer is not updated.  This causes OPENSSL_cpuid_setup to detect \"no features present,\" but does not raise an error.  If raising an error is preferred, I can try and update the code accordingly.  (b) I have omitted special handling for one CPU type from the Linux variant of the code as it looked complicated and the CPU in question does not seem to be used outside of smartphones.  I can try to put it into the FreeBSD variant if required.",
      "parentUuid": "85372c49_91ef6e56",
      "range": {
        "startLine": 30,
        "startChar": 33,
        "endLine": 30,
        "endChar": 39
      },
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e955210d_d9149e1b",
        "filename": "crypto/cpu_arm_freebsd.c",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5415
      },
      "writtenOn": "2022-08-30T18:02:09Z",
      "side": 1,
      "message": "(a) Ah, good to know. In most configurations this is called inside a static initializer, so there\u0027s not really much useful we can do on error anyway. What you\u0027ve got seems reasonable.\n\n(b) Nah, definitely a good call on omitting that. That thing is just a headache. :-) It may be time for us to retire that code too.",
      "parentUuid": "3af80b96_90370e48",
      "range": {
        "startLine": 30,
        "startChar": 33,
        "endLine": 30,
        "endChar": 39
      },
      "revId": "410f5e2e3bf00f78cb3c341f2309bcf0a5ebfefb",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}