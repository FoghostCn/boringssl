{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "475149f4_5166c4ba",
        "filename": "crypto/bio/fd.c",
        "patchSetId": 1
      },
      "lineNbr": 244,
      "author": {
        "id": 14196
      },
      "writtenOn": "2023-04-03T17:35:39Z",
      "side": 1,
      "message": "Being super picky here, probably a 0 byte size should return 0 (because read does this and is therefore indistinguishable from EOF in this case) but a negative size should EINVAL, rather than look suspiciously like EOF.\n\nThis is the case for read if size (which is size_t in that case) would be larger than SSIZE_MAX, so would be roughly analagous in this case.",
      "revId": "ea7a47feb9cf0e9357f07dac1d38e6d59705d74d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c90e7eec_de7c87f6",
        "filename": "crypto/bio/fd.c",
        "patchSetId": 1
      },
      "lineNbr": 244,
      "author": {
        "id": 5415
      },
      "writtenOn": "2023-04-13T22:35:51Z",
      "side": 1,
      "message": "I guess it depends on whether you believe `BIO_gets(bio, buf, -1)` means \"I am doing something absurd and think `buf` has room for -1 bytes\" or \"please read up at most -1 bytes into `buf`\".\n\nI\u0027d normally agree with you except actually this bit is moot because the `BIO_gets` wrapper code checks for this anyway. I only put this in to make it locally obvious.\n\nAlthough, interestingly, OpenSSL upstream actually takes the former interpretation and makes the `BIO_gets` wrapper raise `BIO_R_INVALID_ARGUMENT` on -1. So maybe we should fix the wrapper...\n\nInterestingly, that\u0027s the opposite interpretation that they have for `BIO_read` and `BIO_write`, where -1 is just successfully reading/writing zero bytes.",
      "parentUuid": "475149f4_5166c4ba",
      "revId": "ea7a47feb9cf0e9357f07dac1d38e6d59705d74d",
      "serverId": "66b711a4-aa9b-3dac-9062-916540830212"
    }
  ]
}